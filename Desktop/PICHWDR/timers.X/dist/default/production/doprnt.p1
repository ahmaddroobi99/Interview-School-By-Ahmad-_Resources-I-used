Version 3.2 HI-TECH Software Intermediate Code
"396 C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c
[v __npowers_ `Cd ~T0 @X0 -> 0 `x e ]
[v __powers_ `Cd ~T0 @X0 -> 0 `x e ]
"10 C:\Program Files\Microchip\xc8\v2.20\pic\include\c90\stdarg.h
[v ___va_start `(*v ~T0 @X0 0 ef ]
[p i ___va_start ]
"7 C:\Program Files\Microchip\xc8\v2.20\pic\include\c90\ctype.h
[v _isdigit `(b ~T0 @X0 0 ef1`uc ]
"13 C:\Program Files\Microchip\xc8\v2.20\pic\include\c90\stdarg.h
[v ___va_arg `(*v ~T0 @X0 0 ev`*v ]
[p i ___va_arg ]
"402 C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c
[v __tdiv_to_l_ `(ul ~T0 @X0 0 ef2`f`f ]
"400
[v __div_to_l_ `(ul ~T0 @X0 0 ef2`d`d ]
[; ;__size_t.h: 4: typedef unsigned size_t;
[; ;stdarg.h: 7: typedef void * va_list[1];
[; ;stdarg.h: 10: extern void * __va_start(void);
[; ;stdarg.h: 13: extern void * __va_arg(void *, ...);
[; ;stdio.h: 43: struct __prbuf
[; ;stdio.h: 44: {
[; ;stdio.h: 45: char * ptr;
[; ;stdio.h: 46: void (* func)(char);
[; ;stdio.h: 47: };
[; ;errno.h: 29: extern int errno;
[; ;conio.h: 12: extern void init_uart(void);
[; ;conio.h: 14: extern char getch(void);
[; ;conio.h: 15: extern char getche(void);
[; ;conio.h: 16: extern void putch(char);
[; ;conio.h: 17: extern void ungetch(char);
[; ;conio.h: 19: extern __bit kbhit(void);
[; ;conio.h: 23: extern char * cgets(char *);
[; ;conio.h: 24: extern void cputs(const char *);
[; ;stdio.h: 88: extern int cprintf(char *, ...);
[; ;stdio.h: 93: extern int _doprnt(struct __prbuf *, const register char *, register va_list);
[; ;stdio.h: 183: extern char * gets(char *);
[; ;stdio.h: 184: extern int puts(const char *);
[; ;stdio.h: 185: extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
[; ;stdio.h: 186: extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
[; ;stdio.h: 187: extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
[; ;stdio.h: 188: extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
[; ;stdio.h: 189: extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
[; ;stdio.h: 190: extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));
[; ;stdio.h: 194: extern int sprintf(char *, const char *, ...);
[; ;stdio.h: 195: extern int printf(const char *, ...);
[; ;ctype.h: 4: extern __bit isalpha(char);
[; ;ctype.h: 5: extern __bit isupper(char);
[; ;ctype.h: 6: extern __bit islower(char);
[; ;ctype.h: 7: extern __bit isdigit(char);
[; ;ctype.h: 8: extern __bit isxdigit(char);
[; ;ctype.h: 9: extern __bit isspace(char);
[; ;ctype.h: 10: extern __bit ispunct(char);
[; ;ctype.h: 11: extern __bit isalnum(char);
[; ;ctype.h: 12: extern __bit isprint(char);
[; ;ctype.h: 13: extern __bit isgraph(char);
[; ;ctype.h: 14: extern __bit iscntrl(char);
[; ;ctype.h: 17: extern char toupper(char);
[; ;ctype.h: 18: extern char tolower(char);
[; ;stdlib.h: 7: typedef unsigned short wchar_t;
[; ;stdlib.h: 15: typedef struct {
[; ;stdlib.h: 16: int rem;
[; ;stdlib.h: 17: int quot;
[; ;stdlib.h: 18: } div_t;
[; ;stdlib.h: 19: typedef struct {
[; ;stdlib.h: 20: unsigned rem;
[; ;stdlib.h: 21: unsigned quot;
[; ;stdlib.h: 22: } udiv_t;
[; ;stdlib.h: 23: typedef struct {
[; ;stdlib.h: 24: long quot;
[; ;stdlib.h: 25: long rem;
[; ;stdlib.h: 26: } ldiv_t;
[; ;stdlib.h: 27: typedef struct {
[; ;stdlib.h: 28: unsigned long quot;
[; ;stdlib.h: 29: unsigned long rem;
[; ;stdlib.h: 30: } uldiv_t;
[; ;stdlib.h: 65: extern double atof(const char *);
[; ;stdlib.h: 66: extern double strtod(const char *, const char **);
[; ;stdlib.h: 67: extern int atoi(const char *);
[; ;stdlib.h: 68: extern unsigned xtoi(const char *);
[; ;stdlib.h: 69: extern long atol(const char *);
[; ;stdlib.h: 73: extern long strtol(const char *, char **, int);
[; ;stdlib.h: 75: extern int rand(void);
[; ;stdlib.h: 76: extern void srand(unsigned int);
[; ;stdlib.h: 77: extern void * calloc(size_t, size_t);
[; ;stdlib.h: 78: extern div_t div(int numer, int denom);
[; ;stdlib.h: 79: extern udiv_t udiv(unsigned numer, unsigned denom);
[; ;stdlib.h: 80: extern ldiv_t ldiv(long numer, long denom);
[; ;stdlib.h: 81: extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
[; ;stdlib.h: 85: extern unsigned long _lrotl(unsigned long value, unsigned int shift);
[; ;stdlib.h: 86: extern unsigned long _lrotr(unsigned long value, unsigned int shift);
[; ;stdlib.h: 87: extern unsigned int _rotl(unsigned int value, unsigned int shift);
[; ;stdlib.h: 88: extern unsigned int _rotr(unsigned int value, unsigned int shift);
[; ;stdlib.h: 93: extern void * malloc(size_t);
[; ;stdlib.h: 94: extern void free(void *);
[; ;stdlib.h: 95: extern void * realloc(void *, size_t);
[; ;xc8debug.h: 14: extern void __builtin_software_breakpoint(void);
[; ;stdlib.h: 104: extern int atexit(void (*)(void));
[; ;stdlib.h: 105: extern char * getenv(const char *);
[; ;stdlib.h: 106: extern char ** environ;
[; ;stdlib.h: 107: extern int system(char *);
[; ;stdlib.h: 108: extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
[; ;stdlib.h: 109: extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
[; ;stdlib.h: 110: extern int abs(int);
[; ;stdlib.h: 111: extern long labs(long);
[; ;stdlib.h: 113: extern char * itoa(char * buf, int val, int base);
[; ;stdlib.h: 114: extern char * utoa(char * buf, unsigned val, int base);
[; ;stdlib.h: 119: extern char * ltoa(char * buf, long val, int base);
[; ;stdlib.h: 120: extern char * ultoa(char * buf, unsigned long val, int base);
[; ;stdlib.h: 122: extern char * ftoa(float f, int * status);
[; ;string.h: 14: extern void * memcpy(void *, const void *, size_t);
[; ;string.h: 15: extern void * memmove(void *, const void *, size_t);
[; ;string.h: 16: extern void * memset(void *, int, size_t);
[; ;string.h: 36: extern char * strcat(char *, const char *);
[; ;string.h: 37: extern char * strcpy(char *, const char *);
[; ;string.h: 38: extern char * strncat(char *, const char *, size_t);
[; ;string.h: 39: extern char * strncpy(char *, const char *, size_t);
[; ;string.h: 40: extern char * strdup(const char *);
[; ;string.h: 41: extern char * strtok(char *, const char *);
[; ;string.h: 44: extern int memcmp(const void *, const void *, size_t);
[; ;string.h: 45: extern int strcmp(const char *, const char *);
[; ;string.h: 46: extern int stricmp(const char *, const char *);
[; ;string.h: 47: extern int strncmp(const char *, const char *, size_t);
[; ;string.h: 48: extern int strnicmp(const char *, const char *, size_t);
[; ;string.h: 49: extern void * memchr(const void *, int, size_t);
[; ;string.h: 50: extern size_t strcspn(const char *, const char *);
[; ;string.h: 51: extern char * strpbrk(const char *, const char *);
[; ;string.h: 52: extern size_t strspn(const char *, const char *);
[; ;string.h: 53: extern char * strstr(const char *, const char *);
[; ;string.h: 54: extern char * stristr(const char *, const char *);
[; ;string.h: 55: extern char * strerror(int);
[; ;string.h: 56: extern size_t strlen(const char *);
[; ;string.h: 57: extern char * strchr(const char *, int);
[; ;string.h: 58: extern char * strichr(const char *, int);
[; ;string.h: 59: extern char * strrchr(const char *, int);
[; ;string.h: 60: extern char * strrichr(const char *, int);
[; ;math.h: 30: extern double fabs(double);
[; ;math.h: 31: extern double floor(double);
[; ;math.h: 32: extern double ceil(double);
[; ;math.h: 33: extern double modf(double, double *);
[; ;math.h: 34: extern double sqrt(double);
[; ;math.h: 35: extern double atof(const char *);
[; ;math.h: 36: extern double sin(double) ;
[; ;math.h: 37: extern double cos(double) ;
[; ;math.h: 38: extern double tan(double) ;
[; ;math.h: 39: extern double asin(double) ;
[; ;math.h: 40: extern double acos(double) ;
[; ;math.h: 41: extern double atan(double);
[; ;math.h: 42: extern double atan2(double, double) ;
[; ;math.h: 43: extern double log(double);
[; ;math.h: 44: extern double log10(double);
[; ;math.h: 45: extern double pow(double, double) ;
[; ;math.h: 46: extern double exp(double) ;
[; ;math.h: 47: extern double sinh(double) ;
[; ;math.h: 48: extern double cosh(double) ;
[; ;math.h: 49: extern double tanh(double);
[; ;math.h: 50: extern double eval_poly(double, const double *, int);
[; ;math.h: 51: extern double frexp(double, int *);
[; ;math.h: 52: extern double ldexp(double, int);
[; ;math.h: 53: extern double fmod(double, double);
[; ;math.h: 54: extern double trunc(double);
[; ;math.h: 55: extern double round(double);
"12 C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c
[p n 350 ]
"358
[v _dpowers `Cul ~T0 @X0 -> 0 `x s ]
[i _dpowers
:U ..
-> -> -> 1 `i `l `ul
-> -> -> 10 `i `l `ul
-> -> -> 100 `i `l `ul
-> -> -> 1000 `i `l `ul
-> -> -> 10000 `i `l `ul
"360
-> -> 100000 `l `ul
-> -> 1000000 `l `ul
-> -> 10000000 `l `ul
-> -> 100000000 `l `ul
"363
-> -> 1000000000 `l `ul
..
]
[; ;doprnt.c: 358: const static unsigned long dpowers[] = {1, 10, 100, 1000, 10000,
[; ;doprnt.c: 360: 100000, 1000000, 10000000, 100000000,
[; ;doprnt.c: 361: 1000000000
[; ;doprnt.c: 363: };
[; ;doprnt.c: 396: extern const double _powers_[], _npowers_[];
[; ;doprnt.c: 400: extern unsigned long _div_to_l_(double, double);
[; ;doprnt.c: 402: extern unsigned long _tdiv_to_l_(float, float);
"417
[v _fround `(d ~T0 @X0 1 sf1`uc ]
"418
{
[; ;doprnt.c: 416: static double
[; ;doprnt.c: 417: fround(unsigned char prec)
[; ;doprnt.c: 418: {
[e :U _fround ]
"417
[v _prec `uc ~T0 @X0 1 r1 ]
"418
[f ]
[; ;doprnt.c: 421: if(prec>=110)
"421
[e $ ! >= -> _prec `i -> 110 `i 7  ]
[; ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * _npowers_[prec%10U];
"422
[e ) * * * .0.5 *U + &U __npowers_ * -> + / -> _prec `ui -> 100 `ui -> 18 `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> + / % -> _prec `ui -> 100 `ui -> 10 `ui -> 9 `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> % -> _prec `ui -> 10 `ui `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 6  ]
[e $U 8  ]
"423
[e :U 7 ]
[; ;doprnt.c: 423: else if(prec > 10)
[e $ ! > -> _prec `i -> 10 `i 9  ]
[; ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
"424
[e ) * * .0.5 *U + &U __npowers_ * -> + / -> _prec `ui -> 10 `ui -> 9 `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> % -> _prec `ui -> 10 `ui `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 6  ]
[e :U 9 ]
"425
[e :U 8 ]
[; ;doprnt.c: 425: return 0.5 * _npowers_[prec];
[e ) * .0.5 *U + &U __npowers_ * -> _prec `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 6  ]
[; ;doprnt.c: 426: }
"426
[e :UE 6 ]
}
"433
[v _scale `(d ~T0 @X0 1 sf1`c ]
"434
{
[; ;doprnt.c: 432: static double
[; ;doprnt.c: 433: scale(signed char scl)
[; ;doprnt.c: 434: {
[e :U _scale ]
"433
[v _scl `c ~T0 @X0 1 r1 ]
"434
[f ]
[; ;doprnt.c: 436: if(scl < 0) {
"436
[e $ ! < -> _scl `i -> 0 `i 11  ]
{
[; ;doprnt.c: 437: scl = -scl;
"437
[e = _scl -> -U -> _scl `i `c ]
[; ;doprnt.c: 438: if(scl>=110)
"438
[e $ ! >= -> _scl `i -> 110 `i 12  ]
[; ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char)((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
"439
[e ) * * *U + &U __npowers_ * -> -> + / -> _scl `i -> 100 `i -> 18 `i `uc `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> + / % -> _scl `i -> 100 `i -> 10 `i -> 9 `i `uc `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> % -> _scl `i -> 10 `i `uc `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 10  ]
[e $U 13  ]
"440
[e :U 12 ]
[; ;doprnt.c: 440: else if(scl > 10)
[e $ ! > -> _scl `i -> 10 `i 14  ]
[; ;doprnt.c: 441: return _npowers_[(unsigned char)(scl/10+9)] * _npowers_[(unsigned char)(scl%10)];
"441
[e ) * *U + &U __npowers_ * -> -> + / -> _scl `i -> 10 `i -> 9 `i `uc `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> % -> _scl `i -> 10 `i `uc `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 10  ]
[e :U 14 ]
"442
[e :U 13 ]
[; ;doprnt.c: 442: return _npowers_[(unsigned char)scl];
[e ) *U + &U __npowers_ * -> -> _scl `uc `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 10  ]
"443
}
[e :U 11 ]
[; ;doprnt.c: 443: }
[; ;doprnt.c: 444: if(scl>=110)
"444
[e $ ! >= -> _scl `i -> 110 `i 15  ]
[; ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)((scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
"445
[e ) * * *U + &U __powers_ * -> -> + / -> _scl `i -> 100 `i -> 18 `i `uc `ux -> -> # *U &U __powers_ `ui `ux *U + &U __powers_ * -> -> + / % -> _scl `i -> 100 `i -> 10 `i -> 9 `i `uc `ux -> -> # *U &U __powers_ `ui `ux *U + &U __powers_ * -> -> % -> _scl `i -> 10 `i `uc `ux -> -> # *U &U __powers_ `ui `ux ]
[e $UE 10  ]
[e $U 16  ]
"446
[e :U 15 ]
[; ;doprnt.c: 446: else if(scl > 10)
[e $ ! > -> _scl `i -> 10 `i 17  ]
[; ;doprnt.c: 447: return _powers_[(unsigned char)(scl/10+9)] * _powers_[(unsigned char)(scl%10)];
"447
[e ) * *U + &U __powers_ * -> -> + / -> _scl `i -> 10 `i -> 9 `i `uc `ux -> -> # *U &U __powers_ `ui `ux *U + &U __powers_ * -> -> % -> _scl `i -> 10 `i `uc `ux -> -> # *U &U __powers_ `ui `ux ]
[e $UE 10  ]
[e :U 17 ]
"448
[e :U 16 ]
[; ;doprnt.c: 448: return _powers_[(unsigned char)scl];
[e ) *U + &U __powers_ * -> -> _scl `uc `ux -> -> # *U &U __powers_ `ui `ux ]
[e $UE 10  ]
[; ;doprnt.c: 449: }
"449
[e :UE 10 ]
}
"505
[v _sprintf `(i ~T0 @X0 1 e1v`*uc`*Cuc ]
"506
{
[; ;doprnt.c: 463: int
[; ;doprnt.c: 505: sprintf(char * sp, const char * f, ...)
[; ;doprnt.c: 506: {
[e :U _sprintf ]
"505
[v _sp `*uc ~T0 @X0 1 r1 ]
[v _f `*Cuc ~T0 @X0 1 r0 ]
"506
[f ]
"507
[v _ap `*v ~T0 @X0 -> -> 1 `i `ux a ]
"512
[v _c `uc ~T0 @X0 1 a ]
"514
[v _width `i ~T0 @X0 1 a ]
"517
[v _prec `i ~T0 @X0 1 a ]
"525
[v _flag `us ~T0 @X0 1 a ]
"532
[v _d `uc ~T0 @X0 1 a ]
"533
[v _fval `d ~T0 @X0 1 a ]
"534
[v _eexp `i ~T0 @X0 1 a ]
"540
[u S18 `ul 1 `d 1 ]
[n S18 . vd integ ]
"543
[v _tmpval `S18 ~T0 @X0 1 a ]
"545
[v _val `ul ~T0 @X0 1 a ]
"546
[v _len `ui ~T0 @X0 1 a ]
"547
[v _cp `*Cuc ~T0 @X0 1 a ]
[; ;doprnt.c: 507: va_list ap;
[; ;doprnt.c: 512: char c;
[; ;doprnt.c: 514: int width;
[; ;doprnt.c: 517: int prec;
[; ;doprnt.c: 525: unsigned short flag;
[; ;doprnt.c: 532: char d;
[; ;doprnt.c: 533: double fval;
[; ;doprnt.c: 534: int eexp;
[; ;doprnt.c: 540: union {
[; ;doprnt.c: 541: unsigned long vd;
[; ;doprnt.c: 542: double integ;
[; ;doprnt.c: 543: } tmpval;
[; ;doprnt.c: 545: unsigned long val;
[; ;doprnt.c: 546: unsigned len;
[; ;doprnt.c: 547: const char * cp;
[; ;doprnt.c: 550: *ap = __va_start();
"550
[e = *U &U _ap ( ___va_start ..  ]
[; ;doprnt.c: 553: while((c = *f++)) {
"553
[e $U 20  ]
[e :U 21 ]
{
[; ;doprnt.c: 555: if(c != '%')
"555
[e $ ! != -> _c `ui -> 37 `ui 23  ]
[; ;doprnt.c: 557: {
"557
{
[; ;doprnt.c: 558: ((*sp++ = (c)));
"558
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x _c ]
[; ;doprnt.c: 559: continue;
"559
[e $U 20  ]
"560
}
[e :U 23 ]
[; ;doprnt.c: 560: }
[; ;doprnt.c: 563: width = 0;
"563
[e = _width -> 0 `i ]
[; ;doprnt.c: 565: flag = 0;
"565
[e = _flag -> -> 0 `i `us ]
[; ;doprnt.c: 567: for(;;) {
"567
{
[e :U 24 ]
{
[; ;doprnt.c: 568: switch(*f) {
"568
[e $U 28  ]
{
[; ;doprnt.c: 596: case '0':
"596
[e :U 29 ]
[; ;doprnt.c: 597: flag |= 0x04;
"597
[e =| _flag -> -> 4 `i `us ]
[; ;doprnt.c: 598: f++;
"598
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
[; ;doprnt.c: 599: continue;
"599
[e $U 26  ]
"601
}
[; ;doprnt.c: 601: }
[e $U 27  ]
"568
[e :U 28 ]
[e [\ *U _f , $ -> -> 48 `ui `uc 29
 27 ]
"601
[e :U 27 ]
[; ;doprnt.c: 602: break;
"602
[e $U 25  ]
"603
}
[e :U 26 ]
[; ;doprnt.c: 603: }
[e $U 24  ]
[e :U 25 ]
}
[; ;doprnt.c: 614: if(isdigit((unsigned)*f)) {
"614
[e $ ! ( _isdigit (1 -> -> *U _f `ui `uc 30  ]
{
[; ;doprnt.c: 615: width = 0;
"615
[e = _width -> 0 `i ]
[; ;doprnt.c: 616: do {
"616
[e :U 33 ]
{
[; ;doprnt.c: 617: width *= 10;
"617
[e =* _width -> 10 `i ]
[; ;doprnt.c: 618: width += *f++ - '0';
"618
[e =+ _width -> - -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `ui -> 48 `ui `i ]
"619
}
[; ;doprnt.c: 619: } while(isdigit((unsigned)*f));
[e $ ( _isdigit (1 -> -> *U _f `ui `uc 33  ]
[e :U 32 ]
"625
}
[e :U 30 ]
[; ;doprnt.c: 625: }
[; ;doprnt.c: 628: if(*f == '.') {
"628
[e $ ! == -> *U _f `ui -> 46 `ui 34  ]
{
[; ;doprnt.c: 629: flag |= 0x4000;
"629
[e =| _flag -> -> 16384 `i `us ]
[; ;doprnt.c: 630: f++;
"630
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
[; ;doprnt.c: 644: {
"644
{
[; ;doprnt.c: 645: prec = 0;
"645
[e = _prec -> 0 `i ]
[; ;doprnt.c: 646: while(isdigit((unsigned)*f)) {
"646
[e $U 35  ]
[e :U 36 ]
{
[; ;doprnt.c: 647: prec *= 10;
"647
[e =* _prec -> 10 `i ]
[; ;doprnt.c: 648: prec += *f++ - '0';
"648
[e =+ _prec -> - -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `ui -> 48 `ui `i ]
"649
}
[e :U 35 ]
"646
[e $ ( _isdigit (1 -> -> *U _f `ui `uc 36  ]
[e :U 37 ]
"650
}
"651
}
[; ;doprnt.c: 649: }
[; ;doprnt.c: 650: }
[; ;doprnt.c: 651: } else {
[e $U 38  ]
[e :U 34 ]
{
[; ;doprnt.c: 652: prec = 0;
"652
[e = _prec -> 0 `i ]
[; ;doprnt.c: 654: flag |= 0x1000;
"654
[e =| _flag -> -> 4096 `i `us ]
"656
}
[e :U 38 ]
[; ;doprnt.c: 656: }
[; ;doprnt.c: 661: switch(c = *f++) {
"661
[e $U 40  ]
{
[; ;doprnt.c: 663: case 0:
"663
[e :U 41 ]
[; ;doprnt.c: 664: goto alldone;
"664
[e $U 42  ]
[; ;doprnt.c: 688: case 'f':
"688
[e :U 43 ]
[; ;doprnt.c: 689: flag |= 0x400;
"689
[e =| _flag -> -> 1024 `i `us ]
[; ;doprnt.c: 690: break;
"690
[e $U 39  ]
[; ;doprnt.c: 723: case 'd':
"723
[e :U 44 ]
"724
[e :U 45 ]
[; ;doprnt.c: 724: case 'i':
[; ;doprnt.c: 725: break;
"725
[e $U 39  ]
[; ;doprnt.c: 754: case 's':
"754
[e :U 46 ]
[; ;doprnt.c: 760: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0));
"760
[e = _cp *U -> ( ___va_arg , (. -> *U -> &U _ap `***Cuc `*v -> -> 0 `i `*Cuc `**Cuc ]
[; ;doprnt.c: 766: if(!cp)
"766
[e $ ! ! != _cp -> -> 0 `i `*Cuc 47  ]
[; ;doprnt.c: 767: cp = "(null)";
"767
[e = _cp :s 1C ]
[e :U 47 ]
[; ;doprnt.c: 771: len = 0;
"771
[e = _len -> -> 0 `i `ui ]
[; ;doprnt.c: 772: while(cp[len])
"772
[e $U 48  ]
[e :U 49 ]
[; ;doprnt.c: 773: len++;
"773
[e ++ _len -> -> 1 `i `ui ]
[e :U 48 ]
"772
[e $ != -> *U + _cp * -> _len `ux -> -> # *U _cp `ui `ux `i -> -> -> 0 `i `Cuc `i 49  ]
[e :U 50 ]
[; ;doprnt.c: 779: if(prec && (prec < ((int)len)))
"779
[e $ ! && != _prec -> 0 `i < _prec -> _len `i 51  ]
[; ;doprnt.c: 780: len = (unsigned int)prec;
"780
[e = _len -> _prec `ui ]
[e :U 51 ]
[; ;doprnt.c: 783: if(((unsigned)width) > len)
"783
[e $ ! > -> _width `ui _len 52  ]
[; ;doprnt.c: 784: width -= len;
"784
[e =- _width -> _len `i ]
[e $U 53  ]
"785
[e :U 52 ]
[; ;doprnt.c: 785: else
[; ;doprnt.c: 786: width = 0;
"786
[e = _width -> 0 `i ]
[e :U 53 ]
[; ;doprnt.c: 790: while(width--)
"790
[e $U 54  ]
[e :U 55 ]
[; ;doprnt.c: 791: ((*sp++ = (' ')));
"791
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 32 `ui `uc ]
[e :U 54 ]
"790
[e $ != -- _width -> 1 `i -> 0 `i 55  ]
[e :U 56 ]
[; ;doprnt.c: 793: while(len--)
"793
[e $U 57  ]
[e :U 58 ]
[; ;doprnt.c: 794: ((*sp++ = (*cp++)));
"794
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x *U ++ _cp * -> -> 1 `i `x -> -> # *U _cp `i `x ]
[e :U 57 ]
"793
[e $ != -- _len -> -> 1 `i `ui -> -> 0 `i `ui 58  ]
[e :U 59 ]
[; ;doprnt.c: 800: continue;
"800
[e $U 20  ]
[; ;doprnt.c: 828: default:
"828
[e :U 60 ]
[; ;doprnt.c: 839: continue;
"839
[e $U 20  ]
"848
}
[; ;doprnt.c: 848: }
[e $U 39  ]
"661
[e :U 40 ]
[e [\ = _c *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x , $ -> -> 0 `i `uc 41
 , $ -> -> 102 `ui `uc 43
 , $ -> -> 100 `ui `uc 44
 , $ -> -> 105 `ui `uc 45
 , $ -> -> 115 `ui `uc 46
 60 ]
"848
[e :U 39 ]
[; ;doprnt.c: 851: if(flag & (0x700)) {
"851
[e $ ! != & -> _flag `ui -> -> 1792 `i `ui -> -> 0 `i `ui 61  ]
{
[; ;doprnt.c: 853: if(flag & 0x1000)
"853
[e $ ! != & -> _flag `ui -> -> 4096 `i `ui -> -> 0 `i `ui 62  ]
[; ;doprnt.c: 855: prec = 6;
"855
[e = _prec -> 6 `i ]
[e :U 62 ]
[; ;doprnt.c: 856: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
"856
[e = _fval *U -> ( ___va_arg , (. -> *U -> &U _ap `**d `*v -> -> 0 `i `d `*d ]
[; ;doprnt.c: 857: if(fval < 0.0) {
"857
[e $ ! < _fval .0.0 63  ]
{
[; ;doprnt.c: 858: fval = -fval;
"858
[e = _fval -U _fval ]
[; ;doprnt.c: 859: flag |= 0x03;
"859
[e =| _flag -> -> 3 `i `us ]
"860
}
[e :U 63 ]
[; ;doprnt.c: 860: }
[; ;doprnt.c: 861: eexp = 0;
"861
[e = _eexp -> 0 `i ]
[; ;doprnt.c: 862: if( fval!=0) {
"862
[e $ ! != _fval -> -> 0 `i `d 64  ]
{
[; ;doprnt.c: 863: (void)(*(&eexp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
"863
[e = *U &U _eexp -> - & >> *U -> &U _fval `*ul -> 15 `i -> -> -> 255 `i `l `ul -> -> -> 126 `i `l `ul `i ]
[; ;doprnt.c: 864: eexp--;
"864
[e -- _eexp -> 1 `i ]
[; ;doprnt.c: 865: eexp *= 3;
"865
[e =* _eexp -> 3 `i ]
[; ;doprnt.c: 866: eexp /= 10;
"866
[e =/ _eexp -> -> 10 `uc `i ]
[; ;doprnt.c: 867: if(eexp < 0)
"867
[e $ ! < _eexp -> 0 `i 65  ]
[; ;doprnt.c: 868: eexp--;
"868
[e -- _eexp -> 1 `i ]
[e :U 65 ]
[; ;doprnt.c: 872: tmpval.integ = scale(-eexp);
"872
[e = . _tmpval 1 ( _scale (1 -> -U _eexp `c ]
[; ;doprnt.c: 873: tmpval.integ *= fval;
"873
[e =* . _tmpval 1 _fval ]
[; ;doprnt.c: 874: if(tmpval.integ < 1.0)
"874
[e $ ! < . _tmpval 1 .1.0 66  ]
[; ;doprnt.c: 875: eexp--;
"875
[e -- _eexp -> 1 `i ]
[e $U 67  ]
"876
[e :U 66 ]
[; ;doprnt.c: 876: else if(tmpval.integ >= 10.0)
[e $ ! >= . _tmpval 1 .10.0 68  ]
[; ;doprnt.c: 877: eexp++;
"877
[e ++ _eexp -> 1 `i ]
[e :U 68 ]
"878
[e :U 67 ]
}
[e :U 64 ]
[; ;doprnt.c: 878: }
[; ;doprnt.c: 1138: if(prec <= 12)
"1138
[e $ ! <= _prec -> 12 `i 69  ]
[; ;doprnt.c: 1139: fval += fround((unsigned int)prec);
"1139
[e =+ _fval ( _fround (1 -> -> _prec `ui `uc ]
[e :U 69 ]
[; ;doprnt.c: 1142: if((eexp > 9)||(fval != 0 && (unsigned long)fval == 0 && eexp > 1)) {
"1142
[e $ ! || > _eexp -> 9 `i && && != _fval -> -> 0 `i `d == -> _fval `ul -> -> -> 0 `i `l `ul > _eexp -> 1 `i 70  ]
{
[; ;doprnt.c: 1146: if(tmpval.integ < 4.294967296){
"1146
[e $ ! < . _tmpval 1 .4.294967296 71  ]
{
[; ;doprnt.c: 1147: eexp -= (sizeof dpowers/sizeof dpowers[0])-1;
"1147
[e =- _eexp -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 1 `i `ui `i ]
"1148
}
[; ;doprnt.c: 1148: }else{
[e $U 72  ]
[e :U 71 ]
{
[; ;doprnt.c: 1149: eexp -= (sizeof dpowers/sizeof dpowers[0])-2;
"1149
[e =- _eexp -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 2 `i `ui `i ]
"1150
}
[e :U 72 ]
[; ;doprnt.c: 1150: }
[; ;doprnt.c: 1151: tmpval.integ = scale(eexp);
"1151
[e = . _tmpval 1 ( _scale (1 -> _eexp `c ]
[; ;doprnt.c: 1152: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_l_(fval,tmpval.integ));
"1152
[e = _val ? == -> # `d `ui -> -> 3 `i `ui : ( __tdiv_to_l_ (2 , -> _fval `f -> . _tmpval 1 `f ( __div_to_l_ (2 , _fval . _tmpval 1 ]
[; ;doprnt.c: 1155: fval = 0.0;
"1155
[e = _fval .0.0 ]
"1156
}
[; ;doprnt.c: 1156: } else {
[e $U 73  ]
[e :U 70 ]
{
[; ;doprnt.c: 1157: val = (unsigned long)fval;
"1157
[e = _val -> _fval `ul ]
[; ;doprnt.c: 1158: fval -= (double)val;
"1158
[e =- _fval -> _val `d ]
[; ;doprnt.c: 1159: eexp = 0;
"1159
[e = _eexp -> 0 `i ]
"1160
}
[e :U 73 ]
[; ;doprnt.c: 1160: }
[; ;doprnt.c: 1162: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
"1162
{
[e = _c -> -> 1 `i `uc ]
[e $ != -> _c `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 74  ]
[e $U 75  ]
"1163
[e :U 74 ]
[; ;doprnt.c: 1163: if(val < dpowers[c])
[e $ ! < _val *U + &U _dpowers * -> _c `ux -> -> # *U &U _dpowers `ui `ux 77  ]
[; ;doprnt.c: 1164: break;
"1164
[e $U 75  ]
[e :U 77 ]
"1162
[e ++ _c -> -> 1 `i `uc ]
[e $ != -> _c `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 74  ]
[e :U 75 ]
"1168
}
[; ;doprnt.c: 1168: width -= prec + c + eexp;
[e =- _width + + _prec -> _c `i _eexp ]
[; ;doprnt.c: 1169: if(
[; ;doprnt.c: 1173: prec)
"1173
[e $ ! != _prec -> 0 `i 78  ]
[; ;doprnt.c: 1174: width--;
"1174
[e -- _width -> 1 `i ]
[e :U 78 ]
[; ;doprnt.c: 1175: if(flag & 0x03)
"1175
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 79  ]
[; ;doprnt.c: 1176: width--;
"1176
[e -- _width -> 1 `i ]
[e :U 79 ]
[; ;doprnt.c: 1179: if(flag & 0x04) {
"1179
[e $ ! != & -> _flag `ui -> -> 4 `i `ui -> -> 0 `i `ui 80  ]
{
[; ;doprnt.c: 1183: if(flag & 0x03)
"1183
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 81  ]
[; ;doprnt.c: 1185: ((*sp++ = ('-')));
"1185
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 45 `ui `uc ]
[e :U 81 ]
[; ;doprnt.c: 1194: while(width > 0) {
"1194
[e $U 82  ]
[e :U 83 ]
{
[; ;doprnt.c: 1195: ((*sp++ = ('0')));
"1195
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 48 `ui `uc ]
[; ;doprnt.c: 1196: width--;
"1196
[e -- _width -> 1 `i ]
"1197
}
[e :U 82 ]
"1194
[e $ > _width -> 0 `i 83  ]
[e :U 84 ]
"1199
}
[; ;doprnt.c: 1197: }
[; ;doprnt.c: 1199: } else
[e $U 85  ]
[e :U 80 ]
[; ;doprnt.c: 1201: {
"1201
{
[; ;doprnt.c: 1206: while(width > 0) {
"1206
[e $U 86  ]
[e :U 87 ]
{
[; ;doprnt.c: 1207: ((*sp++ = (' ')));
"1207
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 32 `ui `uc ]
[; ;doprnt.c: 1208: width--;
"1208
[e -- _width -> 1 `i ]
"1209
}
[e :U 86 ]
"1206
[e $ > _width -> 0 `i 87  ]
[e :U 88 ]
[; ;doprnt.c: 1209: }
[; ;doprnt.c: 1214: if(flag & 0x03)
"1214
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 89  ]
[; ;doprnt.c: 1216: ((*sp++ = ('-')));
"1216
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 45 `ui `uc ]
[e :U 89 ]
"1221
}
[e :U 85 ]
[; ;doprnt.c: 1221: }
[; ;doprnt.c: 1222: while(c--) {
"1222
[e $U 90  ]
[e :U 91 ]
{
[; ;doprnt.c: 1226: {
"1226
{
[; ;doprnt.c: 1227: tmpval.vd = val/dpowers[c];
"1227
[e = . _tmpval 0 / _val *U + &U _dpowers * -> _c `ux -> -> # *U &U _dpowers `ui `ux ]
[; ;doprnt.c: 1228: tmpval.vd %= 10;
"1228
[e =% . _tmpval 0 -> -> 10 `uc `ul ]
[; ;doprnt.c: 1229: ((*sp++ = ('0' + tmpval.vd)));
"1229
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> + -> -> 48 `ui `ul . _tmpval 0 `uc ]
"1230
}
"1232
}
[e :U 90 ]
"1222
[e $ != -> -- _c -> -> 1 `i `uc `i -> -> -> 0 `i `uc `i 91  ]
[e :U 92 ]
[; ;doprnt.c: 1230: }
[; ;doprnt.c: 1232: }
[; ;doprnt.c: 1233: while(eexp > 0) {
"1233
[e $U 93  ]
[e :U 94 ]
{
[; ;doprnt.c: 1234: ((*sp++ = ('0')));
"1234
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 48 `ui `uc ]
[; ;doprnt.c: 1235: eexp--;
"1235
[e -- _eexp -> 1 `i ]
"1236
}
[e :U 93 ]
"1233
[e $ > _eexp -> 0 `i 94  ]
[e :U 95 ]
[; ;doprnt.c: 1236: }
[; ;doprnt.c: 1237: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
"1237
[e $ ! > _prec -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 2 `i `ui `i 96  ]
[; ;doprnt.c: 1238: c = (sizeof dpowers/sizeof dpowers[0])-2;
"1238
[e = _c -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 2 `i `ui `uc ]
[e $U 97  ]
"1239
[e :U 96 ]
[; ;doprnt.c: 1239: else
[; ;doprnt.c: 1240: c = (char)prec;
"1240
[e = _c -> _prec `uc ]
[e :U 97 ]
[; ;doprnt.c: 1241: prec -= (int)c;
"1241
[e =- _prec -> _c `i ]
[; ;doprnt.c: 1245: if(c)
"1245
[e $ ! != -> _c `i -> -> -> 0 `i `uc `i 98  ]
[; ;doprnt.c: 1247: ((*sp++ = ('.')));
"1247
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 46 `ui `uc ]
[e :U 98 ]
[; ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
"1253
[e = _val -> * _fval ( _scale (1 -> _c `c `ul ]
[; ;doprnt.c: 1254: while(c--) {
"1254
[e $U 99  ]
[e :U 100 ]
{
[; ;doprnt.c: 1255: tmpval.vd = val/dpowers[c];
"1255
[e = . _tmpval 0 / _val *U + &U _dpowers * -> _c `ux -> -> # *U &U _dpowers `ui `ux ]
[; ;doprnt.c: 1256: tmpval.vd %= 10;
"1256
[e =% . _tmpval 0 -> -> 10 `uc `ul ]
[; ;doprnt.c: 1257: ((*sp++ = ('0' + tmpval.vd)));
"1257
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> + -> -> 48 `ui `ul . _tmpval 0 `uc ]
[; ;doprnt.c: 1258: val %= dpowers[c];
"1258
[e =% _val *U + &U _dpowers * -> _c `ux -> -> # *U &U _dpowers `ui `ux ]
"1259
}
[e :U 99 ]
"1254
[e $ != -> -- _c -> -> 1 `i `uc `i -> -> -> 0 `i `uc `i 100  ]
[e :U 101 ]
[; ;doprnt.c: 1259: }
[; ;doprnt.c: 1261: while(prec) {
"1261
[e $U 102  ]
[e :U 103 ]
{
[; ;doprnt.c: 1262: ((*sp++ = ('0')));
"1262
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 48 `ui `uc ]
[; ;doprnt.c: 1263: prec--;
"1263
[e -- _prec -> 1 `i ]
"1264
}
[e :U 102 ]
"1261
[e $ != _prec -> 0 `i 103  ]
[e :U 104 ]
[; ;doprnt.c: 1264: }
[; ;doprnt.c: 1271: continue;
"1271
[e $U 20  ]
"1272
}
[e :U 61 ]
[; ;doprnt.c: 1272: }
[; ;doprnt.c: 1279: {
"1279
{
[; ;doprnt.c: 1285: val = (unsigned long)(*(int *)__va_arg((*(int **)ap), (int)0));
"1285
[e = _val -> *U -> ( ___va_arg , (. -> *U -> &U _ap `**i `*v -> 0 `i `*i `ul ]
[; ;doprnt.c: 1287: if((long)val < 0) {
"1287
[e $ ! < -> _val `l -> -> 0 `i `l 105  ]
{
[; ;doprnt.c: 1288: flag |= 0x03;
"1288
[e =| _flag -> -> 3 `i `us ]
[; ;doprnt.c: 1289: val = -val;
"1289
[e = _val -U _val ]
"1290
}
[e :U 105 ]
"1292
}
[; ;doprnt.c: 1290: }
[; ;doprnt.c: 1292: }
[; ;doprnt.c: 1316: if(prec == 0 && val == 0)
"1316
[e $ ! && == _prec -> 0 `i == _val -> -> -> 0 `i `l `ul 106  ]
[; ;doprnt.c: 1317: prec++;
"1317
[e ++ _prec -> 1 `i ]
[e :U 106 ]
[; ;doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
"1331
{
[e = _c -> -> 1 `i `uc ]
[e $ != -> _c `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 107  ]
[e $U 108  ]
"1332
[e :U 107 ]
[; ;doprnt.c: 1332: if(val < dpowers[c])
[e $ ! < _val *U + &U _dpowers * -> _c `ux -> -> # *U &U _dpowers `ui `ux 110  ]
[; ;doprnt.c: 1333: break;
"1333
[e $U 108  ]
[e :U 110 ]
"1331
[e ++ _c -> -> 1 `i `uc ]
[e $ != -> _c `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 107  ]
[e :U 108 ]
"1365
}
[; ;doprnt.c: 1365: if(c < prec)
[e $ ! < -> _c `i _prec 111  ]
[; ;doprnt.c: 1366: c = (char)prec;
"1366
[e = _c -> _prec `uc ]
[e $U 112  ]
"1367
[e :U 111 ]
[; ;doprnt.c: 1367: else if(prec < c)
[e $ ! < _prec -> _c `i 113  ]
[; ;doprnt.c: 1368: prec = c;
"1368
[e = _prec -> _c `i ]
[e :U 113 ]
"1371
[e :U 112 ]
[; ;doprnt.c: 1371: if(width && flag & 0x03)
[e $ ! && != _width -> 0 `i != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 114  ]
[; ;doprnt.c: 1372: width--;
"1372
[e -- _width -> 1 `i ]
[e :U 114 ]
[; ;doprnt.c: 1374: if(flag & 0x4000) {
"1374
[e $ ! != & -> _flag `ui -> -> 16384 `i `ui -> -> 0 `i `ui 115  ]
{
[; ;doprnt.c: 1375: if(width > prec)
"1375
[e $ ! > _width _prec 116  ]
[; ;doprnt.c: 1376: width -= prec;
"1376
[e =- _width _prec ]
[e $U 117  ]
"1377
[e :U 116 ]
[; ;doprnt.c: 1377: else
[; ;doprnt.c: 1378: width = 0;
"1378
[e = _width -> 0 `i ]
[e :U 117 ]
"1379
}
[e :U 115 ]
[; ;doprnt.c: 1379: }
[; ;doprnt.c: 1407: if(width > c)
"1407
[e $ ! > _width -> _c `i 118  ]
[; ;doprnt.c: 1408: width -= c;
"1408
[e =- _width -> _c `i ]
[e $U 119  ]
"1409
[e :U 118 ]
[; ;doprnt.c: 1409: else
[; ;doprnt.c: 1410: width = 0;
"1410
[e = _width -> 0 `i ]
[e :U 119 ]
[; ;doprnt.c: 1413: if(flag & 0x04) {
"1413
[e $ ! != & -> _flag `ui -> -> 4 `i `ui -> -> 0 `i `ui 120  ]
{
[; ;doprnt.c: 1418: if(flag & 0x03)
"1418
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 121  ]
[; ;doprnt.c: 1419: ((*sp++ = ('-')));
"1419
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 45 `ui `uc ]
[e :U 121 ]
[; ;doprnt.c: 1441: if(width)
"1441
[e $ ! != _width -> 0 `i 122  ]
[; ;doprnt.c: 1442: do
"1442
[e :U 125 ]
[; ;doprnt.c: 1443: ((*sp++ = ('0')));
"1443
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 48 `ui `uc ]
[; ;doprnt.c: 1444: while(--width);
"1444
[e $ != =- _width -> 1 `i -> 0 `i 125  ]
[e :U 124 ]
[e :U 122 ]
"1446
}
[; ;doprnt.c: 1446: } else
[e $U 126  ]
[e :U 120 ]
[; ;doprnt.c: 1448: {
"1448
{
[; ;doprnt.c: 1450: if(width
[; ;doprnt.c: 1454: )
"1454
[e $ ! != _width -> 0 `i 127  ]
[; ;doprnt.c: 1455: do
"1455
[e :U 130 ]
[; ;doprnt.c: 1456: ((*sp++ = (' ')));
"1456
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 32 `ui `uc ]
[; ;doprnt.c: 1457: while(--width);
"1457
[e $ != =- _width -> 1 `i -> 0 `i 130  ]
[e :U 129 ]
[e :U 127 ]
[; ;doprnt.c: 1464: if(flag & 0x03)
"1464
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 131  ]
[; ;doprnt.c: 1465: ((*sp++ = ('-')));
"1465
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 45 `ui `uc ]
[e :U 131 ]
"1495
}
[e :U 126 ]
[; ;doprnt.c: 1495: }
[; ;doprnt.c: 1500: while(prec--) {
"1500
[e $U 132  ]
[e :U 133 ]
{
[; ;doprnt.c: 1504: {
"1504
{
[; ;doprnt.c: 1515: c = (val / dpowers[(unsigned int)prec]) % 10 + '0';
"1515
[e = _c -> + % / _val *U + &U _dpowers * -> -> _prec `ui `ux -> -> # *U &U _dpowers `ui `ux -> -> -> 10 `i `l `ul -> -> 48 `ui `ul `uc ]
"1549
}
[; ;doprnt.c: 1549: }
[; ;doprnt.c: 1550: ((*sp++ = (c)));
"1550
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x _c ]
"1551
}
[e :U 132 ]
"1500
[e $ != -- _prec -> 1 `i -> 0 `i 133  ]
[e :U 134 ]
"1559
}
[e :U 20 ]
"553
[e $ != -> = _c *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `i -> -> -> 0 `i `uc `i 21  ]
[e :U 22 ]
[; ;doprnt.c: 1551: }
[; ;doprnt.c: 1559: }
[; ;doprnt.c: 1561: alldone:
"1561
[e :U 42 ]
[; ;doprnt.c: 1564: *sp = 0;
"1564
[e = *U _sp -> -> 0 `i `uc ]
[; ;doprnt.c: 1566: return 0;
"1566
[e ) -> 0 `i ]
[e $UE 19  ]
[; ;doprnt.c: 1567: }
"1567
[e :UE 19 ]
}
[a 1C 40 110 117 108 108 41 0 ]


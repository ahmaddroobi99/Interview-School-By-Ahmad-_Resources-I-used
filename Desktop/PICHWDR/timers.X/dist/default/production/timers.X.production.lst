

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Thu Apr 07 23:15:28 2022

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og9 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=3
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=2
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=2
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=2
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=2
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=2
    66                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    77                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    78                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    79                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    80                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    81  0000                     
    82                           ; Version 2.20
    83                           ; Generated 09/04/2020 GMT
    84                           ; 
    85                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    86                           ; All rights reserved.
    87                           ; 
    88                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    89                           ; 
    90                           ; Redistribution and use in source and binary forms, with or without modification, are
    91                           ; permitted provided that the following conditions are met:
    92                           ; 
    93                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    94                           ;        conditions and the following disclaimer.
    95                           ; 
    96                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    97                           ;        of conditions and the following disclaimer in the documentation and/or other
    98                           ;        materials provided with the distribution.
    99                           ; 
   100                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   101                           ;        software without specific prior written permission.
   102                           ; 
   103                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   104                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   105                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   106                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   107                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   108                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   109                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   110                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   111                           ; 
   112                           ; 
   113                           ; Code-generator required, PIC18F4620 Definitions
   114                           ; 
   115                           ; SFR Addresses
   116  0000                     
   117                           	psect	idataCOMRAM
   118  002B54                     __pidataCOMRAM:
   119                           	callstack 0
   120                           
   121                           ;initializer for _LCD_INIT_STRING
   122  002B54  28                 	db	40
   123  002B55  0C                 	db	12
   124  002B56  01                 	db	1
   125  002B57  06                 	db	6
   126                           
   127                           ;initializer for _HS
   128  002B58  00                 	db	0
   129  002B59  80                 	db	128
   130  002B5A  3F                 	db	63
   131                           
   132                           ;initializer for _count
   133  002B5B  0004               	dw	4
   134                           
   135                           ;initializer for _clkMode
   136  002B5D  0001               	dw	1
   137                           
   138                           	psect	idataBANK1
   139  002B7C                     __pidataBANK1:
   140                           	callstack 0
   141                           
   142                           ;initializer for _hours
   143  002B7C  0001               	dw	1
   144                           
   145                           ;initializer for _seconds
   146  002B7E  0014               	dw	20
   147                           
   148                           	psect	mediumconst
   149  00FEE4                     __pmediumconst:
   150                           	callstack 0
   151  00FEE4  00                 	db	0
   152  00FEE5                     __powers_:
   153                           	callstack 0
   154  00FEE5  00                 	db	0
   155  00FEE6  80                 	db	128
   156  00FEE7  3F                 	db	63
   157  00FEE8  00                 	db	0
   158  00FEE9  20                 	db	32
   159  00FEEA  41                 	db	65
   160  00FEEB  00                 	db	0
   161  00FEEC  C8                 	db	200
   162  00FEED  42                 	db	66
   163  00FEEE  00                 	db	0
   164  00FEEF  7A                 	db	122
   165  00FEF0  44                 	db	68
   166  00FEF1  40                 	db	64
   167  00FEF2  1C                 	db	28
   168  00FEF3  46                 	db	70
   169  00FEF4  50                 	db	80
   170  00FEF5  C3                 	db	195
   171  00FEF6  47                 	db	71
   172  00FEF7  24                 	db	36
   173  00FEF8  74                 	db	116
   174  00FEF9  49                 	db	73
   175  00FEFA  97                 	db	151
   176  00FEFB  18                 	db	24
   177  00FEFC  4B                 	db	75
   178  00FEFD  BC                 	db	188
   179  00FEFE  BE                 	db	190
   180  00FEFF  4C                 	db	76
   181  00FF00  6B                 	db	107
   182  00FF01  6E                 	db	110
   183  00FF02  4E                 	db	78
   184  00FF03  03                 	db	3
   185  00FF04  15                 	db	21
   186  00FF05  50                 	db	80
   187  00FF06  79                 	db	121
   188  00FF07  AD                 	db	173
   189  00FF08  60                 	db	96
   190  00FF09  F3                 	db	243
   191  00FF0A  49                 	db	73
   192  00FF0B  71                 	db	113
   193  00FF0C                     __end_of__powers_:
   194                           	callstack 0
   195  00FF0C                     __npowers_:
   196                           	callstack 0
   197  00FF0C  00                 	db	0
   198  00FF0D  80                 	db	128
   199  00FF0E  3F                 	db	63
   200  00FF0F  CD                 	db	205
   201  00FF10  CC                 	db	204
   202  00FF11  3D                 	db	61
   203  00FF12  D7                 	db	215
   204  00FF13  23                 	db	35
   205  00FF14  3C                 	db	60
   206  00FF15  12                 	db	18
   207  00FF16  83                 	db	131
   208  00FF17  3A                 	db	58
   209  00FF18  B7                 	db	183
   210  00FF19  D1                 	db	209
   211  00FF1A  38                 	db	56
   212  00FF1B  C6                 	db	198
   213  00FF1C  27                 	db	39
   214  00FF1D  37                 	db	55
   215  00FF1E  38                 	db	56
   216  00FF1F  86                 	db	134
   217  00FF20  35                 	db	53
   218  00FF21  C0                 	db	192
   219  00FF22  D6                 	db	214
   220  00FF23  33                 	db	51
   221  00FF24  CC                 	db	204
   222  00FF25  2B                 	db	43
   223  00FF26  32                 	db	50
   224  00FF27  70                 	db	112
   225  00FF28  89                 	db	137
   226  00FF29  30                 	db	48
   227  00FF2A  E7                 	db	231
   228  00FF2B  DB                 	db	219
   229  00FF2C  2E                 	db	46
   230  00FF2D  E5                 	db	229
   231  00FF2E  3C                 	db	60
   232  00FF2F  1E                 	db	30
   233  00FF30  42                 	db	66
   234  00FF31  A2                 	db	162
   235  00FF32  0D                 	db	13
   236  00FF33                     __end_of__npowers_:
   237                           	callstack 0
   238  00FF33                     _dpowers:
   239                           	callstack 0
   240  00FF33  0001               	dw	1
   241  00FF35  0000               	dw	0
   242  00FF37  000A               	dw	10
   243  00FF39  0000               	dw	0
   244  00FF3B  0064               	dw	100
   245  00FF3D  0000               	dw	0
   246  00FF3F  03E8               	dw	1000
   247  00FF41  0000               	dw	0
   248  00FF43  2710               	dw	10000
   249  00FF45  0000               	dw	0
   250  00FF47  86A0               	dw	34464
   251  00FF49  0001               	dw	1
   252  00FF4B  4240               	dw	16960
   253  00FF4D  000F               	dw	15
   254  00FF4F  9680               	dw	38528
   255  00FF51  0098               	dw	152
   256  00FF53  E100               	dw	57600
   257  00FF55  05F5               	dw	1525
   258  00FF57  CA00               	dw	51712
   259  00FF59  3B9A               	dw	15258
   260  00FF5B                     __end_of_dpowers:
   261                           	callstack 0
   262  0000                     _PORTBbits	set	3969
   263  0000                     _IPR2	set	4002
   264  0000                     _PIR2	set	4001
   265  0000                     _PIE2	set	4000
   266  0000                     _IPR1	set	3999
   267  0000                     _PIR1	set	3998
   268  0000                     _PIE1	set	3997
   269  0000                     _T0CON	set	4053
   270  0000                     _INTCON2bits	set	4081
   271  0000                     _INTCON3	set	4080
   272  0000                     _INTCON2	set	4081
   273  0000                     _INTCON	set	4082
   274  0000                     _T0CONbits	set	4053
   275  0000                     _RCONbits	set	4048
   276  0000                     _TRISCbits	set	3988
   277  0000                     _TRISE	set	3990
   278  0000                     _TRISD	set	3989
   279  0000                     _TRISA	set	3986
   280  0000                     _PORTC	set	3970
   281  0000                     _TRISC	set	3988
   282  0000                     _TRISB	set	3987
   283  0000                     _ADCON1	set	4033
   284  0000                     _PORTCbits	set	3970
   285  0000                     _INTCON3bits	set	4080
   286  0000                     _INTCONbits	set	4082
   287  0000                     _TMR3L	set	4018
   288  0000                     _TMR3H	set	4019
   289  0000                     _ADRESL	set	4035
   290  0000                     _ADRESH	set	4036
   291  0000                     _ADCON2	set	4032
   292  0000                     _ADCON0bits	set	4034
   293  0000                     _ADCON0	set	4034
   294  0000                     _PORTEbits	set	3972
   295  00FF5B                     STR_14:
   296                           
   297                           ; BSR set to: 1
   298  00FF5B  54                 	db	84	;'T'
   299  00FF5C  69                 	db	105	;'i'
   300  00FF5D  6D                 	db	109	;'m'
   301  00FF5E  65                 	db	101	;'e'
   302  00FF5F  20                 	db	32
   303  00FF60  3A                 	db	58	;':'
   304  00FF61  20                 	db	32
   305  00FF62  25                 	db	37
   306  00FF63  30                 	db	48	;'0'
   307  00FF64  32                 	db	50	;'2'
   308  00FF65  64                 	db	100	;'d'
   309  00FF66  3A                 	db	58	;':'
   310  00FF67  25                 	db	37
   311  00FF68  30                 	db	48	;'0'
   312  00FF69  32                 	db	50	;'2'
   313  00FF6A  64                 	db	100	;'d'
   314  00FF6B  3A                 	db	58	;':'
   315  00FF6C  25                 	db	37
   316  00FF6D  30                 	db	48	;'0'
   317  00FF6E  32                 	db	50	;'2'
   318  00FF6F  64                 	db	100	;'d'
   319  00FF70  00                 	db	0
   320  00FF71                     STR_10:
   321                           
   322                           ; BSR set to: 1
   323  00FF71  20                 	db	32
   324  00FF72  20                 	db	32
   325  00FF73  31                 	db	49	;'1'
   326  00FF74  30                 	db	48	;'0'
   327  00FF75  20                 	db	32
   328  00FF76  53                 	db	83	;'S'
   329  00FF77  45                 	db	69	;'E'
   330  00FF78  43                 	db	67	;'C'
   331  00FF79  20                 	db	32
   332  00FF7A  20                 	db	32
   333  00FF7B  20                 	db	32
   334  00FF7C  20                 	db	32
   335  00FF7D  20                 	db	32
   336  00FF7E  20                 	db	32
   337  00FF7F  20                 	db	32
   338  00FF80  20                 	db	32
   339  00FF81  20                 	db	32
   340  00FF82  20                 	db	32
   341  00FF83  00                 	db	0
   342  00FF84                     STR_9:
   343                           
   344                           ; BSR set to: 1
   345  00FF84  20                 	db	32
   346  00FF85  20                 	db	32
   347  00FF86  53                 	db	83	;'S'
   348  00FF87  45                 	db	69	;'E'
   349  00FF88  43                 	db	67	;'C'
   350  00FF89  20                 	db	32
   351  00FF8A  20                 	db	32
   352  00FF8B  20                 	db	32
   353  00FF8C  20                 	db	32
   354  00FF8D  20                 	db	32
   355  00FF8E  20                 	db	32
   356  00FF8F  20                 	db	32
   357  00FF90  20                 	db	32
   358  00FF91  20                 	db	32
   359  00FF92  20                 	db	32
   360  00FF93  20                 	db	32
   361  00FF94  00                 	db	0
   362  00FF95                     STR_11:
   363                           
   364                           ; BSR set to: 1
   365  00FF95  20                 	db	32
   366  00FF96  20                 	db	32
   367  00FF97  4D                 	db	77	;'M'
   368  00FF98  49                 	db	73	;'I'
   369  00FF99  4E                 	db	78	;'N'
   370  00FF9A  20                 	db	32
   371  00FF9B  20                 	db	32
   372  00FF9C  20                 	db	32
   373  00FF9D  20                 	db	32
   374  00FF9E  20                 	db	32
   375  00FF9F  20                 	db	32
   376  00FFA0  20                 	db	32
   377  00FFA1  20                 	db	32
   378  00FFA2  20                 	db	32
   379  00FFA3  20                 	db	32
   380  00FFA4  00                 	db	0
   381  00FFA5                     STR_12:
   382                           
   383                           ; BSR set to: 1
   384  00FFA5  20                 	db	32
   385  00FFA6  20                 	db	32
   386  00FFA7  31                 	db	49	;'1'
   387  00FFA8  30                 	db	48	;'0'
   388  00FFA9  20                 	db	32
   389  00FFAA  4D                 	db	77	;'M'
   390  00FFAB  49                 	db	73	;'I'
   391  00FFAC  4E                 	db	78	;'N'
   392  00FFAD  20                 	db	32
   393  00FFAE  20                 	db	32
   394  00FFAF  20                 	db	32
   395  00FFB0  20                 	db	32
   396  00FFB1  20                 	db	32
   397  00FFB2  20                 	db	32
   398  00FFB3  00                 	db	0
   399  00FFB4                     STR_15:
   400                           
   401                           ; BSR set to: 1
   402  00FFB4  54                 	db	84	;'T'
   403  00FFB5  4D                 	db	77	;'M'
   404  00FFB6  50                 	db	80	;'P'
   405  00FFB7  3A                 	db	58	;':'
   406  00FFB8  25                 	db	37
   407  00FFB9  33                 	db	51	;'3'
   408  00FFBA  2E                 	db	46
   409  00FFBB  31                 	db	49	;'1'
   410  00FFBC  66                 	db	102	;'f'
   411  00FFBD  43                 	db	67	;'C'
   412  00FFBE  20                 	db	32
   413  00FFBF  20                 	db	32
   414  00FFC0  20                 	db	32
   415  00FFC1  00                 	db	0
   416  00FFC2                     STR_13:
   417                           
   418                           ; BSR set to: 1
   419  00FFC2  20                 	db	32
   420  00FFC3  20                 	db	32
   421  00FFC4  48                 	db	72	;'H'
   422  00FFC5  4F                 	db	79	;'O'
   423  00FFC6  55                 	db	85	;'U'
   424  00FFC7  52                 	db	82	;'R'
   425  00FFC8  20                 	db	32
   426  00FFC9  20                 	db	32
   427  00FFCA  20                 	db	32
   428  00FFCB  20                 	db	32
   429  00FFCC  20                 	db	32
   430  00FFCD  00                 	db	0
   431  00FFCE                     STR_16:
   432                           
   433                           ; BSR set to: 1
   434  00FFCE  53                 	db	83	;'S'
   435  00FFCF  50                 	db	80	;'P'
   436  00FFD0  20                 	db	32
   437  00FFD1  3A                 	db	58	;':'
   438  00FFD2  25                 	db	37
   439  00FFD3  33                 	db	51	;'3'
   440  00FFD4  2E                 	db	46
   441  00FFD5  31                 	db	49	;'1'
   442  00FFD6  66                 	db	102	;'f'
   443  00FFD7  43                 	db	67	;'C'
   444  00FFD8  00                 	db	0
   445  00FFD9                     STR_17:
   446                           
   447                           ; BSR set to: 1
   448  00FFD9  4D                 	db	77	;'M'
   449  00FFDA  44                 	db	68	;'D'
   450  00FFDB  20                 	db	32
   451  00FFDC  3A                 	db	58	;':'
   452  00FFDD  20                 	db	32
   453  00FFDE  20                 	db	32
   454  00FFDF  20                 	db	32
   455  00FFE0  20                 	db	32
   456  00FFE1  20                 	db	32
   457  00FFE2  00                 	db	0
   458  00FFE3                     STR_18:
   459                           
   460                           ; BSR set to: 1
   461  00FFE3  28                 	db	40
   462  00FFE4  6E                 	db	110	;'n'
   463  00FFE5  75                 	db	117	;'u'
   464  00FFE6  6C                 	db	108	;'l'
   465  00FFE7  6C                 	db	108	;'l'
   466  00FFE8  29                 	db	41
   467  00FFE9  00                 	db	0
   468  00FFEA                     STR_5:
   469                           
   470                           ; BSR set to: 1
   471  00FFEA  20                 	db	32
   472  00FFEB  43                 	db	67	;'C'
   473  00FFEC  4B                 	db	75	;'K'
   474  00FFED  3A                 	db	58	;':'
   475  00FFEE  25                 	db	37
   476  00FFEF  73                 	db	115	;'s'
   477  00FFF0  00                 	db	0
   478  00FFF1                     STR_1:
   479                           
   480                           ; BSR set to: 1
   481  00FFF1  20                 	db	32
   482  00FFF2  48                 	db	72	;'H'
   483  00FFF3  54                 	db	84	;'T'
   484  00FFF4  3A                 	db	58	;':'
   485  00FFF5  25                 	db	37
   486  00FFF6  73                 	db	115	;'s'
   487  00FFF7  00                 	db	0
   488  00FFF8                     STR_4:
   489                           
   490                           ; BSR set to: 1
   491  00FFF8  4F                 	db	79	;'O'
   492  00FFF9  46                 	db	70	;'F'
   493  00FFFA  46                 	db	70	;'F'
   494  00FFFB  00                 	db	0
   495  00FFFC                     STR_2:
   496                           
   497                           ; BSR set to: 1
   498  00FFFC  4F                 	db	79	;'O'
   499  00FFFD  4E                 	db	78	;'N'
   500  00FFFE  00                 	db	0
   501  00FFFF  00                 	db	0	; dummy byte at the end
   502  0000                     
   503                           ; #config settings
   504                           
   505                           	psect	cinit
   506  002270                     __pcinit:
   507                           	callstack 0
   508  002270                     start_initialization:
   509                           	callstack 0
   510  002270                     __initialization:
   511                           	callstack 0
   512                           
   513                           ; Initialize objects allocated to BANK1 (4 bytes)
   514                           ; load TBLPTR registers with __pidataBANK1
   515  002270  0E7C               	movlw	low __pidataBANK1
   516  002272  6EF6               	movwf	tblptrl,c
   517  002274  0E2B               	movlw	high __pidataBANK1
   518  002276  6EF7               	movwf	tblptrh,c
   519  002278  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   520  00227A  6EF8               	movwf	tblptru,c
   521  00227C  EE01  F0E4         	lfsr	0,__pdataBANK1
   522  002280  EE10 F004          	lfsr	1,4
   523  002284                     copy_data0:
   524  002284  0009               	tblrd		*+
   525  002286  CFF5 FFEE          	movff	tablat,postinc0
   526  00228A  50E5               	movf	postdec1,w,c
   527  00228C  50E1               	movf	fsr1l,w,c
   528  00228E  E1FA               	bnz	copy_data0
   529                           
   530                           ; Initialize objects allocated to COMRAM (11 bytes)
   531                           ; load TBLPTR registers with __pidataCOMRAM
   532  002290  0E54               	movlw	low __pidataCOMRAM
   533  002292  6EF6               	movwf	tblptrl,c
   534  002294  0E2B               	movlw	high __pidataCOMRAM
   535  002296  6EF7               	movwf	tblptrh,c
   536  002298  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   537  00229A  6EF8               	movwf	tblptru,c
   538  00229C  EE00  F051         	lfsr	0,__pdataCOMRAM
   539  0022A0  EE10 F00B          	lfsr	1,11
   540  0022A4                     copy_data1:
   541  0022A4  0009               	tblrd		*+
   542  0022A6  CFF5 FFEE          	movff	tablat,postinc0
   543  0022AA  50E5               	movf	postdec1,w,c
   544  0022AC  50E1               	movf	fsr1l,w,c
   545  0022AE  E1FA               	bnz	copy_data1
   546                           
   547                           ; Clear objects allocated to BANK1 (4 bytes)
   548  0022B0  0101               	movlb	1
   549  0022B2  6BE3               	clrf	(__pbssBANK1+3)& (0+255),b
   550  0022B4  6BE2               	clrf	(__pbssBANK1+2)& (0+255),b
   551  0022B6  6BE1               	clrf	(__pbssBANK1+1)& (0+255),b
   552  0022B8  6BE0               	clrf	__pbssBANK1& (0+255),b
   553                           
   554                           ; Clear objects allocated to BANK0 (40 bytes)
   555  0022BA  EE00  F0D6         	lfsr	0,__pbssBANK0
   556  0022BE  0E28               	movlw	40
   557  0022C0                     clear_0:
   558  0022C0  6AEE               	clrf	postinc0,c
   559  0022C2  06E8               	decf	wreg,f,c
   560  0022C4  E1FD               	bnz	clear_0
   561                           
   562                           ; Clear objects allocated to COMRAM (16 bytes)
   563  0022C6  EE00  F041         	lfsr	0,__pbssCOMRAM
   564  0022CA  0E10               	movlw	16
   565  0022CC                     clear_1:
   566  0022CC  6AEE               	clrf	postinc0,c
   567  0022CE  06E8               	decf	wreg,f,c
   568  0022D0  E1FD               	bnz	clear_1
   569  0022D2                     end_of_initialization:
   570                           	callstack 0
   571  0022D2                     __end_of__initialization:
   572                           	callstack 0
   573  0022D2  905C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   574  0022D4  925C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   575  0022D6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   576  0022D8  6EF8               	movwf	tblptru,c
   577  0022DA  0100               	movlb	0
   578  0022DC  EF63  F007         	goto	_main	;jump to C main() function
   579                           
   580                           	psect	bssCOMRAM
   581  000041                     __pbssCOMRAM:
   582                           	callstack 0
   583  000041                     _sp:
   584                           	callstack 0
   585  000041                     	ds	3
   586  000044                     _temp:
   587                           	callstack 0
   588  000044                     	ds	3
   589  000047                     _initial:
   590                           	callstack 0
   591  000047                     	ds	2
   592  000049                     _stpMode:
   593                           	callstack 0
   594  000049                     	ds	2
   595  00004B                     _ft:
   596                           	callstack 0
   597  00004B                     	ds	2
   598  00004D                     _RPS:
   599                           	callstack 0
   600  00004D                     	ds	2
   601  00004F                     _RPS_count:
   602                           	callstack 0
   603  00004F                     	ds	2
   604                           
   605                           	psect	dataCOMRAM
   606  000051                     __pdataCOMRAM:
   607                           	callstack 0
   608  000051                     _LCD_INIT_STRING:
   609                           	callstack 0
   610  000051                     	ds	4
   611  000055                     _HS:
   612                           	callstack 0
   613  000055                     	ds	3
   614  000058                     _count:
   615                           	callstack 0
   616  000058                     	ds	2
   617  00005A                     _clkMode:
   618                           	callstack 0
   619  00005A                     	ds	2
   620                           
   621                           	psect	bssBANK0
   622  0000D6                     __pbssBANK0:
   623                           	callstack 0
   624  0000D6                     _Buffer:
   625                           	callstack 0
   626  0000D6                     	ds	32
   627  0000F6                     _spf:
   628                           	callstack 0
   629  0000F6                     	ds	3
   630  0000F9                     _tempf:
   631                           	callstack 0
   632  0000F9                     	ds	3
   633  0000FC                     _flageBuzz:
   634                           	callstack 0
   635  0000FC                     	ds	2
   636                           
   637                           	psect	bssBANK1
   638  0001E0                     __pbssBANK1:
   639                           	callstack 0
   640  0001E0                     _minutes:
   641                           	callstack 0
   642  0001E0                     	ds	2
   643  0001E2                     _mode:
   644                           	callstack 0
   645  0001E2                     	ds	2
   646                           
   647                           	psect	dataBANK1
   648  0001E4                     __pdataBANK1:
   649                           	callstack 0
   650  0001E4                     _hours:
   651                           	callstack 0
   652  0001E4                     	ds	2
   653  0001E6                     _seconds:
   654                           	callstack 0
   655  0001E6                     	ds	2
   656                           
   657                           	psect	cstackBANK1
   658  000100                     __pcstackBANK1:
   659                           	callstack 0
   660  000100                     display@LCD:
   661                           	callstack 0
   662                           
   663                           ; 64 bytes @ 0x0
   664  000100                     	ds	64
   665  000140                     display@LCDP:
   666                           	callstack 0
   667                           
   668                           ; 64 bytes @ 0x40
   669  000140                     	ds	64
   670  000180                     display@Buffer:
   671                           	callstack 0
   672                           
   673                           ; 32 bytes @ 0x80
   674  000180                     	ds	32
   675  0001A0                     display@Buffer1:
   676                           	callstack 0
   677                           
   678                           ; 32 bytes @ 0xA0
   679  0001A0                     	ds	32
   680  0001C0                     display@Buffer2:
   681                           	callstack 0
   682                           
   683                           ; 32 bytes @ 0xC0
   684  0001C0                     	ds	32
   685                           
   686                           	psect	cstackBANK0
   687  000080                     __pcstackBANK0:
   688                           	callstack 0
   689  000080                     ?_read_adc_voltage:
   690                           	callstack 0
   691  000080                     ?_fround:
   692                           	callstack 0
   693  000080                     ?_scale:
   694                           	callstack 0
   695                           
   696                           ; 3 bytes @ 0x0
   697  000080                     	ds	3
   698  000083                     ??_fround:
   699  000083                     read_adc_voltage@voltage:
   700                           	callstack 0
   701  000083                     _scale$1844:
   702                           	callstack 0
   703                           
   704                           ; 3 bytes @ 0x3
   705  000083                     	ds	1
   706  000084                     _fround$1843:
   707                           	callstack 0
   708                           
   709                           ; 3 bytes @ 0x4
   710  000084                     	ds	2
   711  000086                     read_adc_voltage@channel:
   712                           	callstack 0
   713  000086                     scale@scl:
   714                           	callstack 0
   715                           
   716                           ; 1 bytes @ 0x6
   717  000086                     	ds	1
   718  000087                     ?___fttol:
   719                           	callstack 0
   720  000087                     read_adc_voltage@raw_value:
   721                           	callstack 0
   722  000087                     ___fttol@f1:
   723                           	callstack 0
   724  000087                     _fround$1842:
   725                           	callstack 0
   726                           
   727                           ; 3 bytes @ 0x7
   728  000087                     	ds	3
   729  00008A                     fround@prec:
   730                           	callstack 0
   731                           
   732                           ; 1 bytes @ 0xA
   733  00008A                     	ds	1
   734  00008B                     ??___fttol:
   735  00008B                     ?___ftadd:
   736                           	callstack 0
   737  00008B                     ___ftadd@f1:
   738                           	callstack 0
   739                           
   740                           ; 3 bytes @ 0xB
   741  00008B                     	ds	3
   742  00008E                     ___ftadd@f2:
   743                           	callstack 0
   744                           
   745                           ; 3 bytes @ 0xE
   746  00008E                     	ds	2
   747  000090                     ___fttol@sign1:
   748                           	callstack 0
   749                           
   750                           ; 1 bytes @ 0x10
   751  000090                     	ds	1
   752  000091                     ??___ftadd:
   753  000091                     ___fttol@lval:
   754                           	callstack 0
   755                           
   756                           ; 4 bytes @ 0x11
   757  000091                     	ds	3
   758  000094                     ___ftadd@sign:
   759                           	callstack 0
   760                           
   761                           ; 1 bytes @ 0x14
   762  000094                     	ds	1
   763  000095                     ___ftadd@exp2:
   764                           	callstack 0
   765  000095                     ___fttol@exp1:
   766                           	callstack 0
   767                           
   768                           ; 1 bytes @ 0x15
   769  000095                     	ds	1
   770  000096                     ___ftadd@exp1:
   771                           	callstack 0
   772                           
   773                           ; 1 bytes @ 0x16
   774  000096                     	ds	1
   775  000097                     ?___ftsub:
   776                           	callstack 0
   777  000097                     ___ftsub@f1:
   778                           	callstack 0
   779                           
   780                           ; 3 bytes @ 0x17
   781  000097                     	ds	3
   782  00009A                     ___ftsub@f2:
   783                           	callstack 0
   784                           
   785                           ; 3 bytes @ 0x1A
   786  00009A                     	ds	3
   787  00009D                     ___ftge@ff1:
   788                           	callstack 0
   789                           
   790                           ; 3 bytes @ 0x1D
   791  00009D                     	ds	3
   792  0000A0                     ___ftge@ff2:
   793                           	callstack 0
   794                           
   795                           ; 3 bytes @ 0x20
   796  0000A0                     	ds	3
   797  0000A3                     ??___ftge:
   798                           
   799                           ; 1 bytes @ 0x23
   800  0000A3                     	ds	3
   801  0000A6                     ?_sprintf:
   802                           	callstack 0
   803  0000A6                     sprintf@sp:
   804                           	callstack 0
   805                           
   806                           ; 2 bytes @ 0x26
   807  0000A6                     	ds	2
   808  0000A8                     sprintf@f:
   809                           	callstack 0
   810                           
   811                           ; 2 bytes @ 0x28
   812  0000A8                     	ds	8
   813  0000B0                     ??_sprintf:
   814                           
   815                           ; 1 bytes @ 0x30
   816  0000B0                     	ds	6
   817  0000B6                     _sprintf$1845:
   818                           	callstack 0
   819                           
   820                           ; 3 bytes @ 0x36
   821  0000B6                     	ds	3
   822  0000B9                     sprintf@cp:
   823                           	callstack 0
   824                           
   825                           ; 2 bytes @ 0x39
   826  0000B9                     	ds	2
   827  0000BB                     sprintf@ap:
   828                           	callstack 0
   829                           
   830                           ; 1 bytes @ 0x3B
   831  0000BB                     	ds	1
   832  0000BC                     sprintf@len:
   833                           	callstack 0
   834                           
   835                           ; 2 bytes @ 0x3C
   836  0000BC                     	ds	2
   837  0000BE                     sprintf@tmpval:
   838                           	callstack 0
   839                           
   840                           ; 4 bytes @ 0x3E
   841  0000BE                     	ds	4
   842  0000C2                     sprintf@val:
   843                           	callstack 0
   844                           
   845                           ; 4 bytes @ 0x42
   846  0000C2                     	ds	4
   847  0000C6                     sprintf@eexp:
   848                           	callstack 0
   849                           
   850                           ; 2 bytes @ 0x46
   851  0000C6                     	ds	2
   852  0000C8                     sprintf@flag:
   853                           	callstack 0
   854                           
   855                           ; 2 bytes @ 0x48
   856  0000C8                     	ds	2
   857  0000CA                     sprintf@fval:
   858                           	callstack 0
   859                           
   860                           ; 3 bytes @ 0x4A
   861  0000CA                     	ds	3
   862  0000CD                     sprintf@width:
   863                           	callstack 0
   864                           
   865                           ; 2 bytes @ 0x4D
   866  0000CD                     	ds	2
   867  0000CF                     sprintf@prec:
   868                           	callstack 0
   869                           
   870                           ; 2 bytes @ 0x4F
   871  0000CF                     	ds	2
   872  0000D1                     sprintf@c:
   873                           	callstack 0
   874                           
   875                           ; 1 bytes @ 0x51
   876  0000D1                     	ds	1
   877  0000D2                     ??_display:
   878                           
   879                           ; 1 bytes @ 0x52
   880  0000D2                     	ds	2
   881  0000D4                     main@count:
   882                           	callstack 0
   883                           
   884                           ; 2 bytes @ 0x54
   885  0000D4                     	ds	2
   886                           
   887                           	psect	cstackCOMRAM
   888  000001                     __pcstackCOMRAM:
   889                           	callstack 0
   890  000001                     ?i2___ftpack:
   891                           	callstack 0
   892  000001                     i2___ftpack@arg:
   893                           	callstack 0
   894                           
   895                           ; 3 bytes @ 0x0
   896  000001                     	ds	3
   897  000004                     i2___ftpack@exp:
   898                           	callstack 0
   899                           
   900                           ; 1 bytes @ 0x3
   901  000004                     	ds	1
   902  000005                     i2___ftpack@sign:
   903                           	callstack 0
   904                           
   905                           ; 1 bytes @ 0x4
   906  000005                     	ds	1
   907  000006                     ??i2___ftpack:
   908                           
   909                           ; 1 bytes @ 0x5
   910  000006                     	ds	3
   911  000009                     ?i2___ftadd:
   912                           	callstack 0
   913  000009                     i2___ftadd@f1:
   914                           	callstack 0
   915                           
   916                           ; 3 bytes @ 0x8
   917  000009                     	ds	3
   918  00000C                     i2___ftadd@f2:
   919                           	callstack 0
   920                           
   921                           ; 3 bytes @ 0xB
   922  00000C                     	ds	3
   923  00000F                     ??i2___ftadd:
   924                           
   925                           ; 1 bytes @ 0xE
   926  00000F                     	ds	3
   927  000012                     i2___ftadd@sign:
   928                           	callstack 0
   929                           
   930                           ; 1 bytes @ 0x11
   931  000012                     	ds	1
   932  000013                     i2___ftadd@exp2:
   933                           	callstack 0
   934                           
   935                           ; 1 bytes @ 0x12
   936  000013                     	ds	1
   937  000014                     i2___ftadd@exp1:
   938                           	callstack 0
   939                           
   940                           ; 1 bytes @ 0x13
   941  000014                     	ds	1
   942  000015                     ?i2___ftsub:
   943                           	callstack 0
   944  000015                     i2___ftsub@f1:
   945                           	callstack 0
   946                           
   947                           ; 3 bytes @ 0x14
   948  000015                     	ds	3
   949  000018                     i2___ftsub@f2:
   950                           	callstack 0
   951                           
   952                           ; 3 bytes @ 0x17
   953  000018                     	ds	3
   954  00001B                     i2___ftge@ff1:
   955                           	callstack 0
   956                           
   957                           ; 3 bytes @ 0x1A
   958  00001B                     	ds	3
   959  00001E                     i2___ftge@ff2:
   960                           	callstack 0
   961                           
   962                           ; 3 bytes @ 0x1D
   963  00001E                     	ds	3
   964  000021                     ??i2___ftge:
   965                           
   966                           ; 1 bytes @ 0x20
   967  000021                     	ds	3
   968  000024                     ??_isdigit:
   969  000024                     ??_delay_cycles:
   970  000024                     ?_read_adc_raw_no_lib:
   971                           	callstack 0
   972  000024                     ?___wmul:
   973                           	callstack 0
   974  000024                     ?___awmod:
   975                           	callstack 0
   976  000024                     ?___ftpack:
   977                           	callstack 0
   978  000024                     ?___ftneg:
   979                           	callstack 0
   980  000024                     ?__tdiv_to_l_:
   981                           	callstack 0
   982  000024                     ?__div_to_l_:
   983                           	callstack 0
   984  000024                     ?___lldiv:
   985                           	callstack 0
   986  000024                     ___lbmod@divisor:
   987                           	callstack 0
   988  000024                     delay_ms@n:
   989                           	callstack 0
   990  000024                     ___wmul@multiplier:
   991                           	callstack 0
   992  000024                     ___awmod@dividend:
   993                           	callstack 0
   994  000024                     __div_to_l_@f1:
   995                           	callstack 0
   996  000024                     ___ftpack@arg:
   997                           	callstack 0
   998  000024                     __tdiv_to_l_@f1:
   999                           	callstack 0
  1000  000024                     ___ftneg@f1:
  1001                           	callstack 0
  1002  000024                     ___lldiv@dividend:
  1003                           	callstack 0
  1004                           
  1005                           ; 4 bytes @ 0x23
  1006  000024                     	ds	1
  1007  000025                     ___lbmod@dividend:
  1008                           	callstack 0
  1009  000025                     _isdigit$1593:
  1010                           	callstack 0
  1011                           
  1012                           ; 1 bytes @ 0x24
  1013  000025                     	ds	1
  1014  000026                     ??_read_adc_raw_no_lib:
  1015  000026                     ___lbmod@counter:
  1016                           	callstack 0
  1017  000026                     isdigit@c:
  1018                           	callstack 0
  1019  000026                     delay_ms@i:
  1020                           	callstack 0
  1021  000026                     ___wmul@multiplicand:
  1022                           	callstack 0
  1023  000026                     ___awmod@divisor:
  1024                           	callstack 0
  1025                           
  1026                           ; 2 bytes @ 0x25
  1027  000026                     	ds	1
  1028  000027                     delay_cycles@n:
  1029                           	callstack 0
  1030  000027                     ___ftpack@exp:
  1031                           	callstack 0
  1032  000027                     ___lbmod@rem:
  1033                           	callstack 0
  1034  000027                     __div_to_l_@f2:
  1035                           	callstack 0
  1036  000027                     __tdiv_to_l_@f2:
  1037                           	callstack 0
  1038                           
  1039                           ; 3 bytes @ 0x26
  1040  000027                     	ds	1
  1041  000028                     read_adc_raw_no_lib@channel:
  1042                           	callstack 0
  1043  000028                     ___awmod@counter:
  1044                           	callstack 0
  1045  000028                     ___ftpack@sign:
  1046                           	callstack 0
  1047  000028                     ___lbdiv@divisor:
  1048                           	callstack 0
  1049  000028                     delay_cycles@x:
  1050                           	callstack 0
  1051  000028                     ___wmul@product:
  1052                           	callstack 0
  1053  000028                     ___lldiv@divisor:
  1054                           	callstack 0
  1055                           
  1056                           ; 4 bytes @ 0x27
  1057  000028                     	ds	1
  1058  000029                     ??___ftpack:
  1059  000029                     ___awmod@sign:
  1060                           	callstack 0
  1061  000029                     ___lbdiv@dividend:
  1062                           	callstack 0
  1063  000029                     read_adc_raw_no_lib@raw_value:
  1064                           	callstack 0
  1065                           
  1066                           ; 2 bytes @ 0x28
  1067  000029                     	ds	1
  1068  00002A                     ??__tdiv_to_l_:
  1069  00002A                     ??_lcd_send_nibble:
  1070  00002A                     ?___awdiv:
  1071                           	callstack 0
  1072  00002A                     ___lbdiv@counter:
  1073                           	callstack 0
  1074  00002A                     ___awdiv@dividend:
  1075                           	callstack 0
  1076  00002A                     __div_to_l_@quot:
  1077                           	callstack 0
  1078                           
  1079                           ; 4 bytes @ 0x29
  1080  00002A                     	ds	1
  1081  00002B                     lcd_send_nibble@n:
  1082                           	callstack 0
  1083  00002B                     ___lbdiv@quotient:
  1084                           	callstack 0
  1085                           
  1086                           ; 1 bytes @ 0x2A
  1087  00002B                     	ds	1
  1088  00002C                     ?___awtoft:
  1089                           	callstack 0
  1090  00002C                     ?___lltoft:
  1091                           	callstack 0
  1092  00002C                     ?___lwtoft:
  1093                           	callstack 0
  1094  00002C                     lcd_send_byte@n:
  1095                           	callstack 0
  1096  00002C                     ___awdiv@divisor:
  1097                           	callstack 0
  1098  00002C                     ___awtoft@c:
  1099                           	callstack 0
  1100  00002C                     ___lwtoft@c:
  1101                           	callstack 0
  1102  00002C                     ___lldiv@quotient:
  1103                           	callstack 0
  1104  00002C                     ___lltoft@c:
  1105                           	callstack 0
  1106                           
  1107                           ; 4 bytes @ 0x2B
  1108  00002C                     	ds	1
  1109  00002D                     lcd_send_byte@cm_data:
  1110                           	callstack 0
  1111  00002D                     __tdiv_to_l_@quot:
  1112                           	callstack 0
  1113                           
  1114                           ; 4 bytes @ 0x2C
  1115  00002D                     	ds	1
  1116  00002E                     lcd_init@i:
  1117                           	callstack 0
  1118  00002E                     lcd_gotoxy@y:
  1119                           	callstack 0
  1120  00002E                     ___awdiv@counter:
  1121                           	callstack 0
  1122  00002E                     __div_to_l_@cntr:
  1123                           	callstack 0
  1124                           
  1125                           ; 1 bytes @ 0x2D
  1126  00002E                     	ds	1
  1127  00002F                     lcd_gotoxy@x:
  1128                           	callstack 0
  1129  00002F                     ___awdiv@sign:
  1130                           	callstack 0
  1131  00002F                     ___awtoft@sign:
  1132                           	callstack 0
  1133  00002F                     __div_to_l_@exp1:
  1134                           	callstack 0
  1135                           
  1136                           ; 1 bytes @ 0x2E
  1137  00002F                     	ds	1
  1138  000030                     ??___lltoft:
  1139  000030                     ?___ftdiv:
  1140                           	callstack 0
  1141  000030                     lcd_gotoxy@address:
  1142                           	callstack 0
  1143  000030                     ___lldiv@counter:
  1144                           	callstack 0
  1145  000030                     ___awdiv@quotient:
  1146                           	callstack 0
  1147  000030                     ___ftdiv@f1:
  1148                           	callstack 0
  1149                           
  1150                           ; 3 bytes @ 0x2F
  1151  000030                     	ds	1
  1152  000031                     ?___llmod:
  1153                           	callstack 0
  1154  000031                     lcd_putc@c:
  1155                           	callstack 0
  1156  000031                     __tdiv_to_l_@cntr:
  1157                           	callstack 0
  1158  000031                     ___llmod@dividend:
  1159                           	callstack 0
  1160                           
  1161                           ; 4 bytes @ 0x30
  1162  000031                     	ds	1
  1163  000032                     ?___ftmul:
  1164                           	callstack 0
  1165  000032                     __tdiv_to_l_@exp1:
  1166                           	callstack 0
  1167  000032                     lcd_puts@s:
  1168                           	callstack 0
  1169  000032                     ___ftmul@f1:
  1170                           	callstack 0
  1171                           
  1172                           ; 3 bytes @ 0x31
  1173  000032                     	ds	1
  1174  000033                     ___ftdiv@f2:
  1175                           	callstack 0
  1176                           
  1177                           ; 3 bytes @ 0x32
  1178  000033                     	ds	1
  1179  000034                     ___lltoft@exp:
  1180                           	callstack 0
  1181                           
  1182                           ; 1 bytes @ 0x33
  1183  000034                     	ds	1
  1184  000035                     ___ftmul@f2:
  1185                           	callstack 0
  1186  000035                     ___llmod@divisor:
  1187                           	callstack 0
  1188                           
  1189                           ; 4 bytes @ 0x34
  1190  000035                     	ds	1
  1191  000036                     ??___ftdiv:
  1192                           
  1193                           ; 1 bytes @ 0x35
  1194  000036                     	ds	2
  1195  000038                     ??___ftmul:
  1196                           
  1197                           ; 1 bytes @ 0x37
  1198  000038                     	ds	1
  1199  000039                     ___ftdiv@cntr:
  1200                           	callstack 0
  1201  000039                     ___llmod@counter:
  1202                           	callstack 0
  1203                           
  1204                           ; 1 bytes @ 0x38
  1205  000039                     	ds	1
  1206  00003A                     ___ftdiv@f3:
  1207                           	callstack 0
  1208                           
  1209                           ; 3 bytes @ 0x39
  1210  00003A                     	ds	1
  1211  00003B                     ___ftmul@exp:
  1212                           	callstack 0
  1213                           
  1214                           ; 1 bytes @ 0x3A
  1215  00003B                     	ds	1
  1216  00003C                     ___ftmul@f3_as_product:
  1217                           	callstack 0
  1218                           
  1219                           ; 3 bytes @ 0x3B
  1220  00003C                     	ds	1
  1221  00003D                     ___ftdiv@exp:
  1222                           	callstack 0
  1223                           
  1224                           ; 1 bytes @ 0x3C
  1225  00003D                     	ds	1
  1226  00003E                     ___ftdiv@sign:
  1227                           	callstack 0
  1228                           
  1229                           ; 1 bytes @ 0x3D
  1230  00003E                     	ds	1
  1231  00003F                     ___ftmul@cntr:
  1232                           	callstack 0
  1233                           
  1234                           ; 1 bytes @ 0x3E
  1235  00003F                     	ds	1
  1236  000040                     ___ftmul@sign:
  1237                           	callstack 0
  1238                           
  1239                           ; 1 bytes @ 0x3F
  1240  000040                     	ds	1
  1241  000041                     
  1242                           ; 1 bytes @ 0x40
  1243 ;;
  1244 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1245 ;;
  1246 ;; *************** function _main *****************
  1247 ;; Defined at:
  1248 ;;		line 452 in file "HW2.c"
  1249 ;; Parameters:    Size  Location     Type
  1250 ;;		None
  1251 ;; Auto vars:     Size  Location     Type
  1252 ;;  count           2   84[BANK0 ] int 
  1253 ;; Return value:  Size  Location     Type
  1254 ;;                  1    wreg      void 
  1255 ;; Registers used:
  1256 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1257 ;; Tracked objects:
  1258 ;;		On entry : 0/0
  1259 ;;		On exit  : 3F/0
  1260 ;;		Unchanged: 0/0
  1261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1263 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1265 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1266 ;;Total ram usage:        2 bytes
  1267 ;; Hardware stack levels required when called:   11
  1268 ;; This function calls:
  1269 ;;		___awtoft
  1270 ;;		___ftadd
  1271 ;;		___ftge
  1272 ;;		___ftmul
  1273 ;;		___ftsub
  1274 ;;		___lwtoft
  1275 ;;		_decrement10MinClock
  1276 ;;		_decrement10SClock
  1277 ;;		_decrementClock
  1278 ;;		_decrementHourClock
  1279 ;;		_decrementMinClock
  1280 ;;		_delay_ms
  1281 ;;		_display
  1282 ;;		_increment10MinClock
  1283 ;;		_increment10SClock
  1284 ;;		_incrementClock
  1285 ;;		_incrementHourClock
  1286 ;;		_incrementMinClock
  1287 ;;		_init_adc_no_lib
  1288 ;;		_lcd_init
  1289 ;;		_lcd_send_byte
  1290 ;;		_read_adc_voltage
  1291 ;;		_setupPorts
  1292 ;; This function is called by:
  1293 ;;		Startup code after reset
  1294 ;; This function uses a non-reentrant model
  1295 ;;
  1296                           
  1297                           	psect	text0
  1298  000EC6                     __ptext0:
  1299                           	callstack 0
  1300  000EC6                     _main:
  1301                           	callstack 20
  1302                           
  1303                           ;HW2.c: 453: setupPorts();
  1304                           
  1305                           ;incstack = 0
  1306  000EC6  EC65  F013         	call	_setupPorts	;wreg free
  1307                           
  1308                           ; BSR set to: 1
  1309                           ;HW2.c: 454: int count=0;
  1310  000ECA  0E00               	movlw	0
  1311  000ECC  0100               	movlb	0	; () banked
  1312  000ECE  6FD5               	movwf	(main@count+1)& (0+255),b
  1313  000ED0  0E00               	movlw	0
  1314  000ED2  6FD4               	movwf	main@count& (0+255),b
  1315                           
  1316                           ; BSR set to: 0
  1317                           ;HW2.c: 455: init_adc_no_lib();
  1318  000ED4  ECA4  F015         	call	_init_adc_no_lib	;wreg free
  1319                           
  1320                           ;HW2.c: 457: INTCON = 0;
  1321  000ED8  0E00               	movlw	0
  1322  000EDA  6EF2               	movwf	242,c	;volatile
  1323                           
  1324                           ;HW2.c: 459: INTCON = 0;
  1325  000EDC  0E00               	movlw	0
  1326  000EDE  6EF2               	movwf	242,c	;volatile
  1327                           
  1328                           ; BSR set to: 0
  1329                           ;HW2.c: 460: RCONbits.IPEN =0;
  1330  000EE0  9ED0               	bcf	208,7,c	;volatile
  1331                           
  1332                           ; BSR set to: 0
  1333                           ;HW2.c: 462: INTCONbits.INT0IE = 1;
  1334  000EE2  88F2               	bsf	242,4,c	;volatile
  1335                           
  1336                           ; BSR set to: 0
  1337                           ;HW2.c: 463: INTCONbits.TMR0IE=1;
  1338  000EE4  8AF2               	bsf	242,5,c	;volatile
  1339                           
  1340                           ;HW2.c: 466: INTCON2 = 0;
  1341  000EE6  0E00               	movlw	0
  1342  000EE8  6EF1               	movwf	241,c	;volatile
  1343                           
  1344                           ;HW2.c: 468: INTCON3 = 0;
  1345  000EEA  0E00               	movlw	0
  1346  000EEC  6EF0               	movwf	240,c	;volatile
  1347                           
  1348                           ; BSR set to: 0
  1349                           ;HW2.c: 469: INTCON3bits.INT1IE = 1;
  1350  000EEE  86F0               	bsf	240,3,c	;volatile
  1351                           
  1352                           ; BSR set to: 0
  1353                           ;HW2.c: 471: INTCON2bits.INTEDG1 = 1;
  1354  000EF0  8AF1               	bsf	241,5,c	;volatile
  1355                           
  1356                           ; BSR set to: 0
  1357                           ;HW2.c: 472: INTCON2bits.INTEDG0= 1;
  1358  000EF2  8CF1               	bsf	241,6,c	;volatile
  1359                           
  1360                           ;HW2.c: 473: T0CON=0X80;
  1361  000EF4  0E80               	movlw	128
  1362  000EF6  6ED5               	movwf	213,c	;volatile
  1363                           
  1364                           ;HW2.c: 475: PIE1 = 0;
  1365  000EF8  0E00               	movlw	0
  1366  000EFA  6E9D               	movwf	157,c	;volatile
  1367                           
  1368                           ;HW2.c: 476: PIR1 = 0;
  1369  000EFC  0E00               	movlw	0
  1370  000EFE  6E9E               	movwf	158,c	;volatile
  1371                           
  1372                           ;HW2.c: 477: IPR1 = 0;
  1373  000F00  0E00               	movlw	0
  1374  000F02  6E9F               	movwf	159,c	;volatile
  1375                           
  1376                           ;HW2.c: 478: PIE2 = 0;
  1377  000F04  0E00               	movlw	0
  1378  000F06  6EA0               	movwf	160,c	;volatile
  1379                           
  1380                           ;HW2.c: 479: PIE2 = 0;
  1381  000F08  0E00               	movlw	0
  1382  000F0A  6EA0               	movwf	160,c	;volatile
  1383                           
  1384                           ;HW2.c: 480: PIR2 = 0;
  1385  000F0C  0E00               	movlw	0
  1386  000F0E  6EA1               	movwf	161,c	;volatile
  1387                           
  1388                           ;HW2.c: 481: IPR2 = 0;
  1389  000F10  0E00               	movlw	0
  1390  000F12  6EA2               	movwf	162,c	;volatile
  1391                           
  1392                           ; BSR set to: 0
  1393                           ;HW2.c: 483: INTCONbits.GIEH = 1;
  1394  000F14  8EF2               	bsf	242,7,c	;volatile
  1395                           
  1396                           ; BSR set to: 0
  1397                           ;HW2.c: 484: INTCONbits.GIEL = 1;
  1398  000F16  8CF2               	bsf	242,6,c	;volatile
  1399                           
  1400                           ; BSR set to: 0
  1401                           ;HW2.c: 485: PORTCbits.RC1=0;
  1402  000F18  9282               	bcf	130,1,c	;volatile
  1403                           
  1404                           ; BSR set to: 0
  1405                           ;HW2.c: 486: lcd_init();
  1406  000F1A  EC89  F013         	call	_lcd_init	;wreg free
  1407                           
  1408                           ;HW2.c: 487: lcd_send_byte(0, 1);
  1409  000F1E  0E01               	movlw	1
  1410  000F20  6E2C               	movwf	lcd_send_byte@n^0,c
  1411  000F22  0E00               	movlw	0
  1412  000F24  EC8A  F014         	call	_lcd_send_byte
  1413  000F28                     l360:
  1414  000F28  0004               	clrwdt		;# 
  1415                           
  1416                           ;HW2.c: 502: if (PORTBbits.RB1 == 0){ initial = 0 ; clkMode = 0;
  1417  000F2A  B281               	btfsc	129,1,c	;volatile
  1418  000F2C  D046               	goto	l361
  1419  000F2E  0E00               	movlw	0
  1420  000F30  6E48               	movwf	(_initial+1)^0,c
  1421  000F32  0E00               	movlw	0
  1422  000F34  6E47               	movwf	_initial^0,c
  1423  000F36  0E00               	movlw	0
  1424  000F38  6E5B               	movwf	(_clkMode+1)^0,c
  1425  000F3A  0E00               	movlw	0
  1426  000F3C  6E5A               	movwf	_clkMode^0,c
  1427                           
  1428                           ;HW2.c: 504: if(temp <= sp- HS) {
  1429  000F3E  C055  F09A         	movff	_HS,___ftsub@f2
  1430  000F42  C056  F09B         	movff	_HS+1,___ftsub@f2+1
  1431  000F46  C057  F09C         	movff	_HS+2,___ftsub@f2+2
  1432  000F4A  C041  F097         	movff	_sp,___ftsub@f1
  1433  000F4E  C042  F098         	movff	_sp+1,___ftsub@f1+1
  1434  000F52  C043  F099         	movff	_sp+2,___ftsub@f1+2
  1435  000F56  ECD0  F013         	call	___ftsub	;wreg free
  1436  000F5A  C097  F09D         	movff	?___ftsub,___ftge@ff1
  1437  000F5E  C098  F09E         	movff	?___ftsub+1,___ftge@ff1+1
  1438  000F62  C099  F09F         	movff	?___ftsub+2,___ftge@ff1+2
  1439  000F66  C044  F0A0         	movff	_temp,___ftge@ff2
  1440  000F6A  C045  F0A1         	movff	_temp+1,___ftge@ff2+1
  1441  000F6E  C046  F0A2         	movff	_temp+2,___ftge@ff2+2
  1442  000F72  ECC3  F010         	call	___ftge	;wreg free
  1443  000F76  A0D8               	btfss	status,0,c
  1444  000F78  D002               	goto	l5789
  1445                           
  1446                           ; BSR set to: 0
  1447                           ;HW2.c: 505: PORTCbits.RC5 = 1;
  1448  000F7A  8A82               	bsf	130,5,c	;volatile
  1449                           
  1450                           ;HW2.c: 506: }
  1451  000F7C  D01E               	goto	l361
  1452  000F7E                     l5789:
  1453                           
  1454                           ; BSR set to: 0
  1455                           ;HW2.c: 507: else if(temp >= (sp + HS)) {
  1456  000F7E  C044  F09D         	movff	_temp,___ftge@ff1
  1457  000F82  C045  F09E         	movff	_temp+1,___ftge@ff1+1
  1458  000F86  C046  F09F         	movff	_temp+2,___ftge@ff1+2
  1459  000F8A  C055  F08E         	movff	_HS,___ftadd@f2
  1460  000F8E  C056  F08F         	movff	_HS+1,___ftadd@f2+1
  1461  000F92  C057  F090         	movff	_HS+2,___ftadd@f2+2
  1462  000F96  C041  F08B         	movff	_sp,___ftadd@f1
  1463  000F9A  C042  F08C         	movff	_sp+1,___ftadd@f1+1
  1464  000F9E  C043  F08D         	movff	_sp+2,___ftadd@f1+2
  1465  000FA2  ECF4  F00A         	call	___ftadd	;wreg free
  1466  000FA6  C08B  F0A0         	movff	?___ftadd,___ftge@ff2
  1467  000FAA  C08C  F0A1         	movff	?___ftadd+1,___ftge@ff2+1
  1468  000FAE  C08D  F0A2         	movff	?___ftadd+2,___ftge@ff2+2
  1469  000FB2  ECC3  F010         	call	___ftge	;wreg free
  1470  000FB6  B0D8               	btfsc	status,0,c
  1471                           
  1472                           ; BSR set to: 0
  1473                           ;HW2.c: 508: PORTCbits.RC5 = 0;
  1474  000FB8  9A82               	bcf	130,5,c	;volatile
  1475  000FBA                     l361:
  1476                           
  1477                           ;HW2.c: 509: };HW2.c: 511: };HW2.c: 512: if (PORTBbits.RB0 == 0){
  1478  000FBA  B081               	btfsc	129,0,c	;volatile
  1479  000FBC  D00C               	goto	l5799
  1480                           
  1481                           ;HW2.c: 513: mode+=1;
  1482  000FBE  0101               	movlb	1	; () banked
  1483  000FC0  4BE2               	infsnz	_mode& (0+255),f,b
  1484  000FC2  2BE3               	incf	(_mode+1)& (0+255),f,b
  1485                           
  1486                           ; BSR set to: 1
  1487                           ;HW2.c: 514: if (mode==5)mode=0;
  1488  000FC4  0E05               	movlw	5
  1489  000FC6  19E2               	xorwf	_mode& (0+255),w,b
  1490  000FC8  11E3               	iorwf	(_mode+1)& (0+255),w,b
  1491  000FCA  A4D8               	btfss	status,2,c
  1492  000FCC  D004               	goto	l5799
  1493                           
  1494                           ; BSR set to: 1
  1495  000FCE  0E00               	movlw	0
  1496  000FD0  6FE3               	movwf	(_mode+1)& (0+255),b
  1497  000FD2  0E00               	movlw	0
  1498  000FD4  6FE2               	movwf	_mode& (0+255),b
  1499  000FD6                     l5799:
  1500                           
  1501                           ;HW2.c: 516: };HW2.c: 517: if (PORTBbits.RB5 == 0){ seconds=0 ; minutes =0 ;hours =0;cou
      +                          nt=0 ;mode=0 ;}
  1502  000FD6  BA81               	btfsc	129,5,c	;volatile
  1503  000FD8  D017               	goto	l5803
  1504  000FDA  0E00               	movlw	0
  1505  000FDC  0101               	movlb	1	; () banked
  1506  000FDE  6FE7               	movwf	(_seconds+1)& (0+255),b
  1507  000FE0  0E00               	movlw	0
  1508  000FE2  6FE6               	movwf	_seconds& (0+255),b
  1509  000FE4  0E00               	movlw	0
  1510  000FE6  6FE1               	movwf	(_minutes+1)& (0+255),b
  1511  000FE8  0E00               	movlw	0
  1512  000FEA  6FE0               	movwf	_minutes& (0+255),b
  1513  000FEC  0E00               	movlw	0
  1514  000FEE  6FE5               	movwf	(_hours+1)& (0+255),b
  1515  000FF0  0E00               	movlw	0
  1516  000FF2  6FE4               	movwf	_hours& (0+255),b
  1517  000FF4  0E00               	movlw	0
  1518  000FF6  0100               	movlb	0	; () banked
  1519  000FF8  6FD5               	movwf	(main@count+1)& (0+255),b
  1520  000FFA  0E00               	movlw	0
  1521  000FFC  6FD4               	movwf	main@count& (0+255),b
  1522  000FFE  0E00               	movlw	0
  1523  001000  0101               	movlb	1	; () banked
  1524  001002  6FE3               	movwf	(_mode+1)& (0+255),b
  1525  001004  0E00               	movlw	0
  1526  001006  6FE2               	movwf	_mode& (0+255),b
  1527  001008                     l5803:
  1528                           
  1529                           ;HW2.c: 519: spf = read_adc_voltage(0);
  1530  001008  0E00               	movlw	0
  1531  00100A  ECA8  F011         	call	_read_adc_voltage
  1532  00100E  C080  F0F6         	movff	?_read_adc_voltage,_spf
  1533  001012  C081  F0F7         	movff	?_read_adc_voltage+1,_spf+1
  1534  001016  C082  F0F8         	movff	?_read_adc_voltage+2,_spf+2
  1535                           
  1536                           ;HW2.c: 520: sp=spf*40.0;
  1537  00101A  C0F6  F032         	movff	_spf,___ftmul@f1
  1538  00101E  C0F7  F033         	movff	_spf+1,___ftmul@f1+1
  1539  001022  C0F8  F034         	movff	_spf+2,___ftmul@f1+2
  1540  001026  0E00               	movlw	0
  1541  001028  6E35               	movwf	___ftmul@f2^0,c
  1542  00102A  0E20               	movlw	32
  1543  00102C  6E36               	movwf	(___ftmul@f2+1)^0,c
  1544  00102E  0E42               	movlw	66
  1545  001030  6E37               	movwf	(___ftmul@f2+2)^0,c
  1546  001032  EC1C  F00D         	call	___ftmul	;wreg free
  1547  001036  C032  F041         	movff	?___ftmul,_sp
  1548  00103A  C033  F042         	movff	?___ftmul+1,_sp+1
  1549  00103E  C034  F043         	movff	?___ftmul+2,_sp+2
  1550                           
  1551                           ;HW2.c: 523: tempf =read_adc_voltage(2);
  1552  001042  0E02               	movlw	2
  1553  001044  ECA8  F011         	call	_read_adc_voltage
  1554  001048  C080  F0F9         	movff	?_read_adc_voltage,_tempf
  1555  00104C  C081  F0FA         	movff	?_read_adc_voltage+1,_tempf+1
  1556  001050  C082  F0FB         	movff	?_read_adc_voltage+2,_tempf+2
  1557                           
  1558                           ;HW2.c: 524: temp=tempf*200;
  1559  001054  C0F9  F032         	movff	_tempf,___ftmul@f1
  1560  001058  C0FA  F033         	movff	_tempf+1,___ftmul@f1+1
  1561  00105C  C0FB  F034         	movff	_tempf+2,___ftmul@f1+2
  1562  001060  0E00               	movlw	0
  1563  001062  6E35               	movwf	___ftmul@f2^0,c
  1564  001064  0E48               	movlw	72
  1565  001066  6E36               	movwf	(___ftmul@f2+1)^0,c
  1566  001068  0E43               	movlw	67
  1567  00106A  6E37               	movwf	(___ftmul@f2+2)^0,c
  1568  00106C  EC1C  F00D         	call	___ftmul	;wreg free
  1569  001070  C032  F044         	movff	?___ftmul,_temp
  1570  001074  C033  F045         	movff	?___ftmul+1,_temp+1
  1571  001078  C034  F046         	movff	?___ftmul+2,_temp+2
  1572                           
  1573                           ;HW2.c: 536: if (mode ==0)
  1574  00107C  0101               	movlb	1	; () banked
  1575  00107E  51E2               	movf	_mode& (0+255),w,b
  1576  001080  11E3               	iorwf	(_mode+1)& (0+255),w,b
  1577  001082  A4D8               	btfss	status,2,c
  1578  001084  D00F               	goto	l5823
  1579                           
  1580                           ; BSR set to: 1
  1581                           ;HW2.c: 537: {;HW2.c: 543: if(PORTBbits.RB3 == 0) {incrementClock();count=4;}
  1582  001086  B681               	btfsc	129,3,c	;volatile
  1583  001088  D008               	goto	l369
  1584                           
  1585                           ; BSR set to: 1
  1586  00108A  EC6D  F012         	call	_incrementClock	;wreg free
  1587  00108E                     l5817:
  1588                           
  1589                           ; BSR set to: 1
  1590  00108E  0E00               	movlw	0
  1591  001090  0100               	movlb	0	; () banked
  1592  001092  6FD5               	movwf	(main@count+1)& (0+255),b
  1593  001094  0E04               	movlw	4
  1594  001096  6FD4               	movwf	main@count& (0+255),b
  1595  001098  D040               	goto	l5871
  1596  00109A                     l369:
  1597                           
  1598                           ; BSR set to: 1
  1599                           ;HW2.c: 544: else if(PORTBbits.RB4 == 0) {decrementClock();count=4;}
  1600  00109A  B881               	btfsc	129,4,c	;volatile
  1601  00109C  D03E               	goto	l5871
  1602                           
  1603                           ; BSR set to: 1
  1604  00109E  EC19  F013         	call	_decrementClock	;wreg free
  1605  0010A2  D7F5               	goto	l5817
  1606  0010A4                     l5823:
  1607                           
  1608                           ; BSR set to: 1
  1609                           ;HW2.c: 548: else if(mode ==1)
  1610  0010A4  05E2               	decf	_mode& (0+255),w,b
  1611  0010A6  11E3               	iorwf	(_mode+1)& (0+255),w,b
  1612  0010A8  A4D8               	btfss	status,2,c
  1613  0010AA  D00A               	goto	l5835
  1614                           
  1615                           ; BSR set to: 1
  1616                           ;HW2.c: 549: {;HW2.c: 552: if(PORTBbits.RB3 == 0) {increment10SClock();count=4;}
  1617  0010AC  B681               	btfsc	129,3,c	;volatile
  1618  0010AE  D003               	goto	l374
  1619                           
  1620                           ; BSR set to: 1
  1621  0010B0  EC10  F012         	call	_increment10SClock	;wreg free
  1622  0010B4  D7EC               	goto	l5817
  1623  0010B6                     l374:
  1624                           
  1625                           ; BSR set to: 1
  1626                           ;HW2.c: 553: else if(PORTBbits.RB4 == 0) {decrement10SClock();count=4;}
  1627  0010B6  B881               	btfsc	129,4,c	;volatile
  1628  0010B8  D030               	goto	l5871
  1629                           
  1630                           ; BSR set to: 1
  1631  0010BA  EC9A  F012         	call	_decrement10SClock	;wreg free
  1632  0010BE  D7E7               	goto	l5817
  1633  0010C0                     l5835:
  1634                           
  1635                           ; BSR set to: 1
  1636                           ;HW2.c: 555: else if(mode ==2)
  1637  0010C0  0E02               	movlw	2
  1638  0010C2  19E2               	xorwf	_mode& (0+255),w,b
  1639  0010C4  11E3               	iorwf	(_mode+1)& (0+255),w,b
  1640  0010C6  A4D8               	btfss	status,2,c
  1641  0010C8  D00A               	goto	l5847
  1642                           
  1643                           ; BSR set to: 1
  1644                           ;HW2.c: 556: {;HW2.c: 559: if(PORTBbits.RB3 == 0){ incrementMinClock();count=4;}
  1645  0010CA  B681               	btfsc	129,3,c	;volatile
  1646  0010CC  D003               	goto	l379
  1647                           
  1648                           ; BSR set to: 1
  1649  0010CE  ECAD  F013         	call	_incrementMinClock	;wreg free
  1650  0010D2  D7DD               	goto	l5817
  1651  0010D4                     l379:
  1652                           
  1653                           ; BSR set to: 1
  1654                           ;HW2.c: 560: else if(PORTBbits.RB4 == 0) {decrementMinClock();count=4;}
  1655  0010D4  B881               	btfsc	129,4,c	;volatile
  1656  0010D6  D021               	goto	l5871
  1657                           
  1658                           ; BSR set to: 1
  1659  0010D8  ECA7  F014         	call	_decrementMinClock	;wreg free
  1660  0010DC  D7D8               	goto	l5817
  1661  0010DE                     l5847:
  1662                           
  1663                           ; BSR set to: 1
  1664                           ;HW2.c: 562: else if(mode ==3)
  1665  0010DE  0E03               	movlw	3
  1666  0010E0  19E2               	xorwf	_mode& (0+255),w,b
  1667  0010E2  11E3               	iorwf	(_mode+1)& (0+255),w,b
  1668  0010E4  A4D8               	btfss	status,2,c
  1669  0010E6  D00A               	goto	l5859
  1670                           
  1671                           ; BSR set to: 1
  1672                           ;HW2.c: 563: {;HW2.c: 577: if(PORTBbits.RB3 == 0) {increment10MinClock();count=4;}
  1673  0010E8  B681               	btfsc	129,3,c	;volatile
  1674  0010EA  D003               	goto	l384
  1675                           
  1676                           ; BSR set to: 1
  1677  0010EC  ECF2  F012         	call	_increment10MinClock	;wreg free
  1678  0010F0  D7CE               	goto	l5817
  1679  0010F2                     l384:
  1680                           
  1681                           ; BSR set to: 1
  1682                           ;HW2.c: 578: else if(PORTBbits.RB4 == 0){ decrement10MinClock();count=4;}
  1683  0010F2  B881               	btfsc	129,4,c	;volatile
  1684  0010F4  D012               	goto	l5871
  1685                           
  1686                           ; BSR set to: 1
  1687  0010F6  EC32  F014         	call	_decrement10MinClock	;wreg free
  1688  0010FA  D7C9               	goto	l5817
  1689  0010FC                     l5859:
  1690                           
  1691                           ; BSR set to: 1
  1692                           ;HW2.c: 582: else if(mode ==4)
  1693  0010FC  0E04               	movlw	4
  1694  0010FE  19E2               	xorwf	_mode& (0+255),w,b
  1695  001100  11E3               	iorwf	(_mode+1)& (0+255),w,b
  1696  001102  A4D8               	btfss	status,2,c
  1697  001104  D00A               	goto	l5871
  1698                           
  1699                           ; BSR set to: 1
  1700                           ;HW2.c: 583: {;HW2.c: 599: if(PORTBbits.RB3 == 0){ incrementHourClock();count=4;}
  1701  001106  B681               	btfsc	129,3,c	;volatile
  1702  001108  D003               	goto	l389
  1703                           
  1704                           ; BSR set to: 1
  1705  00110A  EC97  F015         	call	_incrementHourClock	;wreg free
  1706  00110E  D7BF               	goto	l5817
  1707  001110                     l389:
  1708                           
  1709                           ; BSR set to: 1
  1710                           ;HW2.c: 600: else if(PORTBbits.RB4 == 0){ decrementHourClock();count=4;}
  1711  001110  B881               	btfsc	129,4,c	;volatile
  1712  001112  D003               	goto	l5871
  1713                           
  1714                           ; BSR set to: 1
  1715  001114  ECBA  F015         	call	_decrementHourClock	;wreg free
  1716  001118  D7BA               	goto	l5817
  1717  00111A                     l5871:
  1718                           
  1719                           ;HW2.c: 602: };HW2.c: 629: display();
  1720  00111A  ECCF  F008         	call	_display	;wreg free
  1721                           
  1722                           ;HW2.c: 630: if (seconds==0.0&& minutes==0.0&&hours==0.0 ){
  1723  00111E  C1E6  F02C         	movff	_seconds,___awtoft@c
  1724  001122  C1E7  F02D         	movff	_seconds+1,___awtoft@c+1
  1725  001126  ECC4  F014         	call	___awtoft	;wreg free
  1726  00112A  502C               	movf	?___awtoft^0,w,c
  1727  00112C  102D               	iorwf	(?___awtoft+1)^0,w,c
  1728  00112E  102E               	iorwf	(?___awtoft+2)^0,w,c
  1729  001130  A4D8               	btfss	status,2,c
  1730  001132  D6FA               	goto	l360
  1731  001134  C1E0  F02C         	movff	_minutes,___awtoft@c
  1732  001138  C1E1  F02D         	movff	_minutes+1,___awtoft@c+1
  1733  00113C  ECC4  F014         	call	___awtoft	;wreg free
  1734  001140  502C               	movf	?___awtoft^0,w,c
  1735  001142  102D               	iorwf	(?___awtoft+1)^0,w,c
  1736  001144  102E               	iorwf	(?___awtoft+2)^0,w,c
  1737  001146  A4D8               	btfss	status,2,c
  1738  001148  D6EF               	goto	l360
  1739  00114A  C1E4  F02C         	movff	_hours,___lwtoft@c
  1740  00114E  C1E5  F02D         	movff	_hours+1,___lwtoft@c+1
  1741  001152  EC56  F015         	call	___lwtoft	;wreg free
  1742  001156  502C               	movf	?___lwtoft^0,w,c
  1743  001158  102D               	iorwf	(?___lwtoft+1)^0,w,c
  1744  00115A  102E               	iorwf	(?___lwtoft+2)^0,w,c
  1745  00115C  A4D8               	btfss	status,2,c
  1746  00115E  D6E4               	goto	l360
  1747                           
  1748                           ;HW2.c: 632: flageBuzz=1;
  1749  001160  0E00               	movlw	0
  1750  001162  0100               	movlb	0	; () banked
  1751  001164  6FFD               	movwf	(_flageBuzz+1)& (0+255),b
  1752  001166  0E01               	movlw	1
  1753  001168  6FFC               	movwf	_flageBuzz& (0+255),b
  1754  00116A                     l5881:
  1755                           
  1756                           ; BSR set to: 0
  1757                           ;HW2.c: 635: for (;count>0;count--){
  1758  00116A  BFD5               	btfsc	(main@count+1)& (0+255),7,b
  1759  00116C  D6DD               	goto	l360
  1760  00116E  51D5               	movf	(main@count+1)& (0+255),w,b
  1761  001170  E103               	bnz	l393
  1762  001172  05D4               	decf	main@count& (0+255),w,b
  1763  001174  A0D8               	btfss	status,0,c
  1764  001176  D6D8               	goto	l360
  1765  001178                     l393:
  1766                           
  1767                           ; BSR set to: 0
  1768                           ;HW2.c: 636: PORTCbits.RC1=1 ;
  1769  001178  8282               	bsf	130,1,c	;volatile
  1770                           
  1771                           ; BSR set to: 0
  1772                           ;HW2.c: 637: delay_ms(20);
  1773  00117A  0E00               	movlw	0
  1774  00117C  6E25               	movwf	(delay_ms@n+1)^0,c
  1775  00117E  0E14               	movlw	20
  1776  001180  6E24               	movwf	delay_ms@n^0,c
  1777  001182  EC1F  F015         	call	_delay_ms	;wreg free
  1778                           
  1779                           ;HW2.c: 638: PORTCbits.RC1=0;
  1780  001186  9282               	bcf	130,1,c	;volatile
  1781                           
  1782                           ;HW2.c: 639: delay_ms(1000);
  1783  001188  0E03               	movlw	3
  1784  00118A  6E25               	movwf	(delay_ms@n+1)^0,c
  1785  00118C  0EE8               	movlw	232
  1786  00118E  6E24               	movwf	delay_ms@n^0,c
  1787  001190  EC1F  F015         	call	_delay_ms	;wreg free
  1788  001194  0100               	movlb	0	; () banked
  1789  001196  07D4               	decf	main@count& (0+255),f,b
  1790  001198  A0D8               	btfss	status,0,c
  1791  00119A  07D5               	decf	(main@count+1)& (0+255),f,b
  1792  00119C  D7E6               	goto	l5881
  1793  00119E                     __end_of_main:
  1794                           	callstack 0
  1795                           
  1796 ;; *************** function _setupPorts *****************
  1797 ;; Defined at:
  1798 ;;		line 327 in file "HW2.c"
  1799 ;; Parameters:    Size  Location     Type
  1800 ;;		None
  1801 ;; Auto vars:     Size  Location     Type
  1802 ;;		None
  1803 ;; Return value:  Size  Location     Type
  1804 ;;                  1    wreg      void 
  1805 ;; Registers used:
  1806 ;;		wreg, status,2, cstack
  1807 ;; Tracked objects:
  1808 ;;		On entry : 0/0
  1809 ;;		On exit  : 3F/1
  1810 ;;		Unchanged: 0/0
  1811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1815 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1816 ;;Total ram usage:        0 bytes
  1817 ;; Hardware stack levels used:    1
  1818 ;; Hardware stack levels required when called:    5
  1819 ;; This function calls:
  1820 ;;		_reloadTimer0
  1821 ;; This function is called by:
  1822 ;;		_main
  1823 ;; This function uses a non-reentrant model
  1824 ;;
  1825                           
  1826                           	psect	text1
  1827  0026CA                     __ptext1:
  1828                           	callstack 0
  1829  0026CA                     _setupPorts:
  1830                           	callstack 25
  1831                           
  1832                           ;HW2.c: 329: ADCON0 =1;
  1833                           
  1834                           ; BSR set to: 0
  1835                           ;incstack = 0
  1836  0026CA  0E01               	movlw	1
  1837  0026CC  6EC2               	movwf	194,c	;volatile
  1838                           
  1839                           ;HW2.c: 330: ADCON1 = 0x0C;
  1840  0026CE  0E0C               	movlw	12
  1841  0026D0  6EC1               	movwf	193,c	;volatile
  1842                           
  1843                           ;HW2.c: 331: TRISB = 0xFF;
  1844  0026D2  6893               	setf	147,c	;volatile
  1845                           
  1846                           ;HW2.c: 332: TRISC = 0x80;
  1847  0026D4  0E80               	movlw	128
  1848  0026D6  6E94               	movwf	148,c	;volatile
  1849                           
  1850                           ;HW2.c: 333: PORTC =0;
  1851  0026D8  0E00               	movlw	0
  1852  0026DA  6E82               	movwf	130,c	;volatile
  1853                           
  1854                           ;HW2.c: 334: TRISA = 0xFF;
  1855  0026DC  6892               	setf	146,c	;volatile
  1856                           
  1857                           ;HW2.c: 335: TRISD = 0x00;
  1858  0026DE  0E00               	movlw	0
  1859  0026E0  6E95               	movwf	149,c	;volatile
  1860                           
  1861                           ;HW2.c: 336: TRISE= 0x00;
  1862  0026E2  0E00               	movlw	0
  1863  0026E4  6E96               	movwf	150,c	;volatile
  1864                           
  1865                           ;HW2.c: 338: TRISCbits.RC0 = 1;
  1866  0026E6  8094               	bsf	148,0,c	;volatile
  1867                           
  1868                           ;HW2.c: 340: PORTCbits.RC5 = 0;
  1869  0026E8  9A82               	bcf	130,5,c	;volatile
  1870                           
  1871                           ;HW2.c: 342: seconds = 0;
  1872  0026EA  0E00               	movlw	0
  1873  0026EC  0101               	movlb	1	; () banked
  1874  0026EE  6FE7               	movwf	(_seconds+1)& (0+255),b
  1875  0026F0  0E00               	movlw	0
  1876  0026F2  6FE6               	movwf	_seconds& (0+255),b
  1877                           
  1878                           ;HW2.c: 343: minutes = 0;
  1879  0026F4  0E00               	movlw	0
  1880  0026F6  6FE1               	movwf	(_minutes+1)& (0+255),b
  1881  0026F8  0E00               	movlw	0
  1882  0026FA  6FE0               	movwf	_minutes& (0+255),b
  1883                           
  1884                           ;HW2.c: 344: hours = 0;
  1885  0026FC  0E00               	movlw	0
  1886  0026FE  6FE5               	movwf	(_hours+1)& (0+255),b
  1887  002700  0E00               	movlw	0
  1888  002702  6FE4               	movwf	_hours& (0+255),b
  1889                           
  1890                           ; BSR set to: 1
  1891                           ;HW2.c: 347: RCONbits.IPEN = 0;
  1892  002704  9ED0               	bcf	208,7,c	;volatile
  1893                           
  1894                           ; BSR set to: 1
  1895                           ;HW2.c: 348: INTCONbits.TMR0IE = 1;
  1896  002706  8AF2               	bsf	242,5,c	;volatile
  1897                           
  1898                           ; BSR set to: 1
  1899                           ;HW2.c: 349: T0CONbits.TMR0ON = 1;
  1900  002708  8ED5               	bsf	213,7,c	;volatile
  1901                           
  1902                           ; BSR set to: 1
  1903                           ;HW2.c: 350: INTCONbits.INT0IE = 1;
  1904  00270A  88F2               	bsf	242,4,c	;volatile
  1905                           
  1906                           ; BSR set to: 1
  1907                           ;HW2.c: 352: reloadTimer0();
  1908  00270C  ECB0  F015         	call	_reloadTimer0	;wreg free
  1909                           
  1910                           ; BSR set to: 1
  1911  002710  0012               	return		;funcret
  1912  002712                     __end_of_setupPorts:
  1913                           	callstack 0
  1914                           
  1915 ;; *************** function _reloadTimer0 *****************
  1916 ;; Defined at:
  1917 ;;		line 91 in file "HW2.c"
  1918 ;; Parameters:    Size  Location     Type
  1919 ;;		None
  1920 ;; Auto vars:     Size  Location     Type
  1921 ;;		None
  1922 ;; Return value:  Size  Location     Type
  1923 ;;                  1    wreg      void 
  1924 ;; Registers used:
  1925 ;;		wreg, status,2
  1926 ;; Tracked objects:
  1927 ;;		On entry : 3F/1
  1928 ;;		On exit  : 3F/1
  1929 ;;		Unchanged: 3F/0
  1930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1934 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1935 ;;Total ram usage:        0 bytes
  1936 ;; Hardware stack levels used:    1
  1937 ;; Hardware stack levels required when called:    4
  1938 ;; This function calls:
  1939 ;;		Nothing
  1940 ;; This function is called by:
  1941 ;;		_setupPorts
  1942 ;; This function uses a non-reentrant model
  1943 ;;
  1944                           
  1945                           	psect	text2
  1946  002B60                     __ptext2:
  1947                           	callstack 0
  1948  002B60                     _reloadTimer0:
  1949                           	callstack 25
  1950                           
  1951                           ; BSR set to: 1
  1952                           ;HW2.c: 93: TMR3H = (unsigned char) ((3036 >> 8) & 0x00FF);
  1953                           
  1954                           ; BSR set to: 1
  1955                           ;incstack = 0
  1956  002B60  0E0B               	movlw	11
  1957  002B62  6EB3               	movwf	179,c	;volatile
  1958                           
  1959                           ;HW2.c: 94: TMR3L = (unsigned char)(3036 & 0x00FF );
  1960  002B64  0EDC               	movlw	220
  1961  002B66  6EB2               	movwf	178,c	;volatile
  1962                           
  1963                           ; BSR set to: 1
  1964  002B68  0012               	return		;funcret
  1965  002B6A                     __end_of_reloadTimer0:
  1966                           	callstack 0
  1967                           
  1968 ;; *************** function _read_adc_voltage *****************
  1969 ;; Defined at:
  1970 ;;		line 45 in file "my_adc.c"
  1971 ;; Parameters:    Size  Location     Type
  1972 ;;  channel         1    wreg     unsigned char 
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;  channel         1    6[BANK0 ] unsigned char 
  1975 ;;  voltage         3    3[BANK0 ] float 
  1976 ;;  raw_value       2    7[BANK0 ] int 
  1977 ;; Return value:  Size  Location     Type
  1978 ;;                  3    0[BANK0 ] float 
  1979 ;; Registers used:
  1980 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1981 ;; Tracked objects:
  1982 ;;		On entry : 0/0
  1983 ;;		On exit  : 0/0
  1984 ;;		Unchanged: 0/0
  1985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1986 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1987 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1989 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1990 ;;Total ram usage:        9 bytes
  1991 ;; Hardware stack levels used:    1
  1992 ;; Hardware stack levels required when called:    6
  1993 ;; This function calls:
  1994 ;;		___awtoft
  1995 ;;		___ftdiv
  1996 ;;		___wmul
  1997 ;;		_read_adc_raw_no_lib
  1998 ;; This function is called by:
  1999 ;;		_main
  2000 ;; This function uses a non-reentrant model
  2001 ;;
  2002                           
  2003                           	psect	text3
  2004  002350                     __ptext3:
  2005                           	callstack 0
  2006  002350                     _read_adc_voltage:
  2007                           	callstack 24
  2008                           
  2009                           ; BSR set to: 1
  2010                           ;incstack = 0
  2011                           ;read_adc_voltage@channel stored from wreg
  2012  002350  0100               	movlb	0	; () banked
  2013  002352  6F86               	movwf	read_adc_voltage@channel& (0+255),b
  2014                           
  2015                           ;my_adc.c: 46: int raw_value;;my_adc.c: 47: float voltage;;my_adc.c: 48: raw_value = rea
      +                          d_adc_raw_no_lib(channel);
  2016  002354  0100               	movlb	0	; () banked
  2017  002356  5186               	movf	read_adc_voltage@channel& (0+255),w,b
  2018  002358  EC50  F014         	call	_read_adc_raw_no_lib
  2019  00235C  C024  F087         	movff	?_read_adc_raw_no_lib,read_adc_voltage@raw_value
  2020  002360  C025  F088         	movff	?_read_adc_raw_no_lib+1,read_adc_voltage@raw_value+1
  2021                           
  2022                           ;my_adc.c: 49: voltage = (raw_value * 5) / 1023.0;
  2023  002364  C087  F024         	movff	read_adc_voltage@raw_value,___wmul@multiplier
  2024  002368  C088  F025         	movff	read_adc_voltage@raw_value+1,___wmul@multiplier+1
  2025  00236C  0E00               	movlw	0
  2026  00236E  6E27               	movwf	(___wmul@multiplicand+1)^0,c
  2027  002370  0E05               	movlw	5
  2028  002372  6E26               	movwf	___wmul@multiplicand^0,c
  2029  002374  EC0C  F015         	call	___wmul	;wreg free
  2030  002378  C024  F02C         	movff	?___wmul,___awtoft@c
  2031  00237C  C025  F02D         	movff	?___wmul+1,___awtoft@c+1
  2032  002380  ECC4  F014         	call	___awtoft	;wreg free
  2033  002384  C02C  F030         	movff	?___awtoft,___ftdiv@f1
  2034  002388  C02D  F031         	movff	?___awtoft+1,___ftdiv@f1+1
  2035  00238C  C02E  F032         	movff	?___awtoft+2,___ftdiv@f1+2
  2036  002390  0EC0               	movlw	192
  2037  002392  6E33               	movwf	___ftdiv@f2^0,c
  2038  002394  0E7F               	movlw	127
  2039  002396  6E34               	movwf	(___ftdiv@f2+1)^0,c
  2040  002398  0E44               	movlw	68
  2041  00239A  6E35               	movwf	(___ftdiv@f2+2)^0,c
  2042  00239C  EC10  F00E         	call	___ftdiv	;wreg free
  2043  0023A0  C030  F083         	movff	?___ftdiv,read_adc_voltage@voltage
  2044  0023A4  C031  F084         	movff	?___ftdiv+1,read_adc_voltage@voltage+1
  2045  0023A8  C032  F085         	movff	?___ftdiv+2,read_adc_voltage@voltage+2
  2046                           
  2047                           ;my_adc.c: 50: return voltage;
  2048  0023AC  C083  F080         	movff	read_adc_voltage@voltage,?_read_adc_voltage
  2049  0023B0  C084  F081         	movff	read_adc_voltage@voltage+1,?_read_adc_voltage+1
  2050  0023B4  C085  F082         	movff	read_adc_voltage@voltage+2,?_read_adc_voltage+2
  2051  0023B8  0012               	return		;funcret
  2052  0023BA                     __end_of_read_adc_voltage:
  2053                           	callstack 0
  2054                           
  2055 ;; *************** function _read_adc_raw_no_lib *****************
  2056 ;; Defined at:
  2057 ;;		line 29 in file "my_adc.c"
  2058 ;; Parameters:    Size  Location     Type
  2059 ;;  channel         1    wreg     unsigned char 
  2060 ;; Auto vars:     Size  Location     Type
  2061 ;;  channel         1   39[COMRAM] unsigned char 
  2062 ;;  raw_value       2   40[COMRAM] int 
  2063 ;; Return value:  Size  Location     Type
  2064 ;;                  2   35[COMRAM] int 
  2065 ;; Registers used:
  2066 ;;		wreg, status,2, status,0
  2067 ;; Tracked objects:
  2068 ;;		On entry : 3F/0
  2069 ;;		On exit  : 0/0
  2070 ;;		Unchanged: 0/0
  2071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2072 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2073 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2074 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2075 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2076 ;;Total ram usage:        7 bytes
  2077 ;; Hardware stack levels used:    1
  2078 ;; Hardware stack levels required when called:    4
  2079 ;; This function calls:
  2080 ;;		Nothing
  2081 ;; This function is called by:
  2082 ;;		_read_adc_voltage
  2083 ;; This function uses a non-reentrant model
  2084 ;;
  2085                           
  2086                           	psect	text4
  2087  0028A0                     __ptext4:
  2088                           	callstack 0
  2089  0028A0                     _read_adc_raw_no_lib:
  2090                           	callstack 25
  2091                           
  2092                           ;incstack = 0
  2093                           ;read_adc_raw_no_lib@channel stored from wreg
  2094  0028A0  6E28               	movwf	read_adc_raw_no_lib@channel^0,c
  2095                           
  2096                           ;my_adc.c: 30: int raw_value;;my_adc.c: 32: ADCON0bits.CHS = channel ;
  2097  0028A2  C028  F026         	movff	read_adc_raw_no_lib@channel,??_read_adc_raw_no_lib
  2098  0028A6  4626               	rlncf	??_read_adc_raw_no_lib^0,f,c
  2099  0028A8  4626               	rlncf	??_read_adc_raw_no_lib^0,f,c
  2100  0028AA  50C2               	movf	194,w,c	;volatile
  2101  0028AC  1826               	xorwf	??_read_adc_raw_no_lib^0,w,c
  2102  0028AE  0BC3               	andlw	-61
  2103  0028B0  1826               	xorwf	??_read_adc_raw_no_lib^0,w,c
  2104  0028B2  6EC2               	movwf	194,c	;volatile
  2105                           
  2106                           ;my_adc.c: 35: ADCON0bits.GO = 1;
  2107  0028B4  82C2               	bsf	194,1,c	;volatile
  2108  0028B6                     l76:
  2109  0028B6  B2C2               	btfsc	194,1,c	;volatile
  2110  0028B8  D7FE               	goto	l76
  2111                           
  2112                           ;my_adc.c: 37: raw_value = ADRESH << 8 | ADRESL;
  2113  0028BA  50C3               	movf	195,w,c	;volatile
  2114  0028BC  CFC4 F026          	movff	4036,??_read_adc_raw_no_lib	;volatile
  2115  0028C0  6A27               	clrf	(??_read_adc_raw_no_lib+1)^0,c
  2116  0028C2  C026  F027         	movff	??_read_adc_raw_no_lib,??_read_adc_raw_no_lib+1
  2117  0028C6  6A26               	clrf	??_read_adc_raw_no_lib^0,c
  2118  0028C8  1026               	iorwf	??_read_adc_raw_no_lib^0,w,c
  2119  0028CA  6E29               	movwf	read_adc_raw_no_lib@raw_value^0,c
  2120  0028CC  5027               	movf	(??_read_adc_raw_no_lib+1)^0,w,c
  2121  0028CE  6E2A               	movwf	(read_adc_raw_no_lib@raw_value+1)^0,c
  2122                           
  2123                           ;my_adc.c: 42: return raw_value;
  2124  0028D0  C029  F024         	movff	read_adc_raw_no_lib@raw_value,?_read_adc_raw_no_lib
  2125  0028D4  C02A  F025         	movff	read_adc_raw_no_lib@raw_value+1,?_read_adc_raw_no_lib+1
  2126  0028D8  0012               	return		;funcret
  2127  0028DA                     __end_of_read_adc_raw_no_lib:
  2128                           	callstack 0
  2129                           
  2130 ;; *************** function ___ftdiv *****************
  2131 ;; Defined at:
  2132 ;;		line 54 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftdiv.c"
  2133 ;; Parameters:    Size  Location     Type
  2134 ;;  f1              3   47[COMRAM] float 
  2135 ;;  f2              3   50[COMRAM] float 
  2136 ;; Auto vars:     Size  Location     Type
  2137 ;;  f3              3   57[COMRAM] float 
  2138 ;;  sign            1   61[COMRAM] unsigned char 
  2139 ;;  exp             1   60[COMRAM] unsigned char 
  2140 ;;  cntr            1   56[COMRAM] unsigned char 
  2141 ;; Return value:  Size  Location     Type
  2142 ;;                  3   47[COMRAM] float 
  2143 ;; Registers used:
  2144 ;;		wreg, status,2, status,0, cstack
  2145 ;; Tracked objects:
  2146 ;;		On entry : 0/0
  2147 ;;		On exit  : 0/0
  2148 ;;		Unchanged: 0/0
  2149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2150 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2151 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2152 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2153 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2154 ;;Total ram usage:       15 bytes
  2155 ;; Hardware stack levels used:    1
  2156 ;; Hardware stack levels required when called:    5
  2157 ;; This function calls:
  2158 ;;		___ftpack
  2159 ;; This function is called by:
  2160 ;;		_read_adc_voltage
  2161 ;; This function uses a non-reentrant model
  2162 ;;
  2163                           
  2164                           	psect	text5
  2165  001C20                     __ptext5:
  2166                           	callstack 0
  2167  001C20                     ___ftdiv:
  2168                           	callstack 24
  2169                           
  2170                           ;incstack = 0
  2171  001C20  C032  F036         	movff	___ftdiv@f1+2,??___ftdiv
  2172  001C24  6A37               	clrf	(??___ftdiv+1)^0,c
  2173  001C26  6A38               	clrf	(??___ftdiv+2)^0,c
  2174  001C28  3431               	rlcf	(___ftdiv@f1+1)^0,w,c
  2175  001C2A  3636               	rlcf	??___ftdiv^0,f,c
  2176  001C2C  E301               	bnc	u6811
  2177  001C2E  8037               	bsf	(??___ftdiv+1)^0,0,c
  2178  001C30                     u6811:
  2179  001C30  5036               	movf	??___ftdiv^0,w,c
  2180  001C32  6E3D               	movwf	___ftdiv@exp^0,c
  2181  001C34  503D               	movf	___ftdiv@exp^0,w,c
  2182  001C36  A4D8               	btfss	status,2,c
  2183  001C38  D007               	goto	l5625
  2184  001C3A  0E00               	movlw	0
  2185  001C3C  6E30               	movwf	?___ftdiv^0,c
  2186  001C3E  0E00               	movlw	0
  2187  001C40  6E31               	movwf	(?___ftdiv+1)^0,c
  2188  001C42  0E00               	movlw	0
  2189  001C44  6E32               	movwf	(?___ftdiv+2)^0,c
  2190  001C46  0012               	return	
  2191  001C48                     l5625:
  2192  001C48  C035  F036         	movff	___ftdiv@f2+2,??___ftdiv
  2193  001C4C  6A37               	clrf	(??___ftdiv+1)^0,c
  2194  001C4E  6A38               	clrf	(??___ftdiv+2)^0,c
  2195  001C50  3434               	rlcf	(___ftdiv@f2+1)^0,w,c
  2196  001C52  3636               	rlcf	??___ftdiv^0,f,c
  2197  001C54  E301               	bnc	u6831
  2198  001C56  8037               	bsf	(??___ftdiv+1)^0,0,c
  2199  001C58                     u6831:
  2200  001C58  5036               	movf	??___ftdiv^0,w,c
  2201  001C5A  6E3E               	movwf	___ftdiv@sign^0,c
  2202  001C5C  503E               	movf	___ftdiv@sign^0,w,c
  2203  001C5E  A4D8               	btfss	status,2,c
  2204  001C60  D007               	goto	l5631
  2205  001C62  0E00               	movlw	0
  2206  001C64  6E30               	movwf	?___ftdiv^0,c
  2207  001C66  0E00               	movlw	0
  2208  001C68  6E31               	movwf	(?___ftdiv+1)^0,c
  2209  001C6A  0E00               	movlw	0
  2210  001C6C  6E32               	movwf	(?___ftdiv+2)^0,c
  2211  001C6E  0012               	return	
  2212  001C70                     l5631:
  2213  001C70  0E00               	movlw	0
  2214  001C72  6E3A               	movwf	___ftdiv@f3^0,c
  2215  001C74  0E00               	movlw	0
  2216  001C76  6E3B               	movwf	(___ftdiv@f3+1)^0,c
  2217  001C78  0E00               	movlw	0
  2218  001C7A  6E3C               	movwf	(___ftdiv@f3+2)^0,c
  2219  001C7C  503E               	movf	___ftdiv@sign^0,w,c
  2220  001C7E  0F89               	addlw	137
  2221  001C80  5E3D               	subwf	___ftdiv@exp^0,f,c
  2222  001C82  C032  F03E         	movff	___ftdiv@f1+2,___ftdiv@sign
  2223  001C86  5035               	movf	(___ftdiv@f2+2)^0,w,c
  2224  001C88  1A3E               	xorwf	___ftdiv@sign^0,f,c
  2225  001C8A  0E80               	movlw	128
  2226  001C8C  163E               	andwf	___ftdiv@sign^0,f,c
  2227  001C8E  8E31               	bsf	(___ftdiv@f1+1)^0,7,c
  2228  001C90  0EFF               	movlw	255
  2229  001C92  1630               	andwf	___ftdiv@f1^0,f,c
  2230  001C94  0EFF               	movlw	255
  2231  001C96  1631               	andwf	(___ftdiv@f1+1)^0,f,c
  2232  001C98  0E00               	movlw	0
  2233  001C9A  1632               	andwf	(___ftdiv@f1+2)^0,f,c
  2234  001C9C  8E34               	bsf	(___ftdiv@f2+1)^0,7,c
  2235  001C9E  0EFF               	movlw	255
  2236  001CA0  1633               	andwf	___ftdiv@f2^0,f,c
  2237  001CA2  0EFF               	movlw	255
  2238  001CA4  1634               	andwf	(___ftdiv@f2+1)^0,f,c
  2239  001CA6  0E00               	movlw	0
  2240  001CA8  1635               	andwf	(___ftdiv@f2+2)^0,f,c
  2241  001CAA  0E18               	movlw	24
  2242  001CAC  6E39               	movwf	___ftdiv@cntr^0,c
  2243  001CAE                     l5651:
  2244  001CAE  90D8               	bcf	status,0,c
  2245  001CB0  363A               	rlcf	___ftdiv@f3^0,f,c
  2246  001CB2  363B               	rlcf	(___ftdiv@f3+1)^0,f,c
  2247  001CB4  363C               	rlcf	(___ftdiv@f3+2)^0,f,c
  2248  001CB6  5033               	movf	___ftdiv@f2^0,w,c
  2249  001CB8  5C30               	subwf	___ftdiv@f1^0,w,c
  2250  001CBA  5034               	movf	(___ftdiv@f2+1)^0,w,c
  2251  001CBC  5831               	subwfb	(___ftdiv@f1+1)^0,w,c
  2252  001CBE  5035               	movf	(___ftdiv@f2+2)^0,w,c
  2253  001CC0  5832               	subwfb	(___ftdiv@f1+2)^0,w,c
  2254  001CC2  A0D8               	btfss	status,0,c
  2255  001CC4  D007               	goto	l909
  2256  001CC6  5033               	movf	___ftdiv@f2^0,w,c
  2257  001CC8  5E30               	subwf	___ftdiv@f1^0,f,c
  2258  001CCA  5034               	movf	(___ftdiv@f2+1)^0,w,c
  2259  001CCC  5A31               	subwfb	(___ftdiv@f1+1)^0,f,c
  2260  001CCE  5035               	movf	(___ftdiv@f2+2)^0,w,c
  2261  001CD0  5A32               	subwfb	(___ftdiv@f1+2)^0,f,c
  2262  001CD2  803A               	bsf	___ftdiv@f3^0,0,c
  2263  001CD4                     l909:
  2264  001CD4  90D8               	bcf	status,0,c
  2265  001CD6  3630               	rlcf	___ftdiv@f1^0,f,c
  2266  001CD8  3631               	rlcf	(___ftdiv@f1+1)^0,f,c
  2267  001CDA  3632               	rlcf	(___ftdiv@f1+2)^0,f,c
  2268  001CDC  2E39               	decfsz	___ftdiv@cntr^0,f,c
  2269  001CDE  D7E7               	goto	l5651
  2270  001CE0  C03A  F024         	movff	___ftdiv@f3,___ftpack@arg
  2271  001CE4  C03B  F025         	movff	___ftdiv@f3+1,___ftpack@arg+1
  2272  001CE8  C03C  F026         	movff	___ftdiv@f3+2,___ftpack@arg+2
  2273  001CEC  C03D  F027         	movff	___ftdiv@exp,___ftpack@exp
  2274  001CF0  C03E  F028         	movff	___ftdiv@sign,___ftpack@sign
  2275  001CF4  EC4D  F00F         	call	___ftpack	;wreg free
  2276  001CF8  C024  F030         	movff	?___ftpack,?___ftdiv
  2277  001CFC  C025  F031         	movff	?___ftpack+1,?___ftdiv+1
  2278  001D00  C026  F032         	movff	?___ftpack+2,?___ftdiv+2
  2279  001D04  0012               	return		;funcret
  2280  001D06                     __end_of___ftdiv:
  2281                           	callstack 0
  2282                           
  2283 ;; *************** function ___awtoft *****************
  2284 ;; Defined at:
  2285 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awtoft.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;  c               2   43[COMRAM] int 
  2288 ;; Auto vars:     Size  Location     Type
  2289 ;;  sign            1   46[COMRAM] unsigned char 
  2290 ;; Return value:  Size  Location     Type
  2291 ;;                  3   43[COMRAM] float 
  2292 ;; Registers used:
  2293 ;;		wreg, status,2, status,0, cstack
  2294 ;; Tracked objects:
  2295 ;;		On entry : 0/0
  2296 ;;		On exit  : 0/0
  2297 ;;		Unchanged: 0/0
  2298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2299 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2300 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2302 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2303 ;;Total ram usage:        4 bytes
  2304 ;; Hardware stack levels used:    1
  2305 ;; Hardware stack levels required when called:    5
  2306 ;; This function calls:
  2307 ;;		___ftpack
  2308 ;; This function is called by:
  2309 ;;		_read_adc_voltage
  2310 ;;		_main
  2311 ;; This function uses a non-reentrant model
  2312 ;;
  2313                           
  2314                           	psect	text6
  2315  002988                     __ptext6:
  2316                           	callstack 0
  2317  002988                     ___awtoft:
  2318                           	callstack 24
  2319                           
  2320                           ;incstack = 0
  2321  002988  0E00               	movlw	0
  2322  00298A  6E2F               	movwf	___awtoft@sign^0,c
  2323  00298C  AE2D               	btfss	(___awtoft@c+1)^0,7,c
  2324  00298E  D006               	goto	l5673
  2325  002990  6C2C               	negf	___awtoft@c^0,c
  2326  002992  1E2D               	comf	(___awtoft@c+1)^0,f,c
  2327  002994  B0D8               	btfsc	status,0,c
  2328  002996  2A2D               	incf	(___awtoft@c+1)^0,f,c
  2329  002998  0E01               	movlw	1
  2330  00299A  6E2F               	movwf	___awtoft@sign^0,c
  2331  00299C                     l5673:
  2332  00299C  C02C  F024         	movff	___awtoft@c,___ftpack@arg
  2333  0029A0  C02D  F025         	movff	___awtoft@c+1,___ftpack@arg+1
  2334  0029A4  6A26               	clrf	(___ftpack@arg+2)^0,c
  2335  0029A6  0E8E               	movlw	142
  2336  0029A8  6E27               	movwf	___ftpack@exp^0,c
  2337  0029AA  C02F  F028         	movff	___awtoft@sign,___ftpack@sign
  2338  0029AE  EC4D  F00F         	call	___ftpack	;wreg free
  2339  0029B2  C024  F02C         	movff	?___ftpack,?___awtoft
  2340  0029B6  C025  F02D         	movff	?___ftpack+1,?___awtoft+1
  2341  0029BA  C026  F02E         	movff	?___ftpack+2,?___awtoft+2
  2342  0029BE  0012               	return		;funcret
  2343  0029C0                     __end_of___awtoft:
  2344                           	callstack 0
  2345                           
  2346 ;; *************** function _lcd_init *****************
  2347 ;; Defined at:
  2348 ;;		line 56 in file "lcd_x8.c"
  2349 ;; Parameters:    Size  Location     Type
  2350 ;;		None
  2351 ;; Auto vars:     Size  Location     Type
  2352 ;;  i               1   45[COMRAM] unsigned char 
  2353 ;; Return value:  Size  Location     Type
  2354 ;;                  1    wreg      void 
  2355 ;; Registers used:
  2356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2357 ;; Tracked objects:
  2358 ;;		On entry : 3F/0
  2359 ;;		On exit  : 0/0
  2360 ;;		Unchanged: 0/0
  2361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2363 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2365 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2366 ;;Total ram usage:        1 bytes
  2367 ;; Hardware stack levels used:    1
  2368 ;; Hardware stack levels required when called:    7
  2369 ;; This function calls:
  2370 ;;		_delay_ms
  2371 ;;		_lcd_send_byte
  2372 ;;		_lcd_send_nibble
  2373 ;; This function is called by:
  2374 ;;		_main
  2375 ;; This function uses a non-reentrant model
  2376 ;;
  2377                           
  2378                           	psect	text7
  2379  002712                     __ptext7:
  2380                           	callstack 0
  2381  002712                     _lcd_init:
  2382                           	callstack 23
  2383                           
  2384                           ; BSR set to: 0
  2385                           ;lcd_x8.c: 58: unsigned char i;;lcd_x8.c: 61: PORTEbits.RE2 = 0;
  2386                           
  2387                           ;incstack = 0
  2388  002712  9484               	bcf	132,2,c	;volatile
  2389                           
  2390                           ;lcd_x8.c: 63: PORTEbits.RE1 = 0;
  2391  002714  9284               	bcf	132,1,c	;volatile
  2392                           
  2393                           ; BSR set to: 0
  2394                           ;lcd_x8.c: 65: delay_ms(25);
  2395  002716  0E00               	movlw	0
  2396  002718  6E25               	movwf	(delay_ms@n+1)^0,c
  2397  00271A  0E19               	movlw	25
  2398  00271C  6E24               	movwf	delay_ms@n^0,c
  2399  00271E  EC1F  F015         	call	_delay_ms	;wreg free
  2400                           
  2401                           ;lcd_x8.c: 66: for (i = 1; i <= 3; ++i) {
  2402  002722  0E01               	movlw	1
  2403  002724  6E2E               	movwf	lcd_init@i^0,c
  2404  002726                     l4325:
  2405                           
  2406                           ;lcd_x8.c: 67: lcd_send_nibble(3);
  2407  002726  0E03               	movlw	3
  2408  002728  EC68  F015         	call	_lcd_send_nibble
  2409  00272C  2A2E               	incf	lcd_init@i^0,f,c
  2410  00272E  0E03               	movlw	3
  2411  002730  642E               	cpfsgt	lcd_init@i^0,c
  2412  002732  D7F9               	goto	l4325
  2413                           
  2414                           ;lcd_x8.c: 70: };lcd_x8.c: 72: lcd_send_nibble(2);
  2415  002734  0E02               	movlw	2
  2416  002736  EC68  F015         	call	_lcd_send_nibble
  2417                           
  2418                           ;lcd_x8.c: 74: for (i = 0; i <= 3; ++i)
  2419  00273A  0E00               	movlw	0
  2420  00273C  6E2E               	movwf	lcd_init@i^0,c
  2421  00273E                     l4339:
  2422                           
  2423                           ;lcd_x8.c: 75: lcd_send_byte(0, LCD_INIT_STRING[i]);
  2424  00273E  502E               	movf	lcd_init@i^0,w,c
  2425  002740  0F51               	addlw	low _LCD_INIT_STRING
  2426  002742  6ED9               	movwf	fsr2l,c
  2427  002744  6ADA               	clrf	fsr2h,c
  2428  002746  50DF               	movf	indf2,w,c
  2429  002748  6E2C               	movwf	lcd_send_byte@n^0,c
  2430  00274A  0E00               	movlw	0
  2431  00274C  EC8A  F014         	call	_lcd_send_byte
  2432  002750  2A2E               	incf	lcd_init@i^0,f,c
  2433  002752  0E03               	movlw	3
  2434  002754  642E               	cpfsgt	lcd_init@i^0,c
  2435  002756  D7F3               	goto	l4339
  2436  002758  0012               	return	
  2437  00275A                     __end_of_lcd_init:
  2438                           	callstack 0
  2439                           
  2440 ;; *************** function _init_adc_no_lib *****************
  2441 ;; Defined at:
  2442 ;;		line 10 in file "my_adc.c"
  2443 ;; Parameters:    Size  Location     Type
  2444 ;;		None
  2445 ;; Auto vars:     Size  Location     Type
  2446 ;;		None
  2447 ;; Return value:  Size  Location     Type
  2448 ;;                  1    wreg      void 
  2449 ;; Registers used:
  2450 ;;		wreg, status,2
  2451 ;; Tracked objects:
  2452 ;;		On entry : 3F/0
  2453 ;;		On exit  : 3F/0
  2454 ;;		Unchanged: 3F/0
  2455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2460 ;;Total ram usage:        0 bytes
  2461 ;; Hardware stack levels used:    1
  2462 ;; Hardware stack levels required when called:    4
  2463 ;; This function calls:
  2464 ;;		Nothing
  2465 ;; This function is called by:
  2466 ;;		_main
  2467 ;; This function uses a non-reentrant model
  2468 ;;
  2469                           
  2470                           	psect	text8
  2471  002B48                     __ptext8:
  2472                           	callstack 0
  2473  002B48                     _init_adc_no_lib:
  2474                           	callstack 26
  2475                           
  2476                           ; BSR set to: 0
  2477                           ;my_adc.c: 12: ADCON0 = 0;
  2478                           
  2479                           ;incstack = 0
  2480  002B48  0E00               	movlw	0
  2481  002B4A  6EC2               	movwf	194,c	;volatile
  2482                           
  2483                           ; BSR set to: 0
  2484                           ;my_adc.c: 13: ADCON0bits.ADON = 1;
  2485  002B4C  80C2               	bsf	194,0,c	;volatile
  2486                           
  2487                           ;my_adc.c: 15: ADCON2 = 0b10001001;
  2488  002B4E  0E89               	movlw	137
  2489  002B50  6EC0               	movwf	192,c	;volatile
  2490                           
  2491                           ; BSR set to: 0
  2492  002B52  0012               	return		;funcret
  2493  002B54                     __end_of_init_adc_no_lib:
  2494                           	callstack 0
  2495                           
  2496 ;; *************** function _incrementMinClock *****************
  2497 ;; Defined at:
  2498 ;;		line 246 in file "HW2.c"
  2499 ;; Parameters:    Size  Location     Type
  2500 ;;		None
  2501 ;; Auto vars:     Size  Location     Type
  2502 ;;		None
  2503 ;; Return value:  Size  Location     Type
  2504 ;;                  1    wreg      void 
  2505 ;; Registers used:
  2506 ;;		wreg, status,2, status,0
  2507 ;; Tracked objects:
  2508 ;;		On entry : 3F/1
  2509 ;;		On exit  : 3F/1
  2510 ;;		Unchanged: 0/0
  2511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2516 ;;Total ram usage:        0 bytes
  2517 ;; Hardware stack levels used:    1
  2518 ;; Hardware stack levels required when called:    4
  2519 ;; This function calls:
  2520 ;;		Nothing
  2521 ;; This function is called by:
  2522 ;;		_main
  2523 ;; This function uses a non-reentrant model
  2524 ;;
  2525                           
  2526                           	psect	text9
  2527  00275A                     __ptext9:
  2528                           	callstack 0
  2529  00275A                     _incrementMinClock:
  2530                           	callstack 26
  2531                           
  2532                           ; BSR set to: 1
  2533                           ;HW2.c: 247: minutes+=1;
  2534                           
  2535                           ; BSR set to: 0
  2536                           ;incstack = 0
  2537  00275A  4BE0               	infsnz	_minutes& (0+255),f,b
  2538  00275C  2BE1               	incf	(_minutes+1)& (0+255),f,b
  2539                           
  2540                           ; BSR set to: 1
  2541                           ;HW2.c: 248: if (minutes>=59){
  2542  00275E  BFE1               	btfsc	(_minutes+1)& (0+255),7,b
  2543  002760  0012               	return	
  2544  002762  51E1               	movf	(_minutes+1)& (0+255),w,b
  2545  002764  E104               	bnz	u4960
  2546  002766  0E3B               	movlw	59
  2547  002768  5DE0               	subwf	_minutes& (0+255),w,b
  2548  00276A  A0D8               	btfss	status,0,c
  2549  00276C  0012               	return	
  2550  00276E                     u4960:
  2551                           
  2552                           ; BSR set to: 1
  2553                           ;HW2.c: 249: minutes=0;
  2554  00276E  0E00               	movlw	0
  2555  002770  6FE1               	movwf	(_minutes+1)& (0+255),b
  2556  002772  0E00               	movlw	0
  2557  002774  6FE0               	movwf	_minutes& (0+255),b
  2558                           
  2559                           ; BSR set to: 1
  2560                           ;HW2.c: 250: hours+=1;
  2561  002776  4BE4               	infsnz	_hours& (0+255),f,b
  2562  002778  2BE5               	incf	(_hours+1)& (0+255),f,b
  2563                           
  2564                           ; BSR set to: 1
  2565                           ;HW2.c: 251: if (hours>9){
  2566  00277A  51E5               	movf	(_hours+1)& (0+255),w,b
  2567  00277C  E104               	bnz	u4970
  2568  00277E  0E0A               	movlw	10
  2569  002780  5DE4               	subwf	_hours& (0+255),w,b
  2570  002782  A0D8               	btfss	status,0,c
  2571  002784  0012               	return	
  2572  002786                     u4970:
  2573                           
  2574                           ; BSR set to: 1
  2575                           ;HW2.c: 252: seconds=0;
  2576  002786  0E00               	movlw	0
  2577  002788  6FE7               	movwf	(_seconds+1)& (0+255),b
  2578  00278A  0E00               	movlw	0
  2579  00278C  6FE6               	movwf	_seconds& (0+255),b
  2580                           
  2581                           ;HW2.c: 254: minutes=0;
  2582  00278E  0E00               	movlw	0
  2583  002790  6FE1               	movwf	(_minutes+1)& (0+255),b
  2584  002792  0E00               	movlw	0
  2585  002794  6FE0               	movwf	_minutes& (0+255),b
  2586                           
  2587                           ;HW2.c: 256: hours =0 ;
  2588  002796  0E00               	movlw	0
  2589  002798  6FE5               	movwf	(_hours+1)& (0+255),b
  2590  00279A  0E00               	movlw	0
  2591  00279C  6FE4               	movwf	_hours& (0+255),b
  2592                           
  2593                           ; BSR set to: 1
  2594  00279E  0012               	return		;funcret
  2595  0027A0                     __end_of_incrementMinClock:
  2596                           	callstack 0
  2597                           
  2598 ;; *************** function _incrementHourClock *****************
  2599 ;; Defined at:
  2600 ;;		line 312 in file "HW2.c"
  2601 ;; Parameters:    Size  Location     Type
  2602 ;;		None
  2603 ;; Auto vars:     Size  Location     Type
  2604 ;;		None
  2605 ;; Return value:  Size  Location     Type
  2606 ;;                  1    wreg      void 
  2607 ;; Registers used:
  2608 ;;		wreg, status,2, status,0
  2609 ;; Tracked objects:
  2610 ;;		On entry : 3F/1
  2611 ;;		On exit  : 3F/1
  2612 ;;		Unchanged: 0/0
  2613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2618 ;;Total ram usage:        0 bytes
  2619 ;; Hardware stack levels used:    1
  2620 ;; Hardware stack levels required when called:    4
  2621 ;; This function calls:
  2622 ;;		Nothing
  2623 ;; This function is called by:
  2624 ;;		_main
  2625 ;; This function uses a non-reentrant model
  2626 ;;
  2627                           
  2628                           	psect	text10
  2629  002B2E                     __ptext10:
  2630                           	callstack 0
  2631  002B2E                     _incrementHourClock:
  2632                           	callstack 26
  2633                           
  2634                           ; BSR set to: 1
  2635                           ;HW2.c: 313: hours+=1;
  2636                           
  2637                           ; BSR set to: 1
  2638                           ;incstack = 0
  2639  002B2E  4BE4               	infsnz	_hours& (0+255),f,b
  2640  002B30  2BE5               	incf	(_hours+1)& (0+255),f,b
  2641                           
  2642                           ; BSR set to: 1
  2643                           ;HW2.c: 314: if (hours>9){
  2644  002B32  51E5               	movf	(_hours+1)& (0+255),w,b
  2645  002B34  E104               	bnz	u5040
  2646  002B36  0E0A               	movlw	10
  2647  002B38  5DE4               	subwf	_hours& (0+255),w,b
  2648  002B3A  A0D8               	btfss	status,0,c
  2649  002B3C  0012               	return	
  2650  002B3E                     u5040:
  2651                           
  2652                           ; BSR set to: 1
  2653                           ;HW2.c: 315: hours=0 ;
  2654  002B3E  0E00               	movlw	0
  2655  002B40  6FE5               	movwf	(_hours+1)& (0+255),b
  2656  002B42  0E00               	movlw	0
  2657  002B44  6FE4               	movwf	_hours& (0+255),b
  2658                           
  2659                           ; BSR set to: 1
  2660  002B46  0012               	return		;funcret
  2661  002B48                     __end_of_incrementHourClock:
  2662                           	callstack 0
  2663                           
  2664 ;; *************** function _incrementClock *****************
  2665 ;; Defined at:
  2666 ;;		line 190 in file "HW2.c"
  2667 ;; Parameters:    Size  Location     Type
  2668 ;;		None
  2669 ;; Auto vars:     Size  Location     Type
  2670 ;;		None
  2671 ;; Return value:  Size  Location     Type
  2672 ;;                  1    wreg      void 
  2673 ;; Registers used:
  2674 ;;		wreg, status,2, status,0
  2675 ;; Tracked objects:
  2676 ;;		On entry : 3F/1
  2677 ;;		On exit  : 3F/1
  2678 ;;		Unchanged: 0/0
  2679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2683 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2684 ;;Total ram usage:        0 bytes
  2685 ;; Hardware stack levels used:    1
  2686 ;; Hardware stack levels required when called:    4
  2687 ;; This function calls:
  2688 ;;		Nothing
  2689 ;; This function is called by:
  2690 ;;		_main
  2691 ;; This function uses a non-reentrant model
  2692 ;;
  2693                           
  2694                           	psect	text11
  2695  0024DA                     __ptext11:
  2696                           	callstack 0
  2697  0024DA                     _incrementClock:
  2698                           	callstack 26
  2699                           
  2700                           ; BSR set to: 1
  2701                           ;HW2.c: 192: seconds+=1;
  2702                           
  2703                           ; BSR set to: 1
  2704                           ;incstack = 0
  2705  0024DA  4BE6               	infsnz	_seconds& (0+255),f,b
  2706  0024DC  2BE7               	incf	(_seconds+1)& (0+255),f,b
  2707                           
  2708                           ; BSR set to: 1
  2709                           ;HW2.c: 193: if (seconds>=59){seconds=seconds-59;
  2710  0024DE  BFE7               	btfsc	(_seconds+1)& (0+255),7,b
  2711  0024E0  0012               	return	
  2712  0024E2  51E7               	movf	(_seconds+1)& (0+255),w,b
  2713  0024E4  E104               	bnz	u4840
  2714  0024E6  0E3B               	movlw	59
  2715  0024E8  5DE6               	subwf	_seconds& (0+255),w,b
  2716  0024EA  A0D8               	btfss	status,0,c
  2717  0024EC  0012               	return	
  2718  0024EE                     u4840:
  2719                           
  2720                           ; BSR set to: 1
  2721  0024EE  0EC5               	movlw	197
  2722  0024F0  25E6               	addwf	_seconds& (0+255),w,b
  2723  0024F2  6FE6               	movwf	_seconds& (0+255),b
  2724  0024F4  0EFF               	movlw	255
  2725  0024F6  21E7               	addwfc	(_seconds+1)& (0+255),w,b
  2726  0024F8  6FE7               	movwf	(_seconds+1)& (0+255),b
  2727                           
  2728                           ; BSR set to: 1
  2729                           ;HW2.c: 194: minutes+=1;
  2730  0024FA  4BE0               	infsnz	_minutes& (0+255),f,b
  2731  0024FC  2BE1               	incf	(_minutes+1)& (0+255),f,b
  2732                           
  2733                           ; BSR set to: 1
  2734                           ;HW2.c: 195: if (minutes>=59){minutes=minutes-60;
  2735  0024FE  BFE1               	btfsc	(_minutes+1)& (0+255),7,b
  2736  002500  0012               	return	
  2737  002502  51E1               	movf	(_minutes+1)& (0+255),w,b
  2738  002504  E104               	bnz	u4850
  2739  002506  0E3B               	movlw	59
  2740  002508  5DE0               	subwf	_minutes& (0+255),w,b
  2741  00250A  A0D8               	btfss	status,0,c
  2742  00250C  0012               	return	
  2743  00250E                     u4850:
  2744                           
  2745                           ; BSR set to: 1
  2746  00250E  0EC4               	movlw	196
  2747  002510  25E0               	addwf	_minutes& (0+255),w,b
  2748  002512  6FE0               	movwf	_minutes& (0+255),b
  2749  002514  0EFF               	movlw	255
  2750  002516  21E1               	addwfc	(_minutes+1)& (0+255),w,b
  2751  002518  6FE1               	movwf	(_minutes+1)& (0+255),b
  2752                           
  2753                           ; BSR set to: 1
  2754                           ;HW2.c: 196: hours+=1;
  2755  00251A  4BE4               	infsnz	_hours& (0+255),f,b
  2756  00251C  2BE5               	incf	(_hours+1)& (0+255),f,b
  2757                           
  2758                           ; BSR set to: 1
  2759                           ;HW2.c: 197: if (hours>=9){hours=0;
  2760  00251E  51E5               	movf	(_hours+1)& (0+255),w,b
  2761  002520  E104               	bnz	u4860
  2762  002522  0E09               	movlw	9
  2763  002524  5DE4               	subwf	_hours& (0+255),w,b
  2764  002526  A0D8               	btfss	status,0,c
  2765  002528  0012               	return	
  2766  00252A                     u4860:
  2767                           
  2768                           ; BSR set to: 1
  2769  00252A  0E00               	movlw	0
  2770  00252C  6FE5               	movwf	(_hours+1)& (0+255),b
  2771  00252E  0E00               	movlw	0
  2772  002530  6FE4               	movwf	_hours& (0+255),b
  2773                           
  2774                           ; BSR set to: 1
  2775  002532  0012               	return		;funcret
  2776  002534                     __end_of_incrementClock:
  2777                           	callstack 0
  2778                           
  2779 ;; *************** function _increment10SClock *****************
  2780 ;; Defined at:
  2781 ;;		line 214 in file "HW2.c"
  2782 ;; Parameters:    Size  Location     Type
  2783 ;;		None
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;		None
  2786 ;; Return value:  Size  Location     Type
  2787 ;;                  1    wreg      void 
  2788 ;; Registers used:
  2789 ;;		wreg, status,2, status,0
  2790 ;; Tracked objects:
  2791 ;;		On entry : 3F/1
  2792 ;;		On exit  : 3F/1
  2793 ;;		Unchanged: 0/0
  2794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2799 ;;Total ram usage:        0 bytes
  2800 ;; Hardware stack levels used:    1
  2801 ;; Hardware stack levels required when called:    4
  2802 ;; This function calls:
  2803 ;;		Nothing
  2804 ;; This function is called by:
  2805 ;;		_main
  2806 ;; This function uses a non-reentrant model
  2807 ;;
  2808                           
  2809                           	psect	text12
  2810  002420                     __ptext12:
  2811                           	callstack 0
  2812  002420                     _increment10SClock:
  2813                           	callstack 26
  2814                           
  2815                           ; BSR set to: 1
  2816                           ;HW2.c: 215: seconds+=10;
  2817                           
  2818                           ; BSR set to: 1
  2819                           ;incstack = 0
  2820  002420  0E0A               	movlw	10
  2821  002422  27E6               	addwf	_seconds& (0+255),f,b
  2822  002424  0E00               	movlw	0
  2823  002426  23E7               	addwfc	(_seconds+1)& (0+255),f,b
  2824                           
  2825                           ;HW2.c: 216: if (seconds>=59){seconds=seconds-60;
  2826  002428  BFE7               	btfsc	(_seconds+1)& (0+255),7,b
  2827  00242A  0012               	return	
  2828  00242C  51E7               	movf	(_seconds+1)& (0+255),w,b
  2829  00242E  E104               	bnz	u4900
  2830  002430  0E3B               	movlw	59
  2831  002432  5DE6               	subwf	_seconds& (0+255),w,b
  2832  002434  A0D8               	btfss	status,0,c
  2833  002436  0012               	return	
  2834  002438                     u4900:
  2835                           
  2836                           ; BSR set to: 1
  2837  002438  0EC4               	movlw	196
  2838  00243A  25E6               	addwf	_seconds& (0+255),w,b
  2839  00243C  6FE6               	movwf	_seconds& (0+255),b
  2840  00243E  0EFF               	movlw	255
  2841  002440  21E7               	addwfc	(_seconds+1)& (0+255),w,b
  2842  002442  6FE7               	movwf	(_seconds+1)& (0+255),b
  2843                           
  2844                           ; BSR set to: 1
  2845                           ;HW2.c: 217: minutes+=1;
  2846  002444  4BE0               	infsnz	_minutes& (0+255),f,b
  2847  002446  2BE1               	incf	(_minutes+1)& (0+255),f,b
  2848                           
  2849                           ; BSR set to: 1
  2850                           ;HW2.c: 218: if (minutes>=59){minutes=minutes-60;
  2851  002448  BFE1               	btfsc	(_minutes+1)& (0+255),7,b
  2852  00244A  0012               	return	
  2853  00244C  51E1               	movf	(_minutes+1)& (0+255),w,b
  2854  00244E  E104               	bnz	u4910
  2855  002450  0E3B               	movlw	59
  2856  002452  5DE0               	subwf	_minutes& (0+255),w,b
  2857  002454  A0D8               	btfss	status,0,c
  2858  002456  0012               	return	
  2859  002458                     u4910:
  2860                           
  2861                           ; BSR set to: 1
  2862  002458  0EC4               	movlw	196
  2863  00245A  25E0               	addwf	_minutes& (0+255),w,b
  2864  00245C  6FE0               	movwf	_minutes& (0+255),b
  2865  00245E  0EFF               	movlw	255
  2866  002460  21E1               	addwfc	(_minutes+1)& (0+255),w,b
  2867  002462  6FE1               	movwf	(_minutes+1)& (0+255),b
  2868                           
  2869                           ; BSR set to: 1
  2870                           ;HW2.c: 219: hours+=1;
  2871  002464  4BE4               	infsnz	_hours& (0+255),f,b
  2872  002466  2BE5               	incf	(_hours+1)& (0+255),f,b
  2873                           
  2874                           ; BSR set to: 1
  2875                           ;HW2.c: 220: if (hours>=9){hours=0;
  2876  002468  51E5               	movf	(_hours+1)& (0+255),w,b
  2877  00246A  E104               	bnz	u4920
  2878  00246C  0E09               	movlw	9
  2879  00246E  5DE4               	subwf	_hours& (0+255),w,b
  2880  002470  A0D8               	btfss	status,0,c
  2881  002472  0012               	return	
  2882  002474                     u4920:
  2883                           
  2884                           ; BSR set to: 1
  2885  002474  0E00               	movlw	0
  2886  002476  6FE5               	movwf	(_hours+1)& (0+255),b
  2887  002478  0E00               	movlw	0
  2888  00247A  6FE4               	movwf	_hours& (0+255),b
  2889                           
  2890                           ; BSR set to: 1
  2891  00247C  0012               	return		;funcret
  2892  00247E                     __end_of_increment10SClock:
  2893                           	callstack 0
  2894                           
  2895 ;; *************** function _increment10MinClock *****************
  2896 ;; Defined at:
  2897 ;;		line 279 in file "HW2.c"
  2898 ;; Parameters:    Size  Location     Type
  2899 ;;		None
  2900 ;; Auto vars:     Size  Location     Type
  2901 ;;		None
  2902 ;; Return value:  Size  Location     Type
  2903 ;;                  1    wreg      void 
  2904 ;; Registers used:
  2905 ;;		wreg, status,2, status,0
  2906 ;; Tracked objects:
  2907 ;;		On entry : 3F/1
  2908 ;;		On exit  : 3F/1
  2909 ;;		Unchanged: 0/0
  2910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2915 ;;Total ram usage:        0 bytes
  2916 ;; Hardware stack levels used:    1
  2917 ;; Hardware stack levels required when called:    4
  2918 ;; This function calls:
  2919 ;;		Nothing
  2920 ;; This function is called by:
  2921 ;;		_main
  2922 ;; This function uses a non-reentrant model
  2923 ;;
  2924                           
  2925                           	psect	text13
  2926  0025E4                     __ptext13:
  2927                           	callstack 0
  2928  0025E4                     _increment10MinClock:
  2929                           	callstack 26
  2930                           
  2931                           ; BSR set to: 1
  2932                           ;HW2.c: 280: minutes+=10;
  2933                           
  2934                           ; BSR set to: 1
  2935                           ;incstack = 0
  2936  0025E4  0E0A               	movlw	10
  2937  0025E6  27E0               	addwf	_minutes& (0+255),f,b
  2938  0025E8  0E00               	movlw	0
  2939  0025EA  23E1               	addwfc	(_minutes+1)& (0+255),f,b
  2940                           
  2941                           ;HW2.c: 281: if (minutes>=59){
  2942  0025EC  BFE1               	btfsc	(_minutes+1)& (0+255),7,b
  2943  0025EE  0012               	return	
  2944  0025F0  51E1               	movf	(_minutes+1)& (0+255),w,b
  2945  0025F2  E104               	bnz	u5000
  2946  0025F4  0E3B               	movlw	59
  2947  0025F6  5DE0               	subwf	_minutes& (0+255),w,b
  2948  0025F8  A0D8               	btfss	status,0,c
  2949  0025FA  0012               	return	
  2950  0025FC                     u5000:
  2951                           
  2952                           ; BSR set to: 1
  2953                           ;HW2.c: 282: minutes=minutes-60;
  2954  0025FC  0EC4               	movlw	196
  2955  0025FE  25E0               	addwf	_minutes& (0+255),w,b
  2956  002600  6FE0               	movwf	_minutes& (0+255),b
  2957  002602  0EFF               	movlw	255
  2958  002604  21E1               	addwfc	(_minutes+1)& (0+255),w,b
  2959  002606  6FE1               	movwf	(_minutes+1)& (0+255),b
  2960                           
  2961                           ; BSR set to: 1
  2962                           ;HW2.c: 283: hours+=1;
  2963  002608  4BE4               	infsnz	_hours& (0+255),f,b
  2964  00260A  2BE5               	incf	(_hours+1)& (0+255),f,b
  2965                           
  2966                           ; BSR set to: 1
  2967                           ;HW2.c: 284: if (hours>9){
  2968  00260C  51E5               	movf	(_hours+1)& (0+255),w,b
  2969  00260E  E104               	bnz	u5010
  2970  002610  0E0A               	movlw	10
  2971  002612  5DE4               	subwf	_hours& (0+255),w,b
  2972  002614  A0D8               	btfss	status,0,c
  2973  002616  0012               	return	
  2974  002618                     u5010:
  2975                           
  2976                           ; BSR set to: 1
  2977                           ;HW2.c: 285: seconds=0;
  2978  002618  0E00               	movlw	0
  2979  00261A  6FE7               	movwf	(_seconds+1)& (0+255),b
  2980  00261C  0E00               	movlw	0
  2981  00261E  6FE6               	movwf	_seconds& (0+255),b
  2982                           
  2983                           ;HW2.c: 287: minutes=0;
  2984  002620  0E00               	movlw	0
  2985  002622  6FE1               	movwf	(_minutes+1)& (0+255),b
  2986  002624  0E00               	movlw	0
  2987  002626  6FE0               	movwf	_minutes& (0+255),b
  2988                           
  2989                           ;HW2.c: 289: hours =0 ;
  2990  002628  0E00               	movlw	0
  2991  00262A  6FE5               	movwf	(_hours+1)& (0+255),b
  2992  00262C  0E00               	movlw	0
  2993  00262E  6FE4               	movwf	_hours& (0+255),b
  2994                           
  2995                           ; BSR set to: 1
  2996  002630  0012               	return		;funcret
  2997  002632                     __end_of_increment10MinClock:
  2998                           	callstack 0
  2999                           
  3000 ;; *************** function _display *****************
  3001 ;; Defined at:
  3002 ;;		line 355 in file "HW2.c"
  3003 ;; Parameters:    Size  Location     Type
  3004 ;;		None
  3005 ;; Auto vars:     Size  Location     Type
  3006 ;;  LCDP           64   64[BANK1 ] unsigned char [64]
  3007 ;;  LCD            64    0[BANK1 ] unsigned char [64]
  3008 ;;  Buffer2        32  192[BANK1 ] unsigned char [32]
  3009 ;;  Buffer1        32  160[BANK1 ] unsigned char [32]
  3010 ;;  Buffer         32  128[BANK1 ] unsigned char [32]
  3011 ;;  H               1    0        unsigned char 
  3012 ;;  C               1    0        unsigned char 
  3013 ;; Return value:  Size  Location     Type
  3014 ;;                  1    wreg      void 
  3015 ;; Registers used:
  3016 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3017 ;; Tracked objects:
  3018 ;;		On entry : 3E/0
  3019 ;;		On exit  : 0/0
  3020 ;;		Unchanged: 0/0
  3021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3023 ;;      Locals:         0       0     225       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3024 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3025 ;;      Totals:         0       2     225       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3026 ;;Total ram usage:      227 bytes
  3027 ;; Hardware stack levels used:    1
  3028 ;; Hardware stack levels required when called:   10
  3029 ;; This function calls:
  3030 ;;		_lcd_gotoxy
  3031 ;;		_lcd_puts
  3032 ;;		_sprintf
  3033 ;; This function is called by:
  3034 ;;		_main
  3035 ;; This function uses a non-reentrant model
  3036 ;;
  3037                           
  3038                           	psect	text14
  3039  00119E                     __ptext14:
  3040                           	callstack 0
  3041  00119E                     _display:
  3042                           	callstack 20
  3043                           
  3044                           ;HW2.c: 356: char LCD[64];;HW2.c: 357: char LCDP[64];;HW2.c: 358: char Buffer1[32];;HW2.
      +                          c: 359: char Buffer2[32];;HW2.c: 360: char Buffer[32];;HW2.c: 362: unsigned char C, H;;H
      +                          W2.c: 363: if(mode==4){
  3045                           
  3046                           ; BSR set to: 1
  3047                           ;incstack = 0
  3048  00119E  0E04               	movlw	4
  3049  0011A0  0101               	movlb	1	; () banked
  3050  0011A2  19E2               	xorwf	_mode& (0+255),w,b
  3051  0011A4  11E3               	iorwf	(_mode+1)& (0+255),w,b
  3052  0011A6  B4D8               	btfsc	status,2,c
  3053  0011A8  D021               	goto	l5693
  3054                           
  3055                           ; BSR set to: 1
  3056                           ;HW2.c: 368: else if(PORTCbits.RC5 == 1){
  3057                           
  3058                           ; BSR set to: 1
  3059                           ;HW2.c: 366: }
  3060  0011AA  AA82               	btfss	130,5,c	;volatile
  3061  0011AC  D010               	goto	l5691
  3062                           
  3063                           ; BSR set to: 1
  3064                           ;HW2.c: 370: sprintf(Buffer1, " HT:%s", "ON");
  3065  0011AE  0EA0               	movlw	low display@Buffer1
  3066  0011B0  0100               	movlb	0	; () banked
  3067  0011B2  6FA6               	movwf	sprintf@sp& (0+255),b
  3068  0011B4  0E01               	movlw	high display@Buffer1
  3069  0011B6  6FA7               	movwf	(sprintf@sp+1)& (0+255),b
  3070  0011B8  0EF1               	movlw	low STR_1
  3071  0011BA  6FA8               	movwf	sprintf@f& (0+255),b
  3072  0011BC  0EFF               	movlw	high STR_1
  3073  0011BE  6FA9               	movwf	(sprintf@f+1)& (0+255),b
  3074  0011C0  0EFC               	movlw	low STR_2
  3075  0011C2  6FAA               	movwf	(?_sprintf+4)& (0+255),b
  3076  0011C4  0EFF               	movlw	high STR_2
  3077  0011C6  6FAB               	movwf	(?_sprintf+5)& (0+255),b
  3078  0011C8  EC09  F000         	call	_sprintf	;wreg free
  3079                           
  3080                           ;HW2.c: 373: }
  3081  0011CC  D00F               	goto	l5693
  3082  0011CE                     l5691:
  3083                           
  3084                           ; BSR set to: 1
  3085                           ;HW2.c: 374: else{;HW2.c: 376: sprintf(Buffer1, " HT:%s", "OFF");
  3086  0011CE  0EA0               	movlw	low display@Buffer1
  3087  0011D0  0100               	movlb	0	; () banked
  3088  0011D2  6FA6               	movwf	sprintf@sp& (0+255),b
  3089  0011D4  0E01               	movlw	high display@Buffer1
  3090  0011D6  6FA7               	movwf	(sprintf@sp+1)& (0+255),b
  3091  0011D8  0EF1               	movlw	low STR_1
  3092  0011DA  6FA8               	movwf	sprintf@f& (0+255),b
  3093  0011DC  0EFF               	movlw	high STR_1
  3094  0011DE  6FA9               	movwf	(sprintf@f+1)& (0+255),b
  3095  0011E0  0EF8               	movlw	low STR_4
  3096  0011E2  6FAA               	movwf	(?_sprintf+4)& (0+255),b
  3097  0011E4  0EFF               	movlw	high STR_4
  3098  0011E6  6FAB               	movwf	(?_sprintf+5)& (0+255),b
  3099  0011E8  EC09  F000         	call	_sprintf	;wreg free
  3100  0011EC                     l5693:
  3101                           
  3102                           ;HW2.c: 379: };HW2.c: 381: if(PORTCbits.RC5 == 1){
  3103  0011EC  AA82               	btfss	130,5,c	;volatile
  3104  0011EE  D010               	goto	l5697
  3105                           
  3106                           ;HW2.c: 383: sprintf(Buffer2, " CK:%s", "ON");
  3107  0011F0  0EC0               	movlw	low display@Buffer2
  3108  0011F2  0100               	movlb	0	; () banked
  3109  0011F4  6FA6               	movwf	sprintf@sp& (0+255),b
  3110  0011F6  0E01               	movlw	high display@Buffer2
  3111  0011F8  6FA7               	movwf	(sprintf@sp+1)& (0+255),b
  3112  0011FA  0EEA               	movlw	low STR_5
  3113  0011FC  6FA8               	movwf	sprintf@f& (0+255),b
  3114  0011FE  0EFF               	movlw	high STR_5
  3115  001200  6FA9               	movwf	(sprintf@f+1)& (0+255),b
  3116  001202  0EFC               	movlw	low STR_2
  3117  001204  6FAA               	movwf	(?_sprintf+4)& (0+255),b
  3118  001206  0EFF               	movlw	high STR_2
  3119  001208  6FAB               	movwf	(?_sprintf+5)& (0+255),b
  3120  00120A  EC09  F000         	call	_sprintf	;wreg free
  3121                           
  3122                           ;HW2.c: 385: }
  3123  00120E  D047               	goto	l5711
  3124  001210                     l5697:
  3125                           
  3126                           ;HW2.c: 386: else{;HW2.c: 387: sprintf(Buffer2, " CK:%s", "OFF");
  3127  001210  0EC0               	movlw	low display@Buffer2
  3128  001212  0100               	movlb	0	; () banked
  3129  001214  6FA6               	movwf	sprintf@sp& (0+255),b
  3130  001216  0E01               	movlw	high display@Buffer2
  3131  001218  6FA7               	movwf	(sprintf@sp+1)& (0+255),b
  3132  00121A  0EEA               	movlw	low STR_5
  3133  00121C  6FA8               	movwf	sprintf@f& (0+255),b
  3134  00121E  0EFF               	movlw	high STR_5
  3135  001220  6FA9               	movwf	(sprintf@f+1)& (0+255),b
  3136  001222  0EF8               	movlw	low STR_4
  3137  001224  6FAA               	movwf	(?_sprintf+4)& (0+255),b
  3138  001226  0EFF               	movlw	high STR_4
  3139  001228  6FAB               	movwf	(?_sprintf+5)& (0+255),b
  3140  00122A  EC09  F000         	call	_sprintf	;wreg free
  3141  00122E  D037               	goto	l5711
  3142  001230                     l5699:
  3143                           
  3144                           ; BSR set to: 0
  3145                           ;HW2.c: 393: sprintf(LCDP, "  SEC           ");
  3146  001230  0E40               	movlw	low display@LCDP
  3147  001232  6FA6               	movwf	sprintf@sp& (0+255),b
  3148  001234  0E01               	movlw	high display@LCDP
  3149  001236  6FA7               	movwf	(sprintf@sp+1)& (0+255),b
  3150  001238  0E84               	movlw	low STR_9
  3151  00123A  6FA8               	movwf	sprintf@f& (0+255),b
  3152  00123C  0EFF               	movlw	high STR_9
  3153  00123E  6FA9               	movwf	(sprintf@f+1)& (0+255),b
  3154  001240  EC09  F000         	call	_sprintf	;wreg free
  3155                           
  3156                           ;HW2.c: 394: break;
  3157  001244  D044               	goto	l5713
  3158  001246                     l5701:
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;HW2.c: 397: sprintf(LCDP, "  10 SEC          ");
  3162  001246  0E40               	movlw	low display@LCDP
  3163  001248  6FA6               	movwf	sprintf@sp& (0+255),b
  3164  00124A  0E01               	movlw	high display@LCDP
  3165  00124C  6FA7               	movwf	(sprintf@sp+1)& (0+255),b
  3166  00124E  0E71               	movlw	low STR_10
  3167  001250  6FA8               	movwf	sprintf@f& (0+255),b
  3168  001252  0EFF               	movlw	high STR_10
  3169  001254  6FA9               	movwf	(sprintf@f+1)& (0+255),b
  3170  001256  EC09  F000         	call	_sprintf	;wreg free
  3171                           
  3172                           ;HW2.c: 398: break;
  3173  00125A  D039               	goto	l5713
  3174  00125C                     l5703:
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;HW2.c: 400: sprintf(LCDP, "  MIN          ");
  3178  00125C  0E40               	movlw	low display@LCDP
  3179  00125E  6FA6               	movwf	sprintf@sp& (0+255),b
  3180  001260  0E01               	movlw	high display@LCDP
  3181  001262  6FA7               	movwf	(sprintf@sp+1)& (0+255),b
  3182  001264  0E95               	movlw	low STR_11
  3183  001266  6FA8               	movwf	sprintf@f& (0+255),b
  3184  001268  0EFF               	movlw	high STR_11
  3185  00126A  6FA9               	movwf	(sprintf@f+1)& (0+255),b
  3186  00126C  EC09  F000         	call	_sprintf	;wreg free
  3187                           
  3188                           ;HW2.c: 401: break;
  3189  001270  D02E               	goto	l5713
  3190  001272                     l5705:
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;HW2.c: 403: sprintf(LCDP, "  10 MIN      ");
  3194  001272  0E40               	movlw	low display@LCDP
  3195  001274  6FA6               	movwf	sprintf@sp& (0+255),b
  3196  001276  0E01               	movlw	high display@LCDP
  3197  001278  6FA7               	movwf	(sprintf@sp+1)& (0+255),b
  3198  00127A  0EA5               	movlw	low STR_12
  3199  00127C  6FA8               	movwf	sprintf@f& (0+255),b
  3200  00127E  0EFF               	movlw	high STR_12
  3201  001280  6FA9               	movwf	(sprintf@f+1)& (0+255),b
  3202  001282  EC09  F000         	call	_sprintf	;wreg free
  3203                           
  3204                           ;HW2.c: 404: break;
  3205  001286  D023               	goto	l5713
  3206  001288                     l5707:
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;HW2.c: 406: sprintf(LCDP, "  HOUR     ");
  3210  001288  0E40               	movlw	low display@LCDP
  3211  00128A  6FA6               	movwf	sprintf@sp& (0+255),b
  3212  00128C  0E01               	movlw	high display@LCDP
  3213  00128E  6FA7               	movwf	(sprintf@sp+1)& (0+255),b
  3214  001290  0EC2               	movlw	low STR_13
  3215  001292  6FA8               	movwf	sprintf@f& (0+255),b
  3216  001294  0EFF               	movlw	high STR_13
  3217  001296  6FA9               	movwf	(sprintf@f+1)& (0+255),b
  3218  001298  EC09  F000         	call	_sprintf	;wreg free
  3219                           
  3220                           ;HW2.c: 407: break;
  3221  00129C  D018               	goto	l5713
  3222  00129E                     l5711:
  3223                           
  3224                           ; BSR set to: 0
  3225  00129E  C1E2  F0D2         	movff	_mode,??_display
  3226  0012A2  C1E3  F0D3         	movff	_mode+1,??_display+1
  3227                           
  3228                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3229                           ; Switch size 1, requested type "simple"
  3230                           ; Number of cases is 1, Range of values is 0 to 0
  3231                           ; switch strategies available:
  3232                           ; Name         Instructions Cycles
  3233                           ; simple_byte            4     3 (average)
  3234                           ;	Chosen strategy is simple_byte
  3235  0012A6  51D3               	movf	(??_display+1)& (0+255),w,b
  3236  0012A8  0A00               	xorlw	0	; case 0
  3237  0012AA  A4D8               	btfss	status,2,c
  3238  0012AC  D010               	goto	l5713
  3239                           
  3240                           ; BSR set to: 0
  3241                           ; Switch size 1, requested type "simple"
  3242                           ; Number of cases is 5, Range of values is 0 to 4
  3243                           ; switch strategies available:
  3244                           ; Name         Instructions Cycles
  3245                           ; simple_byte           16     9 (average)
  3246                           ;	Chosen strategy is simple_byte
  3247  0012AE  51D2               	movf	??_display& (0+255),w,b
  3248  0012B0  0A00               	xorlw	0	; case 0
  3249  0012B2  B4D8               	btfsc	status,2,c
  3250  0012B4  D7BD               	goto	l5699
  3251  0012B6  0A01               	xorlw	1	; case 1
  3252  0012B8  B4D8               	btfsc	status,2,c
  3253  0012BA  D7C5               	goto	l5701
  3254  0012BC  0A03               	xorlw	3	; case 2
  3255  0012BE  B4D8               	btfsc	status,2,c
  3256  0012C0  D7CD               	goto	l5703
  3257  0012C2  0A01               	xorlw	1	; case 3
  3258  0012C4  B4D8               	btfsc	status,2,c
  3259  0012C6  D7D5               	goto	l5705
  3260  0012C8  0A07               	xorlw	7	; case 4
  3261  0012CA  B4D8               	btfsc	status,2,c
  3262  0012CC  D7DD               	goto	l5707
  3263  0012CE                     l5713:
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;HW2.c: 413: lcd_gotoxy(1, 1);
  3267  0012CE  0E01               	movlw	1
  3268  0012D0  6E2E               	movwf	lcd_gotoxy@y^0,c
  3269  0012D2  0E01               	movlw	1
  3270  0012D4  ECF1  F013         	call	_lcd_gotoxy
  3271                           
  3272                           ;HW2.c: 414: sprintf(Buffer, "Time : %02d:%02d:%02d", hours, minutes, seconds);
  3273  0012D8  0E80               	movlw	low display@Buffer
  3274  0012DA  0100               	movlb	0	; () banked
  3275  0012DC  6FA6               	movwf	sprintf@sp& (0+255),b
  3276  0012DE  0E01               	movlw	high display@Buffer
  3277  0012E0  6FA7               	movwf	(sprintf@sp+1)& (0+255),b
  3278  0012E2  0E5B               	movlw	low STR_14
  3279  0012E4  6FA8               	movwf	sprintf@f& (0+255),b
  3280  0012E6  0EFF               	movlw	high STR_14
  3281  0012E8  6FA9               	movwf	(sprintf@f+1)& (0+255),b
  3282  0012EA  C1E4  F0AA         	movff	_hours,?_sprintf+4
  3283  0012EE  C1E5  F0AB         	movff	_hours+1,?_sprintf+5
  3284  0012F2  C1E0  F0AC         	movff	_minutes,?_sprintf+6
  3285  0012F6  C1E1  F0AD         	movff	_minutes+1,?_sprintf+7
  3286  0012FA  C1E6  F0AE         	movff	_seconds,?_sprintf+8
  3287  0012FE  C1E7  F0AF         	movff	_seconds+1,?_sprintf+9
  3288  001302  EC09  F000         	call	_sprintf	;wreg free
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;HW2.c: 415: lcd_puts(Buffer);
  3292  001306  0E80               	movlw	low display@Buffer
  3293  001308  6E32               	movwf	lcd_puts@s^0,c
  3294  00130A  0E01               	movlw	high display@Buffer
  3295  00130C  6E33               	movwf	(lcd_puts@s+1)^0,c
  3296  00130E  EC44  F015         	call	_lcd_puts	;wreg free
  3297                           
  3298                           ;HW2.c: 420: lcd_gotoxy(1, 2);
  3299  001312  0E02               	movlw	2
  3300  001314  6E2E               	movwf	lcd_gotoxy@y^0,c
  3301  001316  0E01               	movlw	1
  3302  001318  ECF1  F013         	call	_lcd_gotoxy
  3303                           
  3304                           ;HW2.c: 421: sprintf(LCD, "TMP:%3.1fC   ", temp);
  3305  00131C  0E00               	movlw	low display@LCD
  3306  00131E  0100               	movlb	0	; () banked
  3307  001320  6FA6               	movwf	sprintf@sp& (0+255),b
  3308  001322  0E01               	movlw	high display@LCD
  3309  001324  6FA7               	movwf	(sprintf@sp+1)& (0+255),b
  3310  001326  0EB4               	movlw	low STR_15
  3311  001328  6FA8               	movwf	sprintf@f& (0+255),b
  3312  00132A  0EFF               	movlw	high STR_15
  3313  00132C  6FA9               	movwf	(sprintf@f+1)& (0+255),b
  3314  00132E  C044  F0AA         	movff	_temp,?_sprintf+4
  3315  001332  C045  F0AB         	movff	_temp+1,?_sprintf+5
  3316  001336  C046  F0AC         	movff	_temp+2,?_sprintf+6
  3317  00133A  EC09  F000         	call	_sprintf	;wreg free
  3318                           
  3319                           ;HW2.c: 422: lcd_puts(LCD);
  3320  00133E  0E00               	movlw	low display@LCD
  3321  001340  6E32               	movwf	lcd_puts@s^0,c
  3322  001342  0E01               	movlw	high display@LCD
  3323  001344  6E33               	movwf	(lcd_puts@s+1)^0,c
  3324  001346  EC44  F015         	call	_lcd_puts	;wreg free
  3325                           
  3326                           ;HW2.c: 424: lcd_gotoxy(1, 3);
  3327  00134A  0E03               	movlw	3
  3328  00134C  6E2E               	movwf	lcd_gotoxy@y^0,c
  3329  00134E  0E01               	movlw	1
  3330  001350  ECF1  F013         	call	_lcd_gotoxy
  3331                           
  3332                           ;HW2.c: 425: sprintf(LCD, "SP :%3.1fC",sp);
  3333  001354  0E00               	movlw	low display@LCD
  3334  001356  0100               	movlb	0	; () banked
  3335  001358  6FA6               	movwf	sprintf@sp& (0+255),b
  3336  00135A  0E01               	movlw	high display@LCD
  3337  00135C  6FA7               	movwf	(sprintf@sp+1)& (0+255),b
  3338  00135E  0ECE               	movlw	low STR_16
  3339  001360  6FA8               	movwf	sprintf@f& (0+255),b
  3340  001362  0EFF               	movlw	high STR_16
  3341  001364  6FA9               	movwf	(sprintf@f+1)& (0+255),b
  3342  001366  C041  F0AA         	movff	_sp,?_sprintf+4
  3343  00136A  C042  F0AB         	movff	_sp+1,?_sprintf+5
  3344  00136E  C043  F0AC         	movff	_sp+2,?_sprintf+6
  3345  001372  EC09  F000         	call	_sprintf	;wreg free
  3346                           
  3347                           ; BSR set to: 0
  3348                           ;HW2.c: 426: lcd_puts(LCD);
  3349  001376  0E00               	movlw	low display@LCD
  3350  001378  6E32               	movwf	lcd_puts@s^0,c
  3351  00137A  0E01               	movlw	high display@LCD
  3352  00137C  6E33               	movwf	(lcd_puts@s+1)^0,c
  3353  00137E  EC44  F015         	call	_lcd_puts	;wreg free
  3354                           
  3355                           ;HW2.c: 428: lcd_gotoxy(10, 2);
  3356  001382  0E02               	movlw	2
  3357  001384  6E2E               	movwf	lcd_gotoxy@y^0,c
  3358  001386  0E0A               	movlw	10
  3359  001388  ECF1  F013         	call	_lcd_gotoxy
  3360                           
  3361                           ;HW2.c: 429: lcd_puts(Buffer1);
  3362  00138C  0EA0               	movlw	low display@Buffer1
  3363  00138E  6E32               	movwf	lcd_puts@s^0,c
  3364  001390  0E01               	movlw	high display@Buffer1
  3365  001392  6E33               	movwf	(lcd_puts@s+1)^0,c
  3366  001394  EC44  F015         	call	_lcd_puts	;wreg free
  3367                           
  3368                           ;HW2.c: 431: lcd_gotoxy(10, 3);
  3369  001398  0E03               	movlw	3
  3370  00139A  6E2E               	movwf	lcd_gotoxy@y^0,c
  3371  00139C  0E0A               	movlw	10
  3372  00139E  ECF1  F013         	call	_lcd_gotoxy
  3373                           
  3374                           ;HW2.c: 432: lcd_puts(Buffer2);
  3375  0013A2  0EC0               	movlw	low display@Buffer2
  3376  0013A4  6E32               	movwf	lcd_puts@s^0,c
  3377  0013A6  0E01               	movlw	high display@Buffer2
  3378  0013A8  6E33               	movwf	(lcd_puts@s+1)^0,c
  3379  0013AA  EC44  F015         	call	_lcd_puts	;wreg free
  3380                           
  3381                           ;HW2.c: 439: lcd_gotoxy(1, 4);
  3382  0013AE  0E04               	movlw	4
  3383  0013B0  6E2E               	movwf	lcd_gotoxy@y^0,c
  3384  0013B2  0E01               	movlw	1
  3385  0013B4  ECF1  F013         	call	_lcd_gotoxy
  3386                           
  3387                           ;HW2.c: 440: sprintf(LCD, "MD :     ");
  3388  0013B8  0E00               	movlw	low display@LCD
  3389  0013BA  0100               	movlb	0	; () banked
  3390  0013BC  6FA6               	movwf	sprintf@sp& (0+255),b
  3391  0013BE  0E01               	movlw	high display@LCD
  3392  0013C0  6FA7               	movwf	(sprintf@sp+1)& (0+255),b
  3393  0013C2  0ED9               	movlw	low STR_17
  3394  0013C4  6FA8               	movwf	sprintf@f& (0+255),b
  3395  0013C6  0EFF               	movlw	high STR_17
  3396  0013C8  6FA9               	movwf	(sprintf@f+1)& (0+255),b
  3397  0013CA  EC09  F000         	call	_sprintf	;wreg free
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;HW2.c: 441: lcd_puts(LCD);
  3401  0013CE  0E00               	movlw	low display@LCD
  3402  0013D0  6E32               	movwf	lcd_puts@s^0,c
  3403  0013D2  0E01               	movlw	high display@LCD
  3404  0013D4  6E33               	movwf	(lcd_puts@s+1)^0,c
  3405  0013D6  EC44  F015         	call	_lcd_puts	;wreg free
  3406                           
  3407                           ;HW2.c: 443: lcd_gotoxy(3, 4);
  3408  0013DA  0E04               	movlw	4
  3409  0013DC  6E2E               	movwf	lcd_gotoxy@y^0,c
  3410  0013DE  0E03               	movlw	3
  3411  0013E0  ECF1  F013         	call	_lcd_gotoxy
  3412                           
  3413                           ;HW2.c: 444: lcd_puts(LCDP);
  3414  0013E4  0E40               	movlw	low display@LCDP
  3415  0013E6  6E32               	movwf	lcd_puts@s^0,c
  3416  0013E8  0E01               	movlw	high display@LCDP
  3417  0013EA  6E33               	movwf	(lcd_puts@s+1)^0,c
  3418  0013EC  EC44  F015         	call	_lcd_puts	;wreg free
  3419  0013F0  0012               	return		;funcret
  3420  0013F2                     __end_of_display:
  3421                           	callstack 0
  3422                           
  3423 ;; *************** function _sprintf *****************
  3424 ;; Defined at:
  3425 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c"
  3426 ;; Parameters:    Size  Location     Type
  3427 ;;  sp              2   38[BANK0 ] PTR unsigned char 
  3428 ;;		 -> display@LCD(64), display@Buffer(32), display@LCDP(64), display@Buffer2(32), 
  3429 ;;		 -> display@Buffer1(32), 
  3430 ;;  f               2   40[BANK0 ] PTR const unsigned char 
  3431 ;;		 -> STR_17(10), STR_16(11), STR_15(14), STR_14(22), 
  3432 ;;		 -> STR_13(12), STR_12(15), STR_11(16), STR_10(19), 
  3433 ;;		 -> STR_9(17), STR_7(7), STR_5(7), STR_3(7), 
  3434 ;;		 -> STR_1(7), 
  3435 ;; Auto vars:     Size  Location     Type
  3436 ;;  val             4   66[BANK0 ] unsigned long 
  3437 ;;  tmpval          4   62[BANK0 ] struct .
  3438 ;;  fval            3   74[BANK0 ] struct .
  3439 ;;  prec            2   79[BANK0 ] int 
  3440 ;;  width           2   77[BANK0 ] int 
  3441 ;;  flag            2   72[BANK0 ] unsigned short 
  3442 ;;  eexp            2   70[BANK0 ] int 
  3443 ;;  len             2   60[BANK0 ] unsigned int 
  3444 ;;  cp              2   57[BANK0 ] PTR const unsigned char 
  3445 ;;		 -> STR_18(7), ?_sprintf(2), STR_8(4), STR_6(3), 
  3446 ;;		 -> STR_4(4), STR_2(3), 
  3447 ;;  c               1   81[BANK0 ] unsigned char 
  3448 ;;  ap              1   59[BANK0 ] PTR void [1]
  3449 ;;		 -> ?_sprintf(2), 
  3450 ;;  d               1    0        unsigned char 
  3451 ;; Return value:  Size  Location     Type
  3452 ;;                  2   38[BANK0 ] int 
  3453 ;; Registers used:
  3454 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3455 ;; Tracked objects:
  3456 ;;		On entry : 3F/0
  3457 ;;		On exit  : 3F/0
  3458 ;;		Unchanged: 0/0
  3459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3460 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3461 ;;      Locals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3462 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3463 ;;      Totals:         0      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3464 ;;Total ram usage:       44 bytes
  3465 ;; Hardware stack levels used:    1
  3466 ;; Hardware stack levels required when called:    7
  3467 ;; This function calls:
  3468 ;;		___awdiv
  3469 ;;		___ftadd
  3470 ;;		___ftge
  3471 ;;		___ftmul
  3472 ;;		___ftneg
  3473 ;;		___ftsub
  3474 ;;		___fttol
  3475 ;;		___lldiv
  3476 ;;		___llmod
  3477 ;;		___lltoft
  3478 ;;		___wmul
  3479 ;;		__div_to_l_
  3480 ;;		__tdiv_to_l_
  3481 ;;		_fround
  3482 ;;		_isdigit
  3483 ;;		_scale
  3484 ;; This function is called by:
  3485 ;;		_display
  3486 ;; This function uses a non-reentrant model
  3487 ;;
  3488                           
  3489                           	psect	text15
  3490  000012                     __ptext15:
  3491                           	callstack 0
  3492  000012                     _sprintf:
  3493                           	callstack 22
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          17: int prec;;doprnt.c: 525: unsigned short flag;;doprnt.c: 532: char d;;doprnt.c: 533: 
      +                          double fval;;doprnt.c: 534: int eexp;;doprnt.c: 540: union {;doprnt.c: 541: unsigned lon
      +                          g vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned long
      +                           val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = 
      +                          __va_start();
  3497                           
  3498                           ;incstack = 0
  3499  000012  0EAA               	movlw	low (?_sprintf+4)
  3500  000014  6FBB               	movwf	sprintf@ap& (0+255),b
  3501                           
  3502                           ;doprnt.c: 553: while((c = *f++)) {
  3503  000016  EF94  F005         	goto	u6790
  3504  00001A                     l5247:
  3505                           
  3506                           ; BSR set to: 0
  3507                           ;doprnt.c: 555: if(c != '%')
  3508  00001A  0E25               	movlw	37
  3509  00001C  19D1               	xorwf	sprintf@c& (0+255),w,b
  3510  00001E  B4D8               	btfsc	status,2,c
  3511  000020  D00A               	goto	l5253
  3512                           
  3513                           ; BSR set to: 0
  3514                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
  3515  000022  C0A6  FFD9         	movff	sprintf@sp,fsr2l
  3516  000026  C0A7  FFDA         	movff	sprintf@sp+1,fsr2h
  3517  00002A  C0D1  FFDF         	movff	sprintf@c,indf2
  3518                           
  3519                           ; BSR set to: 0
  3520  00002E  4BA6               	infsnz	sprintf@sp& (0+255),f,b
  3521  000030  2BA7               	incf	(sprintf@sp+1)& (0+255),f,b
  3522                           
  3523                           ;doprnt.c: 559: continue;
  3524  000032  EF94  F005         	goto	u6790
  3525  000036                     l5253:
  3526                           
  3527                           ; BSR set to: 0
  3528                           ;doprnt.c: 560: };doprnt.c: 563: width = 0;
  3529  000036  0E00               	movlw	0
  3530  000038  6FCE               	movwf	(sprintf@width+1)& (0+255),b
  3531  00003A  0E00               	movlw	0
  3532  00003C  6FCD               	movwf	sprintf@width& (0+255),b
  3533                           
  3534                           ;doprnt.c: 565: flag = 0;
  3535  00003E  0E00               	movlw	0
  3536  000040  6FC9               	movwf	(sprintf@flag+1)& (0+255),b
  3537  000042  0E00               	movlw	0
  3538  000044  6FC8               	movwf	sprintf@flag& (0+255),b
  3539  000046  D003               	goto	l5259
  3540  000048                     l5255:
  3541                           
  3542                           ; BSR set to: 0
  3543                           ;doprnt.c: 597: flag |= 0x04;
  3544  000048  85C8               	bsf	sprintf@flag& (0+255),2,b
  3545                           
  3546                           ;doprnt.c: 598: f++;
  3547  00004A  4BA8               	infsnz	sprintf@f& (0+255),f,b
  3548  00004C  2BA9               	incf	(sprintf@f+1)& (0+255),f,b
  3549  00004E                     l5259:
  3550                           
  3551                           ; BSR set to: 0
  3552  00004E  C0A8  FFF6         	movff	sprintf@f,tblptrl
  3553  000052  C0A9  FFF7         	movff	sprintf@f+1,tblptrh
  3554  000056                     	if	0	;tblptru may be non-zero
  3555  000056                     	endif
  3556  000056                     	if	0	;tblptru may be non-zero
  3557  000056                     	endif
  3558  000056  0008               	tblrd		*
  3559  000058  50F5               	movf	tablat,w,c
  3560                           
  3561                           ; Switch size 1, requested type "simple"
  3562                           ; Number of cases is 1, Range of values is 48 to 48
  3563                           ; switch strategies available:
  3564                           ; Name         Instructions Cycles
  3565                           ; simple_byte            4     3 (average)
  3566                           ;	Chosen strategy is simple_byte
  3567  00005A  0A30               	xorlw	48	; case 48
  3568  00005C  B4D8               	btfsc	status,2,c
  3569  00005E  D7F4               	goto	l5255
  3570                           
  3571                           ; BSR set to: 0
  3572                           ;doprnt.c: 614: if(isdigit((unsigned)*f)) {
  3573  000060  C0A8  FFF6         	movff	sprintf@f,tblptrl
  3574  000064  C0A9  FFF7         	movff	sprintf@f+1,tblptrh
  3575  000068                     	if	0	;tblptru may be non-zero
  3576  000068                     	endif
  3577  000068                     	if	0	;tblptru may be non-zero
  3578  000068                     	endif
  3579  000068  0008               	tblrd		*
  3580  00006A  50F5               	movf	tablat,w,c
  3581  00006C  EC79  F015         	call	_isdigit
  3582  000070  A0D8               	btfss	status,0,c
  3583  000072  D034               	goto	u6190
  3584                           
  3585                           ;doprnt.c: 615: width = 0;
  3586  000074  0E00               	movlw	0
  3587  000076  0100               	movlb	0	; () banked
  3588  000078  6FCE               	movwf	(sprintf@width+1)& (0+255),b
  3589  00007A  0E00               	movlw	0
  3590  00007C  6FCD               	movwf	sprintf@width& (0+255),b
  3591  00007E                     l5265:
  3592                           
  3593                           ;doprnt.c: 617: width *= 10;
  3594  00007E  C0CD  F024         	movff	sprintf@width,___wmul@multiplier
  3595  000082  C0CE  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  3596  000086  0E00               	movlw	0
  3597  000088  6E27               	movwf	(___wmul@multiplicand+1)^0,c
  3598  00008A  0E0A               	movlw	10
  3599  00008C  6E26               	movwf	___wmul@multiplicand^0,c
  3600  00008E  EC0C  F015         	call	___wmul	;wreg free
  3601  000092  C024  F0CD         	movff	?___wmul,sprintf@width
  3602  000096  C025  F0CE         	movff	?___wmul+1,sprintf@width+1
  3603                           
  3604                           ;doprnt.c: 618: width += *f++ - '0';
  3605  00009A  0ED0               	movlw	208
  3606  00009C  0100               	movlb	0	; () banked
  3607  00009E  6FB0               	movwf	??_sprintf& (0+255),b
  3608  0000A0  0EFF               	movlw	255
  3609  0000A2  6FB1               	movwf	(??_sprintf+1)& (0+255),b
  3610  0000A4  C0A8  FFF6         	movff	sprintf@f,tblptrl
  3611  0000A8  C0A9  FFF7         	movff	sprintf@f+1,tblptrh
  3612  0000AC                     	if	0	;tblptru may be non-zero
  3613  0000AC                     	endif
  3614  0000AC                     	if	0	;tblptru may be non-zero
  3615  0000AC                     	endif
  3616  0000AC  0008               	tblrd		*
  3617  0000AE  50F5               	movf	tablat,w,c
  3618  0000B0  6FB2               	movwf	(??_sprintf+2)& (0+255),b
  3619  0000B2  6BB3               	clrf	(??_sprintf+3)& (0+255),b
  3620  0000B4  51B0               	movf	??_sprintf& (0+255),w,b
  3621  0000B6  27B2               	addwf	(??_sprintf+2)& (0+255),f,b
  3622  0000B8  51B1               	movf	(??_sprintf+1)& (0+255),w,b
  3623  0000BA  23B3               	addwfc	(??_sprintf+3)& (0+255),f,b
  3624  0000BC  51B2               	movf	(??_sprintf+2)& (0+255),w,b
  3625  0000BE  27CD               	addwf	sprintf@width& (0+255),f,b
  3626  0000C0  51B3               	movf	(??_sprintf+3)& (0+255),w,b
  3627  0000C2  23CE               	addwfc	(sprintf@width+1)& (0+255),f,b
  3628                           
  3629                           ; BSR set to: 0
  3630  0000C4  4BA8               	infsnz	sprintf@f& (0+255),f,b
  3631  0000C6  2BA9               	incf	(sprintf@f+1)& (0+255),f,b
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;doprnt.c: 619: } while(isdigit((unsigned)*f));
  3635  0000C8  C0A8  FFF6         	movff	sprintf@f,tblptrl
  3636  0000CC  C0A9  FFF7         	movff	sprintf@f+1,tblptrh
  3637  0000D0                     	if	0	;tblptru may be non-zero
  3638  0000D0                     	endif
  3639  0000D0                     	if	0	;tblptru may be non-zero
  3640  0000D0                     	endif
  3641  0000D0  0008               	tblrd		*
  3642  0000D2  50F5               	movf	tablat,w,c
  3643  0000D4  EC79  F015         	call	_isdigit
  3644  0000D8  B0D8               	btfsc	status,0,c
  3645  0000DA  D7D1               	goto	l5265
  3646  0000DC                     u6190:
  3647                           
  3648                           ;doprnt.c: 625: };doprnt.c: 628: if(*f == '.') {
  3649  0000DC  C0A8  FFF6         	movff	sprintf@f,tblptrl
  3650  0000E0  C0A9  FFF7         	movff	sprintf@f+1,tblptrh
  3651  0000E4                     	if	0	;tblptru may be non-zero
  3652  0000E4                     	endif
  3653  0000E4                     	if	0	;tblptru may be non-zero
  3654  0000E4                     	endif
  3655  0000E4  0008               	tblrd		*
  3656  0000E6  50F5               	movf	tablat,w,c
  3657  0000E8  0A2E               	xorlw	46
  3658  0000EA  A4D8               	btfss	status,2,c
  3659  0000EC  D039               	goto	l5287
  3660                           
  3661                           ;doprnt.c: 629: flag |= 0x4000;
  3662  0000EE  0100               	movlb	0	; () banked
  3663  0000F0  8DC9               	bsf	(sprintf@flag+1)& (0+255),6,b
  3664                           
  3665                           ;doprnt.c: 630: f++;
  3666  0000F2  4BA8               	infsnz	sprintf@f& (0+255),f,b
  3667  0000F4  2BA9               	incf	(sprintf@f+1)& (0+255),f,b
  3668                           
  3669                           ; BSR set to: 0
  3670                           ;doprnt.c: 644: {;doprnt.c: 645: prec = 0;
  3671  0000F6  0E00               	movlw	0
  3672  0000F8  6FD0               	movwf	(sprintf@prec+1)& (0+255),b
  3673  0000FA  0E00               	movlw	0
  3674  0000FC  6FCF               	movwf	sprintf@prec& (0+255),b
  3675                           
  3676                           ;doprnt.c: 646: while(isdigit((unsigned)*f)) {
  3677  0000FE  D025               	goto	l5285
  3678  000100                     l5279:
  3679                           
  3680                           ;doprnt.c: 647: prec *= 10;
  3681  000100  C0CF  F024         	movff	sprintf@prec,___wmul@multiplier
  3682  000104  C0D0  F025         	movff	sprintf@prec+1,___wmul@multiplier+1
  3683  000108  0E00               	movlw	0
  3684  00010A  6E27               	movwf	(___wmul@multiplicand+1)^0,c
  3685  00010C  0E0A               	movlw	10
  3686  00010E  6E26               	movwf	___wmul@multiplicand^0,c
  3687  000110  EC0C  F015         	call	___wmul	;wreg free
  3688  000114  C024  F0CF         	movff	?___wmul,sprintf@prec
  3689  000118  C025  F0D0         	movff	?___wmul+1,sprintf@prec+1
  3690                           
  3691                           ;doprnt.c: 648: prec += *f++ - '0';
  3692  00011C  0ED0               	movlw	208
  3693  00011E  0100               	movlb	0	; () banked
  3694  000120  6FB0               	movwf	??_sprintf& (0+255),b
  3695  000122  0EFF               	movlw	255
  3696  000124  6FB1               	movwf	(??_sprintf+1)& (0+255),b
  3697  000126  C0A8  FFF6         	movff	sprintf@f,tblptrl
  3698  00012A  C0A9  FFF7         	movff	sprintf@f+1,tblptrh
  3699  00012E                     	if	0	;tblptru may be non-zero
  3700  00012E                     	endif
  3701  00012E                     	if	0	;tblptru may be non-zero
  3702  00012E                     	endif
  3703  00012E  0008               	tblrd		*
  3704  000130  50F5               	movf	tablat,w,c
  3705  000132  6FB2               	movwf	(??_sprintf+2)& (0+255),b
  3706  000134  6BB3               	clrf	(??_sprintf+3)& (0+255),b
  3707  000136  51B0               	movf	??_sprintf& (0+255),w,b
  3708  000138  27B2               	addwf	(??_sprintf+2)& (0+255),f,b
  3709  00013A  51B1               	movf	(??_sprintf+1)& (0+255),w,b
  3710  00013C  23B3               	addwfc	(??_sprintf+3)& (0+255),f,b
  3711  00013E  51B2               	movf	(??_sprintf+2)& (0+255),w,b
  3712  000140  27CF               	addwf	sprintf@prec& (0+255),f,b
  3713  000142  51B3               	movf	(??_sprintf+3)& (0+255),w,b
  3714  000144  23D0               	addwfc	(sprintf@prec+1)& (0+255),f,b
  3715                           
  3716                           ; BSR set to: 0
  3717  000146  4BA8               	infsnz	sprintf@f& (0+255),f,b
  3718  000148  2BA9               	incf	(sprintf@f+1)& (0+255),f,b
  3719  00014A                     l5285:
  3720                           
  3721                           ; BSR set to: 0
  3722  00014A  C0A8  FFF6         	movff	sprintf@f,tblptrl
  3723  00014E  C0A9  FFF7         	movff	sprintf@f+1,tblptrh
  3724  000152                     	if	0	;tblptru may be non-zero
  3725  000152                     	endif
  3726  000152                     	if	0	;tblptru may be non-zero
  3727  000152                     	endif
  3728  000152  0008               	tblrd		*
  3729  000154  50F5               	movf	tablat,w,c
  3730  000156  EC79  F015         	call	_isdigit
  3731  00015A  A0D8               	btfss	status,0,c
  3732  00015C  D096               	goto	l5335
  3733  00015E  D7D0               	goto	l5279
  3734  000160                     l5287:
  3735                           
  3736                           ;doprnt.c: 652: prec = 0;
  3737  000160  0E00               	movlw	0
  3738  000162  0100               	movlb	0	; () banked
  3739  000164  6FD0               	movwf	(sprintf@prec+1)& (0+255),b
  3740  000166  0E00               	movlw	0
  3741  000168  6FCF               	movwf	sprintf@prec& (0+255),b
  3742                           
  3743                           ; BSR set to: 0
  3744                           ;doprnt.c: 654: flag |= 0x1000;
  3745  00016A  89C9               	bsf	(sprintf@flag+1)& (0+255),4,b
  3746  00016C  D08E               	goto	l5335
  3747  00016E                     l5291:
  3748                           
  3749                           ; BSR set to: 0
  3750                           ;doprnt.c: 689: flag |= 0x400;
  3751  00016E  85C9               	bsf	(sprintf@flag+1)& (0+255),2,b
  3752                           
  3753                           ;doprnt.c: 690: break;
  3754  000170  D0A9               	goto	l5337
  3755  000172                     l5293:
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;doprnt.c: 760: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  3759  000172  51BB               	movf	sprintf@ap& (0+255),w,b
  3760  000174  6ED9               	movwf	fsr2l,c
  3761  000176  6ADA               	clrf	fsr2h,c
  3762  000178  CFDE F0B9          	movff	postinc2,sprintf@cp
  3763  00017C  CFDD F0BA          	movff	postdec2,sprintf@cp+1
  3764                           
  3765                           ; BSR set to: 0
  3766  000180  0E02               	movlw	2
  3767  000182  27BB               	addwf	sprintf@ap& (0+255),f,b
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;doprnt.c: 766: if(!cp)
  3771  000184  51B9               	movf	sprintf@cp& (0+255),w,b
  3772  000186  11BA               	iorwf	(sprintf@cp+1)& (0+255),w,b
  3773  000188  A4D8               	btfss	status,2,c
  3774  00018A  D004               	goto	l5301
  3775                           
  3776                           ; BSR set to: 0
  3777                           ;doprnt.c: 767: cp = "(null)";
  3778  00018C  0EE3               	movlw	low STR_18
  3779  00018E  6FB9               	movwf	sprintf@cp& (0+255),b
  3780  000190  0EFF               	movlw	high STR_18
  3781  000192  6FBA               	movwf	(sprintf@cp+1)& (0+255),b
  3782  000194                     l5301:
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;doprnt.c: 771: len = 0;
  3786  000194  0E00               	movlw	0
  3787  000196  6FBD               	movwf	(sprintf@len+1)& (0+255),b
  3788  000198  0E00               	movlw	0
  3789  00019A  6FBC               	movwf	sprintf@len& (0+255),b
  3790                           
  3791                           ;doprnt.c: 772: while(cp[len])
  3792  00019C  D003               	goto	l5305
  3793  00019E                     l5303:
  3794                           
  3795                           ;doprnt.c: 773: len++;
  3796  00019E  0100               	movlb	0	; () banked
  3797  0001A0  4BBC               	infsnz	sprintf@len& (0+255),f,b
  3798  0001A2  2BBD               	incf	(sprintf@len+1)& (0+255),f,b
  3799  0001A4                     l5305:
  3800                           
  3801                           ; BSR set to: 0
  3802  0001A4  51BC               	movf	sprintf@len& (0+255),w,b
  3803  0001A6  25B9               	addwf	sprintf@cp& (0+255),w,b
  3804  0001A8  6FB0               	movwf	??_sprintf& (0+255),b
  3805  0001AA  51BD               	movf	(sprintf@len+1)& (0+255),w,b
  3806  0001AC  21BA               	addwfc	(sprintf@cp+1)& (0+255),w,b
  3807  0001AE  6FB1               	movwf	(??_sprintf+1)& (0+255),b
  3808  0001B0  C0B0  FFF6         	movff	??_sprintf,tblptrl
  3809  0001B4  C0B1  FFF7         	movff	??_sprintf+1,tblptrh
  3810  0001B8  0E00               	movlw	low (__mediumconst shr (0+16))
  3811  0001BA  6EF8               	movwf	tblptru,c
  3812  0001BC  0E0F               	movlw	(high __ramtop+-1)
  3813  0001BE  64F7               	cpfsgt	tblptrh,c
  3814  0001C0  D003               	bra	u6237
  3815  0001C2  0008               	tblrd		*
  3816  0001C4  50F5               	movf	tablat,w,c
  3817  0001C6  D005               	bra	u6230
  3818  0001C8                     u6237:
  3819  0001C8  CFF6 FFE1          	movff	tblptrl,fsr1l
  3820  0001CC  CFF7 FFE2          	movff	tblptrh,fsr1h
  3821  0001D0  50E7               	movf	indf1,w,c
  3822  0001D2                     u6230:
  3823  0001D2  0900               	iorlw	0
  3824  0001D4  A4D8               	btfss	status,2,c
  3825  0001D6  D7E3               	goto	l5303
  3826                           
  3827                           ;doprnt.c: 779: if(prec && (prec < ((int)len)))
  3828  0001D8  0100               	movlb	0	; () banked
  3829  0001DA  51CF               	movf	sprintf@prec& (0+255),w,b
  3830  0001DC  11D0               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3831  0001DE  B4D8               	btfsc	status,2,c
  3832  0001E0  D00E               	goto	l5313
  3833                           
  3834                           ; BSR set to: 0
  3835  0001E2  51BC               	movf	sprintf@len& (0+255),w,b
  3836  0001E4  5DCF               	subwf	sprintf@prec& (0+255),w,b
  3837  0001E6  51D0               	movf	(sprintf@prec+1)& (0+255),w,b
  3838  0001E8  0A80               	xorlw	128
  3839  0001EA  6FB0               	movwf	??_sprintf& (0+255),b
  3840  0001EC  51BD               	movf	(sprintf@len+1)& (0+255),w,b
  3841  0001EE  0A80               	xorlw	128
  3842  0001F0  59B0               	subwfb	??_sprintf& (0+255),w,b
  3843  0001F2  B0D8               	btfsc	status,0,c
  3844  0001F4  D004               	goto	l5313
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;doprnt.c: 780: len = (unsigned int)prec;
  3848  0001F6  C0CF  F0BC         	movff	sprintf@prec,sprintf@len
  3849  0001FA  C0D0  F0BD         	movff	sprintf@prec+1,sprintf@len+1
  3850  0001FE                     l5313:
  3851                           
  3852                           ; BSR set to: 0
  3853                           ;doprnt.c: 783: if(((unsigned)width) > len)
  3854  0001FE  51CD               	movf	sprintf@width& (0+255),w,b
  3855  000200  5DBC               	subwf	sprintf@len& (0+255),w,b
  3856  000202  51CE               	movf	(sprintf@width+1)& (0+255),w,b
  3857  000204  59BD               	subwfb	(sprintf@len+1)& (0+255),w,b
  3858  000206  B0D8               	btfsc	status,0,c
  3859  000208  D005               	goto	l5317
  3860                           
  3861                           ; BSR set to: 0
  3862                           ;doprnt.c: 784: width -= len;
  3863  00020A  51BC               	movf	sprintf@len& (0+255),w,b
  3864  00020C  5FCD               	subwf	sprintf@width& (0+255),f,b
  3865  00020E  51BD               	movf	(sprintf@len+1)& (0+255),w,b
  3866  000210  5BCE               	subwfb	(sprintf@width+1)& (0+255),f,b
  3867  000212  D00D               	goto	l5323
  3868  000214                     l5317:
  3869                           
  3870                           ; BSR set to: 0
  3871                           ;doprnt.c: 785: else;doprnt.c: 786: width = 0;
  3872  000214  0E00               	movlw	0
  3873  000216  6FCE               	movwf	(sprintf@width+1)& (0+255),b
  3874  000218  0E00               	movlw	0
  3875  00021A  6FCD               	movwf	sprintf@width& (0+255),b
  3876  00021C  D008               	goto	l5323
  3877  00021E                     l5319:
  3878                           
  3879                           ; BSR set to: 0
  3880                           ;doprnt.c: 791: ((*sp++ = (' ')));
  3881  00021E  C0A6  FFD9         	movff	sprintf@sp,fsr2l
  3882  000222  C0A7  FFDA         	movff	sprintf@sp+1,fsr2h
  3883  000226  0E20               	movlw	32
  3884  000228  6EDF               	movwf	indf2,c
  3885                           
  3886                           ; BSR set to: 0
  3887  00022A  4BA6               	infsnz	sprintf@sp& (0+255),f,b
  3888  00022C  2BA7               	incf	(sprintf@sp+1)& (0+255),f,b
  3889  00022E                     l5323:
  3890                           
  3891                           ; BSR set to: 0
  3892  00022E  07CD               	decf	sprintf@width& (0+255),f,b
  3893  000230  A0D8               	btfss	status,0,c
  3894  000232  07CE               	decf	(sprintf@width+1)& (0+255),f,b
  3895  000234  29CD               	incf	sprintf@width& (0+255),w,b
  3896  000236  E1F3               	bnz	l5319
  3897  000238  29CE               	incf	(sprintf@width+1)& (0+255),w,b
  3898  00023A  B4D8               	btfsc	status,2,c
  3899  00023C  D01C               	goto	l5331
  3900  00023E  D7EF               	goto	l5319
  3901  000240                     l5325:
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;doprnt.c: 794: ((*sp++ = (*cp++)));
  3905  000240  C0B9  FFF6         	movff	sprintf@cp,tblptrl
  3906  000244  C0BA  FFF7         	movff	sprintf@cp+1,tblptrh
  3907  000248  0E00               	movlw	low (__mediumconst shr (0+16))
  3908  00024A  6EF8               	movwf	tblptru,c
  3909  00024C  C0A6  FFD9         	movff	sprintf@sp,fsr2l
  3910  000250  C0A7  FFDA         	movff	sprintf@sp+1,fsr2h
  3911  000254  0E0F               	movlw	(high __ramtop+-1)
  3912  000256  64F7               	cpfsgt	tblptrh,c
  3913  000258  D003               	bra	u6297
  3914  00025A  0008               	tblrd		*
  3915  00025C  50F5               	movf	tablat,w,c
  3916  00025E  D005               	bra	u6290
  3917  000260                     u6297:
  3918  000260  CFF6 FFE1          	movff	tblptrl,fsr1l
  3919  000264  CFF7 FFE2          	movff	tblptrh,fsr1h
  3920  000268  50E7               	movf	indf1,w,c
  3921  00026A                     u6290:
  3922  00026A  6EDF               	movwf	indf2,c
  3923  00026C  0100               	movlb	0	; () banked
  3924  00026E  4BB9               	infsnz	sprintf@cp& (0+255),f,b
  3925  000270  2BBA               	incf	(sprintf@cp+1)& (0+255),f,b
  3926                           
  3927                           ; BSR set to: 0
  3928  000272  4BA6               	infsnz	sprintf@sp& (0+255),f,b
  3929  000274  2BA7               	incf	(sprintf@sp+1)& (0+255),f,b
  3930  000276                     l5331:
  3931                           
  3932                           ; BSR set to: 0
  3933  000276  07BC               	decf	sprintf@len& (0+255),f,b
  3934  000278  A0D8               	btfss	status,0,c
  3935  00027A  07BD               	decf	(sprintf@len+1)& (0+255),f,b
  3936  00027C  29BC               	incf	sprintf@len& (0+255),w,b
  3937  00027E  E1E0               	bnz	l5325
  3938  000280  29BD               	incf	(sprintf@len+1)& (0+255),w,b
  3939  000282  B4D8               	btfsc	status,2,c
  3940  000284  EF94  F005         	goto	u6790
  3941  000288  D7DB               	goto	l5325
  3942  00028A                     l5335:
  3943  00028A  C0A8  FFF6         	movff	sprintf@f,tblptrl
  3944  00028E  C0A9  FFF7         	movff	sprintf@f+1,tblptrh
  3945  000292  0100               	movlb	0	; () banked
  3946  000294  4BA8               	infsnz	sprintf@f& (0+255),f,b
  3947  000296  2BA9               	incf	(sprintf@f+1)& (0+255),f,b
  3948  000298                     	if	0	;tblptru may be non-zero
  3949  000298                     	endif
  3950  000298                     	if	0	;tblptru may be non-zero
  3951  000298                     	endif
  3952  000298  0008               	tblrd		*
  3953  00029A  CFF5 F0D1          	movff	tablat,sprintf@c
  3954  00029E  51D1               	movf	sprintf@c& (0+255),w,b
  3955                           
  3956                           ; Switch size 1, requested type "simple"
  3957                           ; Number of cases is 5, Range of values is 0 to 115
  3958                           ; switch strategies available:
  3959                           ; Name         Instructions Cycles
  3960                           ; simple_byte           16     9 (average)
  3961                           ;	Chosen strategy is simple_byte
  3962  0002A0  0A00               	xorlw	0	; case 0
  3963  0002A2  B4D8               	btfsc	status,2,c
  3964  0002A4  EFA1  F005         	goto	u6800
  3965  0002A8  0A64               	xorlw	100	; case 100
  3966  0002AA  B4D8               	btfsc	status,2,c
  3967  0002AC  D00B               	goto	l5337
  3968  0002AE  0A02               	xorlw	2	; case 102
  3969  0002B0  B4D8               	btfsc	status,2,c
  3970  0002B2  D75D               	goto	l5291
  3971  0002B4  0A0F               	xorlw	15	; case 105
  3972  0002B6  B4D8               	btfsc	status,2,c
  3973  0002B8  D005               	goto	l5337
  3974  0002BA  0A1A               	xorlw	26	; case 115
  3975  0002BC  B4D8               	btfsc	status,2,c
  3976  0002BE  D759               	goto	l5293
  3977  0002C0  EF94  F005         	goto	u6790
  3978  0002C4                     l5337:
  3979                           
  3980                           ; BSR set to: 0
  3981                           ;doprnt.c: 851: if(flag & (0x700)) {
  3982  0002C4  0E07               	movlw	7
  3983  0002C6  15C9               	andwf	(sprintf@flag+1)& (0+255),w,b
  3984  0002C8  B4D8               	btfsc	status,2,c
  3985  0002CA  D308               	goto	l5517
  3986                           
  3987                           ; BSR set to: 0
  3988                           ;doprnt.c: 853: if(flag & 0x1000)
  3989  0002CC  A9C9               	btfss	(sprintf@flag+1)& (0+255),4,b
  3990  0002CE  D004               	goto	l5343
  3991                           
  3992                           ; BSR set to: 0
  3993                           ;doprnt.c: 855: prec = 6;
  3994  0002D0  0E00               	movlw	0
  3995  0002D2  6FD0               	movwf	(sprintf@prec+1)& (0+255),b
  3996  0002D4  0E06               	movlw	6
  3997  0002D6  6FCF               	movwf	sprintf@prec& (0+255),b
  3998  0002D8                     l5343:
  3999                           
  4000                           ; BSR set to: 0
  4001                           ;doprnt.c: 856: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4002  0002D8  51BB               	movf	sprintf@ap& (0+255),w,b
  4003  0002DA  6ED9               	movwf	fsr2l,c
  4004  0002DC  6ADA               	clrf	fsr2h,c
  4005  0002DE  CFDE F0CA          	movff	postinc2,sprintf@fval
  4006  0002E2  CFDE F0CB          	movff	postinc2,sprintf@fval+1
  4007  0002E6  CFDD F0CC          	movff	postdec2,sprintf@fval+2
  4008                           
  4009                           ; BSR set to: 0
  4010  0002EA  0E03               	movlw	3
  4011  0002EC  27BB               	addwf	sprintf@ap& (0+255),f,b
  4012                           
  4013                           ; BSR set to: 0
  4014                           ;doprnt.c: 857: if(fval < 0.0) {
  4015  0002EE  AFCC               	btfss	(sprintf@fval+2)& (0+255),7,b
  4016  0002F0  D010               	goto	l5353
  4017                           
  4018                           ; BSR set to: 0
  4019                           ;doprnt.c: 858: fval = -fval;
  4020  0002F2  C0CA  F024         	movff	sprintf@fval,___ftneg@f1
  4021  0002F6  C0CB  F025         	movff	sprintf@fval+1,___ftneg@f1+1
  4022  0002FA  C0CC  F026         	movff	sprintf@fval+2,___ftneg@f1+2
  4023  0002FE  EC32  F015         	call	___ftneg	;wreg free
  4024  000302  C024  F0CA         	movff	?___ftneg,sprintf@fval
  4025  000306  C025  F0CB         	movff	?___ftneg+1,sprintf@fval+1
  4026  00030A  C026  F0CC         	movff	?___ftneg+2,sprintf@fval+2
  4027                           
  4028                           ; BSR set to: 0
  4029                           ;doprnt.c: 859: flag |= 0x03;
  4030  00030E  0E03               	movlw	3
  4031  000310  13C8               	iorwf	sprintf@flag& (0+255),f,b
  4032  000312                     l5353:
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;doprnt.c: 860: };doprnt.c: 861: eexp = 0;
  4036  000312  0E00               	movlw	0
  4037  000314  6FC7               	movwf	(sprintf@eexp+1)& (0+255),b
  4038  000316  0E00               	movlw	0
  4039  000318  6FC6               	movwf	sprintf@eexp& (0+255),b
  4040                           
  4041                           ; BSR set to: 0
  4042                           ;doprnt.c: 862: if( fval!=0) {
  4043  00031A  51CA               	movf	sprintf@fval& (0+255),w,b
  4044  00031C  11CB               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4045  00031E  11CC               	iorwf	(sprintf@fval+2)& (0+255),w,b
  4046  000320  B4D8               	btfsc	status,2,c
  4047  000322  D085               	goto	l5381
  4048                           
  4049                           ; BSR set to: 0
  4050                           ;doprnt.c: 863: (void)(*(&eexp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4051  000324  0E82               	movlw	130
  4052  000326  6FB0               	movwf	??_sprintf& (0+255),b
  4053  000328  0EFF               	movlw	255
  4054  00032A  6FB1               	movwf	(??_sprintf+1)& (0+255),b
  4055  00032C  C0CA  F0B2         	movff	sprintf@fval,??_sprintf+2
  4056  000330  C0CB  F0B3         	movff	sprintf@fval+1,??_sprintf+3
  4057  000334  C0CC  F0B4         	movff	sprintf@fval+2,??_sprintf+4
  4058  000338  C0CD  F0B5         	movff	sprintf@fval+3,??_sprintf+5
  4059  00033C  0E10               	movlw	16
  4060  00033E  D005               	goto	u6350
  4061  000340                     u6355:
  4062  000340  90D8               	bcf	status,0,c
  4063  000342  33B5               	rrcf	(??_sprintf+5)& (0+255),f,b
  4064  000344  33B4               	rrcf	(??_sprintf+4)& (0+255),f,b
  4065  000346  33B3               	rrcf	(??_sprintf+3)& (0+255),f,b
  4066  000348  33B2               	rrcf	(??_sprintf+2)& (0+255),f,b
  4067  00034A                     u6350:
  4068  00034A  2EE8               	decfsz	wreg,f,c
  4069  00034C  D7F9               	goto	u6355
  4070  00034E  51B2               	movf	(??_sprintf+2)& (0+255),w,b
  4071  000350  25B0               	addwf	??_sprintf& (0+255),w,b
  4072  000352  6FC6               	movwf	sprintf@eexp& (0+255),b
  4073  000354  0E00               	movlw	0
  4074  000356  21B1               	addwfc	(??_sprintf+1)& (0+255),w,b
  4075  000358  6FC7               	movwf	(sprintf@eexp+1)& (0+255),b
  4076                           
  4077                           ; BSR set to: 0
  4078                           ;doprnt.c: 864: eexp--;
  4079  00035A  07C6               	decf	sprintf@eexp& (0+255),f,b
  4080  00035C  A0D8               	btfss	status,0,c
  4081  00035E  07C7               	decf	(sprintf@eexp+1)& (0+255),f,b
  4082                           
  4083                           ; BSR set to: 0
  4084                           ;doprnt.c: 865: eexp *= 3;
  4085  000360  C0C6  F024         	movff	sprintf@eexp,___wmul@multiplier
  4086  000364  C0C7  F025         	movff	sprintf@eexp+1,___wmul@multiplier+1
  4087  000368  0E00               	movlw	0
  4088  00036A  6E27               	movwf	(___wmul@multiplicand+1)^0,c
  4089  00036C  0E03               	movlw	3
  4090  00036E  6E26               	movwf	___wmul@multiplicand^0,c
  4091  000370  EC0C  F015         	call	___wmul	;wreg free
  4092  000374  C024  F0C6         	movff	?___wmul,sprintf@eexp
  4093  000378  C025  F0C7         	movff	?___wmul+1,sprintf@eexp+1
  4094                           
  4095                           ;doprnt.c: 866: eexp /= 10;
  4096  00037C  C0C6  F02A         	movff	sprintf@eexp,___awdiv@dividend
  4097  000380  C0C7  F02B         	movff	sprintf@eexp+1,___awdiv@dividend+1
  4098  000384  0E00               	movlw	0
  4099  000386  6E2D               	movwf	(___awdiv@divisor+1)^0,c
  4100  000388  0E0A               	movlw	10
  4101  00038A  6E2C               	movwf	___awdiv@divisor^0,c
  4102  00038C  EC40  F010         	call	___awdiv	;wreg free
  4103  000390  C02A  F0C6         	movff	?___awdiv,sprintf@eexp
  4104  000394  C02B  F0C7         	movff	?___awdiv+1,sprintf@eexp+1
  4105                           
  4106                           ;doprnt.c: 867: if(eexp < 0)
  4107  000398  0100               	movlb	0	; () banked
  4108  00039A  AFC7               	btfss	(sprintf@eexp+1)& (0+255),7,b
  4109  00039C  D003               	goto	l5369
  4110                           
  4111                           ; BSR set to: 0
  4112                           ;doprnt.c: 868: eexp--;
  4113  00039E  07C6               	decf	sprintf@eexp& (0+255),f,b
  4114  0003A0  A0D8               	btfss	status,0,c
  4115  0003A2  07C7               	decf	(sprintf@eexp+1)& (0+255),f,b
  4116  0003A4                     l5369:
  4117                           
  4118                           ; BSR set to: 0
  4119                           ;doprnt.c: 872: tmpval.integ = scale(-eexp);
  4120  0003A4  51C6               	movf	sprintf@eexp& (0+255),w,b
  4121  0003A6  0800               	sublw	0
  4122  0003A8  ECA8  F005         	call	_scale
  4123  0003AC  C080  F0BE         	movff	?_scale,sprintf@tmpval
  4124  0003B0  C081  F0BF         	movff	?_scale+1,sprintf@tmpval+1
  4125  0003B4  C082  F0C0         	movff	?_scale+2,sprintf@tmpval+2
  4126                           
  4127                           ;doprnt.c: 873: tmpval.integ *= fval;
  4128  0003B8  C0BE  F032         	movff	sprintf@tmpval,___ftmul@f1
  4129  0003BC  C0BF  F033         	movff	sprintf@tmpval+1,___ftmul@f1+1
  4130  0003C0  C0C0  F034         	movff	sprintf@tmpval+2,___ftmul@f1+2
  4131  0003C4  C0CA  F035         	movff	sprintf@fval,___ftmul@f2
  4132  0003C8  C0CB  F036         	movff	sprintf@fval+1,___ftmul@f2+1
  4133  0003CC  C0CC  F037         	movff	sprintf@fval+2,___ftmul@f2+2
  4134  0003D0  EC1C  F00D         	call	___ftmul	;wreg free
  4135  0003D4  C032  F0BE         	movff	?___ftmul,sprintf@tmpval
  4136  0003D8  C033  F0BF         	movff	?___ftmul+1,sprintf@tmpval+1
  4137  0003DC  C034  F0C0         	movff	?___ftmul+2,sprintf@tmpval+2
  4138                           
  4139                           ;doprnt.c: 874: if(tmpval.integ < 1.0)
  4140  0003E0  C0BE  F09D         	movff	sprintf@tmpval,___ftge@ff1
  4141  0003E4  C0BF  F09E         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4142  0003E8  C0C0  F09F         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4143  0003EC  0E00               	movlw	0
  4144  0003EE  0100               	movlb	0	; () banked
  4145  0003F0  6FA0               	movwf	___ftge@ff2& (0+255),b
  4146  0003F2  0E80               	movlw	128
  4147  0003F4  6FA1               	movwf	(___ftge@ff2+1)& (0+255),b
  4148  0003F6  0E3F               	movlw	63
  4149  0003F8  6FA2               	movwf	(___ftge@ff2+2)& (0+255),b
  4150  0003FA  ECC3  F010         	call	___ftge	;wreg free
  4151  0003FE  B0D8               	btfsc	status,0,c
  4152  000400  D004               	goto	l5377
  4153                           
  4154                           ; BSR set to: 0
  4155                           ;doprnt.c: 875: eexp--;
  4156  000402  07C6               	decf	sprintf@eexp& (0+255),f,b
  4157  000404  A0D8               	btfss	status,0,c
  4158  000406  07C7               	decf	(sprintf@eexp+1)& (0+255),f,b
  4159  000408  D012               	goto	l5381
  4160  00040A                     l5377:
  4161                           
  4162                           ; BSR set to: 0
  4163                           ;doprnt.c: 876: else if(tmpval.integ >= 10.0)
  4164  00040A  C0BE  F09D         	movff	sprintf@tmpval,___ftge@ff1
  4165  00040E  C0BF  F09E         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4166  000412  C0C0  F09F         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4167  000416  0E00               	movlw	0
  4168  000418  6FA0               	movwf	___ftge@ff2& (0+255),b
  4169  00041A  0E20               	movlw	32
  4170  00041C  6FA1               	movwf	(___ftge@ff2+1)& (0+255),b
  4171  00041E  0E41               	movlw	65
  4172  000420  6FA2               	movwf	(___ftge@ff2+2)& (0+255),b
  4173  000422  ECC3  F010         	call	___ftge	;wreg free
  4174  000426  A0D8               	btfss	status,0,c
  4175  000428  D002               	goto	l5381
  4176                           
  4177                           ; BSR set to: 0
  4178                           ;doprnt.c: 877: eexp++;
  4179  00042A  4BC6               	infsnz	sprintf@eexp& (0+255),f,b
  4180  00042C  2BC7               	incf	(sprintf@eexp+1)& (0+255),f,b
  4181  00042E                     l5381:
  4182                           
  4183                           ; BSR set to: 0
  4184                           ;doprnt.c: 878: };doprnt.c: 1138: if(prec <= 12)
  4185  00042E  BFD0               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4186  000430  D006               	goto	u6390
  4187  000432  51D0               	movf	(sprintf@prec+1)& (0+255),w,b
  4188  000434  E11B               	bnz	l5385
  4189  000436  0E0D               	movlw	13
  4190  000438  5DCF               	subwf	sprintf@prec& (0+255),w,b
  4191  00043A  B0D8               	btfsc	status,0,c
  4192  00043C  D017               	goto	l5385
  4193  00043E                     u6390:
  4194                           
  4195                           ; BSR set to: 0
  4196                           ;doprnt.c: 1139: fval += fround((unsigned int)prec);
  4197  00043E  C0CA  F08B         	movff	sprintf@fval,___ftadd@f1
  4198  000442  C0CB  F08C         	movff	sprintf@fval+1,___ftadd@f1+1
  4199  000446  C0CC  F08D         	movff	sprintf@fval+2,___ftadd@f1+2
  4200  00044A  51CF               	movf	sprintf@prec& (0+255),w,b
  4201  00044C  ECF9  F009         	call	_fround
  4202  000450  C080  F08E         	movff	?_fround,___ftadd@f2
  4203  000454  C081  F08F         	movff	?_fround+1,___ftadd@f2+1
  4204  000458  C082  F090         	movff	?_fround+2,___ftadd@f2+2
  4205  00045C  ECF4  F00A         	call	___ftadd	;wreg free
  4206  000460  C08B  F0CA         	movff	?___ftadd,sprintf@fval
  4207  000464  C08C  F0CB         	movff	?___ftadd+1,sprintf@fval+1
  4208  000468  C08D  F0CC         	movff	?___ftadd+2,sprintf@fval+2
  4209  00046C                     l5385:
  4210                           
  4211                           ;doprnt.c: 1142: if((eexp > 9)||(fval != 0 && (unsigned long)fval == 0 && eexp > 1)) {
  4212  00046C  0100               	movlb	0	; () banked
  4213  00046E  BFC7               	btfsc	(sprintf@eexp+1)& (0+255),7,b
  4214  000470  D006               	goto	u6400
  4215  000472  51C7               	movf	(sprintf@eexp+1)& (0+255),w,b
  4216  000474  E11E               	bnz	l5393
  4217  000476  0E0A               	movlw	10
  4218  000478  5DC6               	subwf	sprintf@eexp& (0+255),w,b
  4219  00047A  B0D8               	btfsc	status,0,c
  4220  00047C  D01A               	goto	u6430
  4221  00047E                     u6400:
  4222                           
  4223                           ; BSR set to: 0
  4224  00047E  51CA               	movf	sprintf@fval& (0+255),w,b
  4225  000480  11CB               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4226  000482  11CC               	iorwf	(sprintf@fval+2)& (0+255),w,b
  4227  000484  B4D8               	btfsc	status,2,c
  4228  000486  D052               	goto	l5407
  4229                           
  4230                           ; BSR set to: 0
  4231  000488  C0CA  F087         	movff	sprintf@fval,___fttol@f1
  4232  00048C  C0CB  F088         	movff	sprintf@fval+1,___fttol@f1+1
  4233  000490  C0CC  F089         	movff	sprintf@fval+2,___fttol@f1+2
  4234  000494  EC83  F00E         	call	___fttol	;wreg free
  4235  000498  5187               	movf	?___fttol& (0+255),w,b
  4236  00049A  1188               	iorwf	(?___fttol+1)& (0+255),w,b
  4237  00049C  1189               	iorwf	(?___fttol+2)& (0+255),w,b
  4238  00049E  118A               	iorwf	(?___fttol+3)& (0+255),w,b
  4239  0004A0  B4D8               	btfsc	status,2,c
  4240                           
  4241                           ; BSR set to: 0
  4242  0004A2  BFC7               	btfsc	(sprintf@eexp+1)& (0+255),7,b
  4243  0004A4  D043               	goto	l5407
  4244  0004A6  51C7               	movf	(sprintf@eexp+1)& (0+255),w,b
  4245  0004A8  E104               	bnz	u6430
  4246  0004AA  0E02               	movlw	2
  4247  0004AC  5DC6               	subwf	sprintf@eexp& (0+255),w,b
  4248  0004AE  A0D8               	btfss	status,0,c
  4249  0004B0  D03D               	goto	l5407
  4250  0004B2                     u6430:
  4251  0004B2                     l5393:
  4252                           
  4253                           ; BSR set to: 0
  4254                           ;doprnt.c: 1146: if(tmpval.integ < 4.294967296){
  4255  0004B2  C0BE  F09D         	movff	sprintf@tmpval,___ftge@ff1
  4256  0004B6  C0BF  F09E         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4257  0004BA  C0C0  F09F         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4258  0004BE  0E70               	movlw	112
  4259  0004C0  6FA0               	movwf	___ftge@ff2& (0+255),b
  4260  0004C2  0E89               	movlw	137
  4261  0004C4  6FA1               	movwf	(___ftge@ff2+1)& (0+255),b
  4262  0004C6  0E40               	movlw	64
  4263  0004C8  6FA2               	movwf	(___ftge@ff2+2)& (0+255),b
  4264  0004CA  ECC3  F010         	call	___ftge	;wreg free
  4265  0004CE  B0D8               	btfsc	status,0,c
  4266  0004D0  D002               	goto	l5397
  4267                           
  4268                           ; BSR set to: 0
  4269                           ;doprnt.c: 1147: eexp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4270  0004D2  0EF7               	movlw	247
  4271  0004D4  D001               	goto	L1
  4272  0004D6                     l5397:
  4273                           
  4274                           ; BSR set to: 0
  4275                           ;doprnt.c: 1149: eexp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4276  0004D6  0EF8               	movlw	248
  4277  0004D8                     L1:
  4278  0004D8  27C6               	addwf	sprintf@eexp& (0+255),f,b
  4279  0004DA  0EFF               	movlw	255
  4280  0004DC  23C7               	addwfc	(sprintf@eexp+1)& (0+255),f,b
  4281                           
  4282                           ; BSR set to: 0
  4283                           ;doprnt.c: 1150: };doprnt.c: 1151: tmpval.integ = scale(eexp);
  4284  0004DE  51C6               	movf	sprintf@eexp& (0+255),w,b
  4285  0004E0  ECA8  F005         	call	_scale
  4286  0004E4  C080  F0BE         	movff	?_scale,sprintf@tmpval
  4287  0004E8  C081  F0BF         	movff	?_scale+1,sprintf@tmpval+1
  4288  0004EC  C082  F0C0         	movff	?_scale+2,sprintf@tmpval+2
  4289                           
  4290                           ;doprnt.c: 1152: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  4291  0004F0  C0CA  F024         	movff	sprintf@fval,__tdiv_to_l_@f1
  4292  0004F4  C0CB  F025         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  4293  0004F8  C0CC  F026         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  4294  0004FC  C0BE  F027         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  4295  000500  C0BF  F028         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  4296  000504  C0C0  F029         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  4297  000508  EC9D  F00C         	call	__tdiv_to_l_	;wreg free
  4298  00050C  C024  F0C2         	movff	?__tdiv_to_l_,sprintf@val
  4299  000510  C025  F0C3         	movff	?__tdiv_to_l_+1,sprintf@val+1
  4300  000514  C026  F0C4         	movff	?__tdiv_to_l_+2,sprintf@val+2
  4301  000518  C027  F0C5         	movff	?__tdiv_to_l_+3,sprintf@val+3
  4302                           
  4303                           ;doprnt.c: 1155: fval = 0.0;
  4304  00051C  0E00               	movlw	0
  4305  00051E  0100               	movlb	0	; () banked
  4306  000520  6FCA               	movwf	sprintf@fval& (0+255),b
  4307  000522  0E00               	movlw	0
  4308  000524  6FCB               	movwf	(sprintf@fval+1)& (0+255),b
  4309  000526  0E00               	movlw	0
  4310  000528  6FCC               	movwf	(sprintf@fval+2)& (0+255),b
  4311                           
  4312                           ;doprnt.c: 1156: } else {
  4313  00052A  D033               	goto	l5411
  4314  00052C                     l5407:
  4315                           
  4316                           ; BSR set to: 0
  4317                           ;doprnt.c: 1157: val = (unsigned long)fval;
  4318  00052C  C0CA  F087         	movff	sprintf@fval,___fttol@f1
  4319  000530  C0CB  F088         	movff	sprintf@fval+1,___fttol@f1+1
  4320  000534  C0CC  F089         	movff	sprintf@fval+2,___fttol@f1+2
  4321  000538  EC83  F00E         	call	___fttol	;wreg free
  4322  00053C  C087  F0C2         	movff	?___fttol,sprintf@val
  4323  000540  C088  F0C3         	movff	?___fttol+1,sprintf@val+1
  4324  000544  C089  F0C4         	movff	?___fttol+2,sprintf@val+2
  4325  000548  C08A  F0C5         	movff	?___fttol+3,sprintf@val+3
  4326                           
  4327                           ;doprnt.c: 1158: fval -= (double)val;
  4328  00054C  C0CA  F097         	movff	sprintf@fval,___ftsub@f1
  4329  000550  C0CB  F098         	movff	sprintf@fval+1,___ftsub@f1+1
  4330  000554  C0CC  F099         	movff	sprintf@fval+2,___ftsub@f1+2
  4331  000558  C0C2  F02C         	movff	sprintf@val,___lltoft@c
  4332  00055C  C0C3  F02D         	movff	sprintf@val+1,___lltoft@c+1
  4333  000560  C0C4  F02E         	movff	sprintf@val+2,___lltoft@c+2
  4334  000564  C0C5  F02F         	movff	sprintf@val+3,___lltoft@c+3
  4335  000568  EC3F  F012         	call	___lltoft	;wreg free
  4336  00056C  C02C  F09A         	movff	?___lltoft,___ftsub@f2
  4337  000570  C02D  F09B         	movff	?___lltoft+1,___ftsub@f2+1
  4338  000574  C02E  F09C         	movff	?___lltoft+2,___ftsub@f2+2
  4339  000578  ECD0  F013         	call	___ftsub	;wreg free
  4340  00057C  C097  F0CA         	movff	?___ftsub,sprintf@fval
  4341  000580  C098  F0CB         	movff	?___ftsub+1,sprintf@fval+1
  4342  000584  C099  F0CC         	movff	?___ftsub+2,sprintf@fval+2
  4343                           
  4344                           ;doprnt.c: 1159: eexp = 0;
  4345  000588  0E00               	movlw	0
  4346  00058A  0100               	movlb	0	; () banked
  4347  00058C  6FC7               	movwf	(sprintf@eexp+1)& (0+255),b
  4348  00058E  0E00               	movlw	0
  4349  000590  6FC6               	movwf	sprintf@eexp& (0+255),b
  4350  000592                     l5411:
  4351                           
  4352                           ; BSR set to: 0
  4353                           ;doprnt.c: 1160: };doprnt.c: 1162: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ;
      +                           c++)
  4354  000592  0E01               	movlw	1
  4355  000594  6FD1               	movwf	sprintf@c& (0+255),b
  4356  000596                     l5417:
  4357                           
  4358                           ; BSR set to: 0
  4359                           ;doprnt.c: 1163: if(val < dpowers[c])
  4360  000596  51D1               	movf	sprintf@c& (0+255),w,b
  4361  000598  0D04               	mullw	4
  4362  00059A  0E33               	movlw	low _dpowers
  4363  00059C  24F3               	addwf	243,w,c
  4364  00059E  6EF6               	movwf	tblptrl,c
  4365  0005A0  0EFF               	movlw	high _dpowers
  4366  0005A2  20F4               	addwfc	244,w,c
  4367  0005A4  6EF7               	movwf	tblptrh,c
  4368  0005A6                     	if	0	;There are less than 3 active tblptr bytes
  4369  0005A6                     	endif
  4370  0005A6  0009               	tblrd		*+
  4371  0005A8  50F5               	movf	tablat,w,c
  4372  0005AA  5DC2               	subwf	sprintf@val& (0+255),w,b
  4373  0005AC  0009               	tblrd		*+
  4374  0005AE  50F5               	movf	tablat,w,c
  4375  0005B0  59C3               	subwfb	(sprintf@val+1)& (0+255),w,b
  4376  0005B2  0009               	tblrd		*+
  4377  0005B4  50F5               	movf	tablat,w,c
  4378  0005B6  59C4               	subwfb	(sprintf@val+2)& (0+255),w,b
  4379  0005B8  0009               	tblrd		*+
  4380  0005BA  50F5               	movf	tablat,w,c
  4381  0005BC  59C5               	subwfb	(sprintf@val+3)& (0+255),w,b
  4382  0005BE  A0D8               	btfss	status,0,c
  4383  0005C0  D005               	goto	u6460
  4384                           
  4385                           ; BSR set to: 0
  4386  0005C2  2BD1               	incf	sprintf@c& (0+255),f,b
  4387                           
  4388                           ; BSR set to: 0
  4389  0005C4  0E0A               	movlw	10
  4390  0005C6  19D1               	xorwf	sprintf@c& (0+255),w,b
  4391  0005C8  A4D8               	btfss	status,2,c
  4392  0005CA  D7E5               	goto	l5417
  4393  0005CC                     u6460:
  4394                           
  4395                           ; BSR set to: 0
  4396                           ;doprnt.c: 1168: width -= prec + c + eexp;
  4397  0005CC  51D1               	movf	sprintf@c& (0+255),w,b
  4398  0005CE  25CF               	addwf	sprintf@prec& (0+255),w,b
  4399  0005D0  6FB0               	movwf	??_sprintf& (0+255),b
  4400  0005D2  0E00               	movlw	0
  4401  0005D4  21D0               	addwfc	(sprintf@prec+1)& (0+255),w,b
  4402  0005D6  6FB1               	movwf	(??_sprintf+1)& (0+255),b
  4403  0005D8  51C6               	movf	sprintf@eexp& (0+255),w,b
  4404  0005DA  27B0               	addwf	??_sprintf& (0+255),f,b
  4405  0005DC  51C7               	movf	(sprintf@eexp+1)& (0+255),w,b
  4406  0005DE  23B1               	addwfc	(??_sprintf+1)& (0+255),f,b
  4407  0005E0  51B0               	movf	??_sprintf& (0+255),w,b
  4408  0005E2  5FCD               	subwf	sprintf@width& (0+255),f,b
  4409  0005E4  51B1               	movf	(??_sprintf+1)& (0+255),w,b
  4410  0005E6  5BCE               	subwfb	(sprintf@width+1)& (0+255),f,b
  4411                           
  4412                           ;doprnt.c: 1169: if(;doprnt.c: 1173: prec)
  4413  0005E8  51CF               	movf	sprintf@prec& (0+255),w,b
  4414  0005EA  11D0               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4415  0005EC  B4D8               	btfsc	status,2,c
  4416  0005EE  D003               	goto	l5429
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;doprnt.c: 1174: width--;
  4420  0005F0  07CD               	decf	sprintf@width& (0+255),f,b
  4421  0005F2  A0D8               	btfss	status,0,c
  4422  0005F4  07CE               	decf	(sprintf@width+1)& (0+255),f,b
  4423  0005F6                     l5429:
  4424                           
  4425                           ; BSR set to: 0
  4426                           ;doprnt.c: 1175: if(flag & 0x03)
  4427  0005F6  C0C8  F0B0         	movff	sprintf@flag,??_sprintf
  4428  0005FA  0E03               	movlw	3
  4429  0005FC  17B0               	andwf	??_sprintf& (0+255),f,b
  4430  0005FE  B4D8               	btfsc	status,2,c
  4431  000600  D003               	goto	l5433
  4432                           
  4433                           ; BSR set to: 0
  4434                           ;doprnt.c: 1176: width--;
  4435  000602  07CD               	decf	sprintf@width& (0+255),f,b
  4436  000604  A0D8               	btfss	status,0,c
  4437  000606  07CE               	decf	(sprintf@width+1)& (0+255),f,b
  4438  000608                     l5433:
  4439                           
  4440                           ; BSR set to: 0
  4441                           ;doprnt.c: 1179: if(flag & 0x04) {
  4442  000608  A5C8               	btfss	sprintf@flag& (0+255),2,b
  4443  00060A  D02D               	goto	l5455
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;doprnt.c: 1183: if(flag & 0x03)
  4447  00060C  C0C8  F0B0         	movff	sprintf@flag,??_sprintf
  4448  000610  0E03               	movlw	3
  4449  000612  17B0               	andwf	??_sprintf& (0+255),f,b
  4450  000614  B4D8               	btfsc	status,2,c
  4451  000616  D014               	goto	l5447
  4452                           
  4453                           ; BSR set to: 0
  4454                           ;doprnt.c: 1185: ((*sp++ = ('-')));
  4455  000618  C0A6  FFD9         	movff	sprintf@sp,fsr2l
  4456  00061C  C0A7  FFDA         	movff	sprintf@sp+1,fsr2h
  4457  000620  0E2D               	movlw	45
  4458  000622  6EDF               	movwf	indf2,c
  4459                           
  4460                           ; BSR set to: 0
  4461  000624  4BA6               	infsnz	sprintf@sp& (0+255),f,b
  4462  000626  2BA7               	incf	(sprintf@sp+1)& (0+255),f,b
  4463  000628  D00B               	goto	l5447
  4464  00062A                     l5441:
  4465                           
  4466                           ; BSR set to: 0
  4467                           ;doprnt.c: 1195: ((*sp++ = ('0')));
  4468  00062A  C0A6  FFD9         	movff	sprintf@sp,fsr2l
  4469  00062E  C0A7  FFDA         	movff	sprintf@sp+1,fsr2h
  4470  000632  0E30               	movlw	48
  4471  000634  6EDF               	movwf	indf2,c
  4472                           
  4473                           ; BSR set to: 0
  4474  000636  4BA6               	infsnz	sprintf@sp& (0+255),f,b
  4475  000638  2BA7               	incf	(sprintf@sp+1)& (0+255),f,b
  4476                           
  4477                           ; BSR set to: 0
  4478                           ;doprnt.c: 1196: width--;
  4479  00063A  07CD               	decf	sprintf@width& (0+255),f,b
  4480  00063C  A0D8               	btfss	status,0,c
  4481  00063E  07CE               	decf	(sprintf@width+1)& (0+255),f,b
  4482  000640                     l5447:
  4483                           
  4484                           ; BSR set to: 0
  4485  000640  BFCE               	btfsc	(sprintf@width+1)& (0+255),7,b
  4486  000642  D06D               	goto	l5471
  4487  000644  51CE               	movf	(sprintf@width+1)& (0+255),w,b
  4488  000646  E1F1               	bnz	l5441
  4489  000648  05CD               	decf	sprintf@width& (0+255),w,b
  4490  00064A  A0D8               	btfss	status,0,c
  4491  00064C  D068               	goto	l5471
  4492  00064E  D7ED               	goto	l5441
  4493  000650                     l5449:
  4494                           
  4495                           ; BSR set to: 0
  4496                           ;doprnt.c: 1207: ((*sp++ = (' ')));
  4497  000650  C0A6  FFD9         	movff	sprintf@sp,fsr2l
  4498  000654  C0A7  FFDA         	movff	sprintf@sp+1,fsr2h
  4499  000658  0E20               	movlw	32
  4500  00065A  6EDF               	movwf	indf2,c
  4501                           
  4502                           ; BSR set to: 0
  4503  00065C  4BA6               	infsnz	sprintf@sp& (0+255),f,b
  4504  00065E  2BA7               	incf	(sprintf@sp+1)& (0+255),f,b
  4505                           
  4506                           ; BSR set to: 0
  4507                           ;doprnt.c: 1208: width--;
  4508  000660  07CD               	decf	sprintf@width& (0+255),f,b
  4509  000662  A0D8               	btfss	status,0,c
  4510  000664  07CE               	decf	(sprintf@width+1)& (0+255),f,b
  4511  000666                     l5455:
  4512                           
  4513                           ; BSR set to: 0
  4514  000666  BFCE               	btfsc	(sprintf@width+1)& (0+255),7,b
  4515  000668  D005               	goto	u6520
  4516  00066A  51CE               	movf	(sprintf@width+1)& (0+255),w,b
  4517  00066C  E1F1               	bnz	l5449
  4518  00066E  05CD               	decf	sprintf@width& (0+255),w,b
  4519  000670  B0D8               	btfsc	status,0,c
  4520  000672  D7EE               	goto	l5449
  4521  000674                     u6520:
  4522                           
  4523                           ; BSR set to: 0
  4524                           ;doprnt.c: 1209: };doprnt.c: 1214: if(flag & 0x03)
  4525  000674  C0C8  F0B0         	movff	sprintf@flag,??_sprintf
  4526  000678  0E03               	movlw	3
  4527  00067A  17B0               	andwf	??_sprintf& (0+255),f,b
  4528  00067C  B4D8               	btfsc	status,2,c
  4529  00067E  D04F               	goto	l5471
  4530                           
  4531                           ; BSR set to: 0
  4532                           ;doprnt.c: 1216: ((*sp++ = ('-')));
  4533  000680  C0A6  FFD9         	movff	sprintf@sp,fsr2l
  4534  000684  C0A7  FFDA         	movff	sprintf@sp+1,fsr2h
  4535  000688  0E2D               	movlw	45
  4536  00068A  D046               	goto	L5
  4537  00068C                     l5463:
  4538                           
  4539                           ; BSR set to: 0
  4540                           ;doprnt.c: 1226: {;doprnt.c: 1227: tmpval.vd = val/dpowers[c];
  4541  00068C  C0C2  F024         	movff	sprintf@val,___lldiv@dividend
  4542  000690  C0C3  F025         	movff	sprintf@val+1,___lldiv@dividend+1
  4543  000694  C0C4  F026         	movff	sprintf@val+2,___lldiv@dividend+2
  4544  000698  C0C5  F027         	movff	sprintf@val+3,___lldiv@dividend+3
  4545  00069C  51D1               	movf	sprintf@c& (0+255),w,b
  4546  00069E  0D04               	mullw	4
  4547  0006A0  0E33               	movlw	low _dpowers
  4548  0006A2  24F3               	addwf	243,w,c
  4549  0006A4  6EF6               	movwf	tblptrl,c
  4550  0006A6  0EFF               	movlw	high _dpowers
  4551  0006A8  20F4               	addwfc	244,w,c
  4552  0006AA  6EF7               	movwf	tblptrh,c
  4553  0006AC                     	if	0	;There are less than 3 active tblptr bytes
  4554  0006AC                     	endif
  4555  0006AC  0009               	tblrd		*+
  4556  0006AE  CFF5 F028          	movff	tablat,___lldiv@divisor
  4557  0006B2  0009               	tblrd		*+
  4558  0006B4  CFF5 F029          	movff	tablat,___lldiv@divisor+1
  4559  0006B8  0009               	tblrd		*+
  4560  0006BA  CFF5 F02A          	movff	tablat,___lldiv@divisor+2
  4561  0006BE  000A               	tblrd		*-
  4562  0006C0  CFF5 F02B          	movff	tablat,___lldiv@divisor+3
  4563  0006C4  EC82  F010         	call	___lldiv	;wreg free
  4564  0006C8  C024  F0BE         	movff	?___lldiv,sprintf@tmpval
  4565  0006CC  C025  F0BF         	movff	?___lldiv+1,sprintf@tmpval+1
  4566  0006D0  C026  F0C0         	movff	?___lldiv+2,sprintf@tmpval+2
  4567  0006D4  C027  F0C1         	movff	?___lldiv+3,sprintf@tmpval+3
  4568                           
  4569                           ; BSR set to: 0
  4570                           ;doprnt.c: 1228: tmpval.vd %= 10;
  4571  0006D8  C0BE  F031         	movff	sprintf@tmpval,___llmod@dividend
  4572  0006DC  C0BF  F032         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4573  0006E0  C0C0  F033         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4574  0006E4  C0C1  F034         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4575  0006E8  0E0A               	movlw	10
  4576  0006EA  6E35               	movwf	___llmod@divisor^0,c
  4577  0006EC  0E00               	movlw	0
  4578  0006EE  6E36               	movwf	(___llmod@divisor+1)^0,c
  4579  0006F0  0E00               	movlw	0
  4580  0006F2  6E37               	movwf	(___llmod@divisor+2)^0,c
  4581  0006F4  0E00               	movlw	0
  4582  0006F6  6E38               	movwf	(___llmod@divisor+3)^0,c
  4583  0006F8  ECDD  F011         	call	___llmod	;wreg free
  4584  0006FC  C031  F0BE         	movff	?___llmod,sprintf@tmpval
  4585  000700  C032  F0BF         	movff	?___llmod+1,sprintf@tmpval+1
  4586  000704  C033  F0C0         	movff	?___llmod+2,sprintf@tmpval+2
  4587  000708  C034  F0C1         	movff	?___llmod+3,sprintf@tmpval+3
  4588                           
  4589                           ; BSR set to: 0
  4590                           ;doprnt.c: 1229: ((*sp++ = ('0' + tmpval.vd)));
  4591  00070C  51BE               	movf	sprintf@tmpval& (0+255),w,b
  4592  00070E  0F30               	addlw	48
  4593  000710  C0A6  FFD9         	movff	sprintf@sp,fsr2l
  4594  000714  C0A7  FFDA         	movff	sprintf@sp+1,fsr2h
  4595  000718                     L5:
  4596  000718  6EDF               	movwf	indf2,c
  4597                           
  4598                           ; BSR set to: 0
  4599  00071A  4BA6               	infsnz	sprintf@sp& (0+255),f,b
  4600  00071C  2BA7               	incf	(sprintf@sp+1)& (0+255),f,b
  4601  00071E                     l5471:
  4602                           
  4603                           ; BSR set to: 0
  4604  00071E  07D1               	decf	sprintf@c& (0+255),f,b
  4605  000720  29D1               	incf	sprintf@c& (0+255),w,b
  4606  000722  B4D8               	btfsc	status,2,c
  4607  000724  D00C               	goto	l5479
  4608  000726  D7B2               	goto	l5463
  4609  000728                     l5473:
  4610                           
  4611                           ; BSR set to: 0
  4612                           ;doprnt.c: 1234: ((*sp++ = ('0')));
  4613  000728  C0A6  FFD9         	movff	sprintf@sp,fsr2l
  4614  00072C  C0A7  FFDA         	movff	sprintf@sp+1,fsr2h
  4615  000730  0E30               	movlw	48
  4616  000732  6EDF               	movwf	indf2,c
  4617                           
  4618                           ; BSR set to: 0
  4619  000734  4BA6               	infsnz	sprintf@sp& (0+255),f,b
  4620  000736  2BA7               	incf	(sprintf@sp+1)& (0+255),f,b
  4621                           
  4622                           ; BSR set to: 0
  4623                           ;doprnt.c: 1235: eexp--;
  4624  000738  07C6               	decf	sprintf@eexp& (0+255),f,b
  4625  00073A  A0D8               	btfss	status,0,c
  4626  00073C  07C7               	decf	(sprintf@eexp+1)& (0+255),f,b
  4627  00073E                     l5479:
  4628                           
  4629                           ; BSR set to: 0
  4630  00073E  BFC7               	btfsc	(sprintf@eexp+1)& (0+255),7,b
  4631  000740  D005               	goto	u6550
  4632  000742  51C7               	movf	(sprintf@eexp+1)& (0+255),w,b
  4633  000744  E1F1               	bnz	l5473
  4634  000746  05C6               	decf	sprintf@eexp& (0+255),w,b
  4635  000748  B0D8               	btfsc	status,0,c
  4636  00074A  D7EE               	goto	l5473
  4637  00074C                     u6550:
  4638                           
  4639                           ; BSR set to: 0
  4640                           ;doprnt.c: 1236: };doprnt.c: 1237: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2)
      +                          )
  4641  00074C  BFD0               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4642  00074E  D009               	goto	l511
  4643  000750  51D0               	movf	(sprintf@prec+1)& (0+255),w,b
  4644  000752  E104               	bnz	u6560
  4645  000754  0E09               	movlw	9
  4646  000756  5DCF               	subwf	sprintf@prec& (0+255),w,b
  4647  000758  A0D8               	btfss	status,0,c
  4648  00075A  D003               	goto	l511
  4649  00075C                     u6560:
  4650                           
  4651                           ; BSR set to: 0
  4652                           ;doprnt.c: 1238: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4653  00075C  0E08               	movlw	8
  4654  00075E  6FD1               	movwf	sprintf@c& (0+255),b
  4655  000760  D002               	goto	l5485
  4656  000762                     l511:
  4657                           
  4658                           ; BSR set to: 0
  4659                           ;doprnt.c: 1239: else;doprnt.c: 1240: c = (char)prec;
  4660  000762  C0CF  F0D1         	movff	sprintf@prec,sprintf@c
  4661  000766                     l5485:
  4662                           
  4663                           ; BSR set to: 0
  4664                           ;doprnt.c: 1241: prec -= (int)c;
  4665  000766  51D1               	movf	sprintf@c& (0+255),w,b
  4666  000768  5FCF               	subwf	sprintf@prec& (0+255),f,b
  4667  00076A  0E00               	movlw	0
  4668  00076C  5BD0               	subwfb	(sprintf@prec+1)& (0+255),f,b
  4669                           
  4670                           ; BSR set to: 0
  4671                           ;doprnt.c: 1245: if(c)
  4672  00076E  51D1               	movf	sprintf@c& (0+255),w,b
  4673  000770  B4D8               	btfsc	status,2,c
  4674  000772  D008               	goto	l5493
  4675                           
  4676                           ; BSR set to: 0
  4677                           ;doprnt.c: 1247: ((*sp++ = ('.')));
  4678  000774  C0A6  FFD9         	movff	sprintf@sp,fsr2l
  4679  000778  C0A7  FFDA         	movff	sprintf@sp+1,fsr2h
  4680  00077C  0E2E               	movlw	46
  4681  00077E  6EDF               	movwf	indf2,c
  4682                           
  4683                           ; BSR set to: 0
  4684  000780  4BA6               	infsnz	sprintf@sp& (0+255),f,b
  4685  000782  2BA7               	incf	(sprintf@sp+1)& (0+255),f,b
  4686  000784                     l5493:
  4687                           
  4688                           ; BSR set to: 0
  4689                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
  4690  000784  51D1               	movf	sprintf@c& (0+255),w,b
  4691  000786  ECA8  F005         	call	_scale
  4692  00078A  C080  F0B6         	movff	?_scale,_sprintf$1845
  4693  00078E  C081  F0B7         	movff	?_scale+1,_sprintf$1845+1
  4694  000792  C082  F0B8         	movff	?_scale+2,_sprintf$1845+2
  4695                           
  4696                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
  4697  000796  C0CA  F035         	movff	sprintf@fval,___ftmul@f2
  4698  00079A  C0CB  F036         	movff	sprintf@fval+1,___ftmul@f2+1
  4699  00079E  C0CC  F037         	movff	sprintf@fval+2,___ftmul@f2+2
  4700  0007A2  C0B6  F032         	movff	_sprintf$1845,___ftmul@f1
  4701  0007A6  C0B7  F033         	movff	_sprintf$1845+1,___ftmul@f1+1
  4702  0007AA  C0B8  F034         	movff	_sprintf$1845+2,___ftmul@f1+2
  4703  0007AE  EC1C  F00D         	call	___ftmul	;wreg free
  4704  0007B2  C032  F087         	movff	?___ftmul,___fttol@f1
  4705  0007B6  C033  F088         	movff	?___ftmul+1,___fttol@f1+1
  4706  0007BA  C034  F089         	movff	?___ftmul+2,___fttol@f1+2
  4707  0007BE  EC83  F00E         	call	___fttol	;wreg free
  4708  0007C2  C087  F0C2         	movff	?___fttol,sprintf@val
  4709  0007C6  C088  F0C3         	movff	?___fttol+1,sprintf@val+1
  4710  0007CA  C089  F0C4         	movff	?___fttol+2,sprintf@val+2
  4711  0007CE  C08A  F0C5         	movff	?___fttol+3,sprintf@val+3
  4712                           
  4713                           ;doprnt.c: 1254: while(c--) {
  4714  0007D2  D06F               	goto	l5507
  4715  0007D4                     l5497:
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;doprnt.c: 1255: tmpval.vd = val/dpowers[c];
  4719  0007D4  C0C2  F024         	movff	sprintf@val,___lldiv@dividend
  4720  0007D8  C0C3  F025         	movff	sprintf@val+1,___lldiv@dividend+1
  4721  0007DC  C0C4  F026         	movff	sprintf@val+2,___lldiv@dividend+2
  4722  0007E0  C0C5  F027         	movff	sprintf@val+3,___lldiv@dividend+3
  4723  0007E4  51D1               	movf	sprintf@c& (0+255),w,b
  4724  0007E6  0D04               	mullw	4
  4725  0007E8  0E33               	movlw	low _dpowers
  4726  0007EA  24F3               	addwf	243,w,c
  4727  0007EC  6EF6               	movwf	tblptrl,c
  4728  0007EE  0EFF               	movlw	high _dpowers
  4729  0007F0  20F4               	addwfc	244,w,c
  4730  0007F2  6EF7               	movwf	tblptrh,c
  4731  0007F4                     	if	0	;There are less than 3 active tblptr bytes
  4732  0007F4                     	endif
  4733  0007F4  0009               	tblrd		*+
  4734  0007F6  CFF5 F028          	movff	tablat,___lldiv@divisor
  4735  0007FA  0009               	tblrd		*+
  4736  0007FC  CFF5 F029          	movff	tablat,___lldiv@divisor+1
  4737  000800  0009               	tblrd		*+
  4738  000802  CFF5 F02A          	movff	tablat,___lldiv@divisor+2
  4739  000806  000A               	tblrd		*-
  4740  000808  CFF5 F02B          	movff	tablat,___lldiv@divisor+3
  4741  00080C  EC82  F010         	call	___lldiv	;wreg free
  4742  000810  C024  F0BE         	movff	?___lldiv,sprintf@tmpval
  4743  000814  C025  F0BF         	movff	?___lldiv+1,sprintf@tmpval+1
  4744  000818  C026  F0C0         	movff	?___lldiv+2,sprintf@tmpval+2
  4745  00081C  C027  F0C1         	movff	?___lldiv+3,sprintf@tmpval+3
  4746                           
  4747                           ; BSR set to: 0
  4748                           ;doprnt.c: 1256: tmpval.vd %= 10;
  4749  000820  C0BE  F031         	movff	sprintf@tmpval,___llmod@dividend
  4750  000824  C0BF  F032         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4751  000828  C0C0  F033         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4752  00082C  C0C1  F034         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4753  000830  0E0A               	movlw	10
  4754  000832  6E35               	movwf	___llmod@divisor^0,c
  4755  000834  0E00               	movlw	0
  4756  000836  6E36               	movwf	(___llmod@divisor+1)^0,c
  4757  000838  0E00               	movlw	0
  4758  00083A  6E37               	movwf	(___llmod@divisor+2)^0,c
  4759  00083C  0E00               	movlw	0
  4760  00083E  6E38               	movwf	(___llmod@divisor+3)^0,c
  4761  000840  ECDD  F011         	call	___llmod	;wreg free
  4762  000844  C031  F0BE         	movff	?___llmod,sprintf@tmpval
  4763  000848  C032  F0BF         	movff	?___llmod+1,sprintf@tmpval+1
  4764  00084C  C033  F0C0         	movff	?___llmod+2,sprintf@tmpval+2
  4765  000850  C034  F0C1         	movff	?___llmod+3,sprintf@tmpval+3
  4766                           
  4767                           ; BSR set to: 0
  4768                           ;doprnt.c: 1257: ((*sp++ = ('0' + tmpval.vd)));
  4769  000854  51BE               	movf	sprintf@tmpval& (0+255),w,b
  4770  000856  0F30               	addlw	48
  4771  000858  C0A6  FFD9         	movff	sprintf@sp,fsr2l
  4772  00085C  C0A7  FFDA         	movff	sprintf@sp+1,fsr2h
  4773  000860  6EDF               	movwf	indf2,c
  4774                           
  4775                           ; BSR set to: 0
  4776  000862  4BA6               	infsnz	sprintf@sp& (0+255),f,b
  4777  000864  2BA7               	incf	(sprintf@sp+1)& (0+255),f,b
  4778                           
  4779                           ; BSR set to: 0
  4780                           ;doprnt.c: 1258: val %= dpowers[c];
  4781  000866  C0C2  F031         	movff	sprintf@val,___llmod@dividend
  4782  00086A  C0C3  F032         	movff	sprintf@val+1,___llmod@dividend+1
  4783  00086E  C0C4  F033         	movff	sprintf@val+2,___llmod@dividend+2
  4784  000872  C0C5  F034         	movff	sprintf@val+3,___llmod@dividend+3
  4785  000876  51D1               	movf	sprintf@c& (0+255),w,b
  4786  000878  0D04               	mullw	4
  4787  00087A  0E33               	movlw	low _dpowers
  4788  00087C  24F3               	addwf	243,w,c
  4789  00087E  6EF6               	movwf	tblptrl,c
  4790  000880  0EFF               	movlw	high _dpowers
  4791  000882  20F4               	addwfc	244,w,c
  4792  000884  6EF7               	movwf	tblptrh,c
  4793  000886                     	if	0	;There are less than 3 active tblptr bytes
  4794  000886                     	endif
  4795  000886  0009               	tblrd		*+
  4796  000888  CFF5 F035          	movff	tablat,___llmod@divisor
  4797  00088C  0009               	tblrd		*+
  4798  00088E  CFF5 F036          	movff	tablat,___llmod@divisor+1
  4799  000892  0009               	tblrd		*+
  4800  000894  CFF5 F037          	movff	tablat,___llmod@divisor+2
  4801  000898  000A               	tblrd		*-
  4802  00089A  CFF5 F038          	movff	tablat,___llmod@divisor+3
  4803  00089E  ECDD  F011         	call	___llmod	;wreg free
  4804  0008A2  C031  F0C2         	movff	?___llmod,sprintf@val
  4805  0008A6  C032  F0C3         	movff	?___llmod+1,sprintf@val+1
  4806  0008AA  C033  F0C4         	movff	?___llmod+2,sprintf@val+2
  4807  0008AE  C034  F0C5         	movff	?___llmod+3,sprintf@val+3
  4808  0008B2                     l5507:
  4809                           
  4810                           ; BSR set to: 0
  4811  0008B2  07D1               	decf	sprintf@c& (0+255),f,b
  4812  0008B4  29D1               	incf	sprintf@c& (0+255),w,b
  4813  0008B6  B4D8               	btfsc	status,2,c
  4814  0008B8  D00C               	goto	l5515
  4815  0008BA  D78C               	goto	l5497
  4816  0008BC                     l5509:
  4817                           
  4818                           ; BSR set to: 0
  4819                           ;doprnt.c: 1262: ((*sp++ = ('0')));
  4820  0008BC  C0A6  FFD9         	movff	sprintf@sp,fsr2l
  4821  0008C0  C0A7  FFDA         	movff	sprintf@sp+1,fsr2h
  4822  0008C4  0E30               	movlw	48
  4823  0008C6  6EDF               	movwf	indf2,c
  4824                           
  4825                           ; BSR set to: 0
  4826  0008C8  4BA6               	infsnz	sprintf@sp& (0+255),f,b
  4827  0008CA  2BA7               	incf	(sprintf@sp+1)& (0+255),f,b
  4828                           
  4829                           ; BSR set to: 0
  4830                           ;doprnt.c: 1263: prec--;
  4831  0008CC  07CF               	decf	sprintf@prec& (0+255),f,b
  4832  0008CE  A0D8               	btfss	status,0,c
  4833  0008D0  07D0               	decf	(sprintf@prec+1)& (0+255),f,b
  4834  0008D2                     l5515:
  4835                           
  4836                           ; BSR set to: 0
  4837  0008D2  51CF               	movf	sprintf@prec& (0+255),w,b
  4838  0008D4  11D0               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4839  0008D6  B4D8               	btfsc	status,2,c
  4840  0008D8  D127               	goto	u6790
  4841  0008DA  D7F0               	goto	l5509
  4842  0008DC                     l5517:
  4843                           
  4844                           ; BSR set to: 0
  4845                           ;doprnt.c: 1272: };doprnt.c: 1279: {;doprnt.c: 1285: val = (unsigned long)(*(int *)__va_
      +                          arg((*(int **)ap), (int)0));
  4846  0008DC  51BB               	movf	sprintf@ap& (0+255),w,b
  4847  0008DE  6ED9               	movwf	fsr2l,c
  4848  0008E0  6ADA               	clrf	fsr2h,c
  4849  0008E2  CFDE F0C2          	movff	postinc2,sprintf@val
  4850  0008E6  CFDD F0C3          	movff	postdec2,sprintf@val+1
  4851  0008EA  0E00               	movlw	0
  4852  0008EC  BFC3               	btfsc	(sprintf@val+1)& (0+255),7,b
  4853  0008EE  0EFF               	movlw	-1
  4854  0008F0  6FC4               	movwf	(sprintf@val+2)& (0+255),b
  4855  0008F2  6FC5               	movwf	(sprintf@val+3)& (0+255),b
  4856                           
  4857                           ; BSR set to: 0
  4858  0008F4  0E02               	movlw	2
  4859  0008F6  27BB               	addwf	sprintf@ap& (0+255),f,b
  4860                           
  4861                           ; BSR set to: 0
  4862                           ;doprnt.c: 1287: if((long)val < 0) {
  4863  0008F8  AFC5               	btfss	(sprintf@val+3)& (0+255),7,b
  4864  0008FA  D00A               	goto	l5527
  4865                           
  4866                           ; BSR set to: 0
  4867                           ;doprnt.c: 1288: flag |= 0x03;
  4868  0008FC  0E03               	movlw	3
  4869  0008FE  13C8               	iorwf	sprintf@flag& (0+255),f,b
  4870                           
  4871                           ; BSR set to: 0
  4872                           ;doprnt.c: 1289: val = -val;
  4873  000900  1FC5               	comf	(sprintf@val+3)& (0+255),f,b
  4874  000902  1FC4               	comf	(sprintf@val+2)& (0+255),f,b
  4875  000904  1FC3               	comf	(sprintf@val+1)& (0+255),f,b
  4876  000906  6DC2               	negf	sprintf@val& (0+255),b
  4877  000908  0E00               	movlw	0
  4878  00090A  23C3               	addwfc	(sprintf@val+1)& (0+255),f,b
  4879  00090C  23C4               	addwfc	(sprintf@val+2)& (0+255),f,b
  4880  00090E  23C5               	addwfc	(sprintf@val+3)& (0+255),f,b
  4881  000910                     l5527:
  4882                           
  4883                           ; BSR set to: 0
  4884                           ;doprnt.c: 1290: };doprnt.c: 1292: };doprnt.c: 1316: if(prec == 0 && val == 0)
  4885  000910  51CF               	movf	sprintf@prec& (0+255),w,b
  4886  000912  11D0               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4887  000914  A4D8               	btfss	status,2,c
  4888  000916  D008               	goto	l5533
  4889                           
  4890                           ; BSR set to: 0
  4891  000918  51C2               	movf	sprintf@val& (0+255),w,b
  4892  00091A  11C3               	iorwf	(sprintf@val+1)& (0+255),w,b
  4893  00091C  11C4               	iorwf	(sprintf@val+2)& (0+255),w,b
  4894  00091E  11C5               	iorwf	(sprintf@val+3)& (0+255),w,b
  4895  000920  A4D8               	btfss	status,2,c
  4896  000922  D002               	goto	l5533
  4897                           
  4898                           ; BSR set to: 0
  4899                           ;doprnt.c: 1317: prec++;
  4900  000924  4BCF               	infsnz	sprintf@prec& (0+255),f,b
  4901  000926  2BD0               	incf	(sprintf@prec+1)& (0+255),f,b
  4902  000928                     l5533:
  4903                           
  4904                           ; BSR set to: 0
  4905                           ;doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4906  000928  0E01               	movlw	1
  4907  00092A  6FD1               	movwf	sprintf@c& (0+255),b
  4908  00092C                     l5539:
  4909                           
  4910                           ; BSR set to: 0
  4911                           ;doprnt.c: 1332: if(val < dpowers[c])
  4912  00092C  51D1               	movf	sprintf@c& (0+255),w,b
  4913  00092E  0D04               	mullw	4
  4914  000930  0E33               	movlw	low _dpowers
  4915  000932  24F3               	addwf	243,w,c
  4916  000934  6EF6               	movwf	tblptrl,c
  4917  000936  0EFF               	movlw	high _dpowers
  4918  000938  20F4               	addwfc	244,w,c
  4919  00093A  6EF7               	movwf	tblptrh,c
  4920  00093C                     	if	0	;There are less than 3 active tblptr bytes
  4921  00093C                     	endif
  4922  00093C  0009               	tblrd		*+
  4923  00093E  50F5               	movf	tablat,w,c
  4924  000940  5DC2               	subwf	sprintf@val& (0+255),w,b
  4925  000942  0009               	tblrd		*+
  4926  000944  50F5               	movf	tablat,w,c
  4927  000946  59C3               	subwfb	(sprintf@val+1)& (0+255),w,b
  4928  000948  0009               	tblrd		*+
  4929  00094A  50F5               	movf	tablat,w,c
  4930  00094C  59C4               	subwfb	(sprintf@val+2)& (0+255),w,b
  4931  00094E  0009               	tblrd		*+
  4932  000950  50F5               	movf	tablat,w,c
  4933  000952  59C5               	subwfb	(sprintf@val+3)& (0+255),w,b
  4934  000954  A0D8               	btfss	status,0,c
  4935  000956  D005               	goto	u6640
  4936                           
  4937                           ; BSR set to: 0
  4938  000958  2BD1               	incf	sprintf@c& (0+255),f,b
  4939                           
  4940                           ; BSR set to: 0
  4941  00095A  0E0A               	movlw	10
  4942  00095C  19D1               	xorwf	sprintf@c& (0+255),w,b
  4943  00095E  A4D8               	btfss	status,2,c
  4944  000960  D7E5               	goto	l5539
  4945  000962                     u6640:
  4946                           
  4947                           ; BSR set to: 0
  4948                           ;doprnt.c: 1365: if(c < prec)
  4949  000962  51D1               	movf	sprintf@c& (0+255),w,b
  4950  000964  6FB0               	movwf	??_sprintf& (0+255),b
  4951  000966  6BB1               	clrf	(??_sprintf+1)& (0+255),b
  4952  000968  51CF               	movf	sprintf@prec& (0+255),w,b
  4953  00096A  5DB0               	subwf	??_sprintf& (0+255),w,b
  4954  00096C  51B1               	movf	(??_sprintf+1)& (0+255),w,b
  4955  00096E  0A80               	xorlw	128
  4956  000970  6FB2               	movwf	(??_sprintf+2)& (0+255),b
  4957  000972  51D0               	movf	(sprintf@prec+1)& (0+255),w,b
  4958  000974  0A80               	xorlw	128
  4959  000976  59B2               	subwfb	(??_sprintf+2)& (0+255),w,b
  4960  000978  B0D8               	btfsc	status,0,c
  4961  00097A  D003               	goto	l5551
  4962                           
  4963                           ; BSR set to: 0
  4964                           ;doprnt.c: 1366: c = (char)prec;
  4965  00097C  C0CF  F0D1         	movff	sprintf@prec,sprintf@c
  4966  000980  D010               	goto	l5555
  4967  000982                     l5551:
  4968                           
  4969                           ; BSR set to: 0
  4970                           ;doprnt.c: 1367: else if(prec < c)
  4971  000982  51D1               	movf	sprintf@c& (0+255),w,b
  4972  000984  6FB0               	movwf	??_sprintf& (0+255),b
  4973  000986  6BB1               	clrf	(??_sprintf+1)& (0+255),b
  4974  000988  51B0               	movf	??_sprintf& (0+255),w,b
  4975  00098A  5DCF               	subwf	sprintf@prec& (0+255),w,b
  4976  00098C  51D0               	movf	(sprintf@prec+1)& (0+255),w,b
  4977  00098E  0A80               	xorlw	128
  4978  000990  6FB2               	movwf	(??_sprintf+2)& (0+255),b
  4979  000992  51B1               	movf	(??_sprintf+1)& (0+255),w,b
  4980  000994  0A80               	xorlw	128
  4981  000996  59B2               	subwfb	(??_sprintf+2)& (0+255),w,b
  4982  000998  B0D8               	btfsc	status,0,c
  4983  00099A  D003               	goto	l5555
  4984                           
  4985                           ; BSR set to: 0
  4986                           ;doprnt.c: 1368: prec = c;
  4987  00099C  C0D1  F0CF         	movff	sprintf@c,sprintf@prec
  4988  0009A0  6BD0               	clrf	(sprintf@prec+1)& (0+255),b
  4989  0009A2                     l5555:
  4990                           
  4991                           ; BSR set to: 0
  4992                           ;doprnt.c: 1371: if(width && flag & 0x03)
  4993  0009A2  51CD               	movf	sprintf@width& (0+255),w,b
  4994  0009A4  11CE               	iorwf	(sprintf@width+1)& (0+255),w,b
  4995  0009A6  B4D8               	btfsc	status,2,c
  4996  0009A8  D009               	goto	l5561
  4997                           
  4998                           ; BSR set to: 0
  4999  0009AA  C0C8  F0B0         	movff	sprintf@flag,??_sprintf
  5000  0009AE  0E03               	movlw	3
  5001  0009B0  17B0               	andwf	??_sprintf& (0+255),f,b
  5002  0009B2  B4D8               	btfsc	status,2,c
  5003  0009B4  D003               	goto	l5561
  5004                           
  5005                           ; BSR set to: 0
  5006                           ;doprnt.c: 1372: width--;
  5007  0009B6  07CD               	decf	sprintf@width& (0+255),f,b
  5008  0009B8  A0D8               	btfss	status,0,c
  5009  0009BA  07CE               	decf	(sprintf@width+1)& (0+255),f,b
  5010  0009BC                     l5561:
  5011                           
  5012                           ; BSR set to: 0
  5013                           ;doprnt.c: 1374: if(flag & 0x4000) {
  5014  0009BC  ADC9               	btfss	(sprintf@flag+1)& (0+255),6,b
  5015  0009BE  D013               	goto	l5569
  5016                           
  5017                           ; BSR set to: 0
  5018                           ;doprnt.c: 1375: if(width > prec)
  5019  0009C0  51CD               	movf	sprintf@width& (0+255),w,b
  5020  0009C2  5DCF               	subwf	sprintf@prec& (0+255),w,b
  5021  0009C4  51D0               	movf	(sprintf@prec+1)& (0+255),w,b
  5022  0009C6  0A80               	xorlw	128
  5023  0009C8  6FB0               	movwf	??_sprintf& (0+255),b
  5024  0009CA  51CE               	movf	(sprintf@width+1)& (0+255),w,b
  5025  0009CC  0A80               	xorlw	128
  5026  0009CE  59B0               	subwfb	??_sprintf& (0+255),w,b
  5027  0009D0  B0D8               	btfsc	status,0,c
  5028  0009D2  D005               	goto	l5567
  5029                           
  5030                           ; BSR set to: 0
  5031                           ;doprnt.c: 1376: width -= prec;
  5032  0009D4  51CF               	movf	sprintf@prec& (0+255),w,b
  5033  0009D6  5FCD               	subwf	sprintf@width& (0+255),f,b
  5034  0009D8  51D0               	movf	(sprintf@prec+1)& (0+255),w,b
  5035  0009DA  5BCE               	subwfb	(sprintf@width+1)& (0+255),f,b
  5036  0009DC  D004               	goto	l5569
  5037  0009DE                     l5567:
  5038                           
  5039                           ; BSR set to: 0
  5040                           ;doprnt.c: 1377: else;doprnt.c: 1378: width = 0;
  5041  0009DE  0E00               	movlw	0
  5042  0009E0  6FCE               	movwf	(sprintf@width+1)& (0+255),b
  5043  0009E2  0E00               	movlw	0
  5044  0009E4  6FCD               	movwf	sprintf@width& (0+255),b
  5045  0009E6                     l5569:
  5046                           
  5047                           ; BSR set to: 0
  5048                           ;doprnt.c: 1379: };doprnt.c: 1407: if(width > c)
  5049  0009E6  51D1               	movf	sprintf@c& (0+255),w,b
  5050  0009E8  6FB0               	movwf	??_sprintf& (0+255),b
  5051  0009EA  6BB1               	clrf	(??_sprintf+1)& (0+255),b
  5052  0009EC  51CD               	movf	sprintf@width& (0+255),w,b
  5053  0009EE  5DB0               	subwf	??_sprintf& (0+255),w,b
  5054  0009F0  51B1               	movf	(??_sprintf+1)& (0+255),w,b
  5055  0009F2  0A80               	xorlw	128
  5056  0009F4  6FB2               	movwf	(??_sprintf+2)& (0+255),b
  5057  0009F6  51CE               	movf	(sprintf@width+1)& (0+255),w,b
  5058  0009F8  0A80               	xorlw	128
  5059  0009FA  59B2               	subwfb	(??_sprintf+2)& (0+255),w,b
  5060  0009FC  B0D8               	btfsc	status,0,c
  5061  0009FE  D005               	goto	l5573
  5062                           
  5063                           ; BSR set to: 0
  5064                           ;doprnt.c: 1408: width -= c;
  5065  000A00  51D1               	movf	sprintf@c& (0+255),w,b
  5066  000A02  5FCD               	subwf	sprintf@width& (0+255),f,b
  5067  000A04  0E00               	movlw	0
  5068  000A06  5BCE               	subwfb	(sprintf@width+1)& (0+255),f,b
  5069  000A08  D004               	goto	l5575
  5070  000A0A                     l5573:
  5071                           
  5072                           ; BSR set to: 0
  5073                           ;doprnt.c: 1409: else;doprnt.c: 1410: width = 0;
  5074  000A0A  0E00               	movlw	0
  5075  000A0C  6FCE               	movwf	(sprintf@width+1)& (0+255),b
  5076  000A0E  0E00               	movlw	0
  5077  000A10  6FCD               	movwf	sprintf@width& (0+255),b
  5078  000A12                     l5575:
  5079                           
  5080                           ; BSR set to: 0
  5081                           ;doprnt.c: 1413: if(flag & 0x04) {
  5082  000A12  A5C8               	btfss	sprintf@flag& (0+255),2,b
  5083  000A14  D01E               	goto	l5591
  5084                           
  5085                           ; BSR set to: 0
  5086                           ;doprnt.c: 1418: if(flag & 0x03)
  5087  000A16  C0C8  F0B0         	movff	sprintf@flag,??_sprintf
  5088  000A1A  0E03               	movlw	3
  5089  000A1C  17B0               	andwf	??_sprintf& (0+255),f,b
  5090  000A1E  B4D8               	btfsc	status,2,c
  5091  000A20  D008               	goto	l5583
  5092                           
  5093                           ; BSR set to: 0
  5094                           ;doprnt.c: 1419: ((*sp++ = ('-')));
  5095  000A22  C0A6  FFD9         	movff	sprintf@sp,fsr2l
  5096  000A26  C0A7  FFDA         	movff	sprintf@sp+1,fsr2h
  5097  000A2A  0E2D               	movlw	45
  5098  000A2C  6EDF               	movwf	indf2,c
  5099                           
  5100                           ; BSR set to: 0
  5101  000A2E  4BA6               	infsnz	sprintf@sp& (0+255),f,b
  5102  000A30  2BA7               	incf	(sprintf@sp+1)& (0+255),f,b
  5103  000A32                     l5583:
  5104                           
  5105                           ; BSR set to: 0
  5106                           ;doprnt.c: 1441: if(width)
  5107  000A32  51CD               	movf	sprintf@width& (0+255),w,b
  5108  000A34  11CE               	iorwf	(sprintf@width+1)& (0+255),w,b
  5109  000A36  B4D8               	btfsc	status,2,c
  5110  000A38  D06F               	goto	l5611
  5111                           
  5112                           ; BSR set to: 0
  5113                           ;doprnt.c: 1443: ((*sp++ = ('0')));
  5114  000A3A  C0A6  FFD9         	movff	sprintf@sp,fsr2l
  5115  000A3E  C0A7  FFDA         	movff	sprintf@sp+1,fsr2h
  5116  000A42  0E30               	movlw	48
  5117  000A44  6EDF               	movwf	indf2,c
  5118                           
  5119                           ; BSR set to: 0
  5120  000A46  4BA6               	infsnz	sprintf@sp& (0+255),f,b
  5121  000A48  2BA7               	incf	(sprintf@sp+1)& (0+255),f,b
  5122                           
  5123                           ; BSR set to: 0
  5124                           ;doprnt.c: 1444: while(--width);
  5125  000A4A  07CD               	decf	sprintf@width& (0+255),f,b
  5126  000A4C  A0D8               	btfss	status,0,c
  5127  000A4E  07CE               	decf	(sprintf@width+1)& (0+255),f,b
  5128  000A50  D7F0               	goto	l5583
  5129  000A52                     l5591:
  5130                           
  5131                           ; BSR set to: 0
  5132                           ;doprnt.c: 1448: {;doprnt.c: 1450: if(width;doprnt.c: 1454: )
  5133  000A52  51CD               	movf	sprintf@width& (0+255),w,b
  5134  000A54  11CE               	iorwf	(sprintf@width+1)& (0+255),w,b
  5135  000A56  B4D8               	btfsc	status,2,c
  5136  000A58  D00F               	goto	u6770
  5137  000A5A                     u6760:
  5138                           
  5139                           ; BSR set to: 0
  5140                           ;doprnt.c: 1456: ((*sp++ = (' ')));
  5141  000A5A  C0A6  FFD9         	movff	sprintf@sp,fsr2l
  5142  000A5E  C0A7  FFDA         	movff	sprintf@sp+1,fsr2h
  5143  000A62  0E20               	movlw	32
  5144  000A64  6EDF               	movwf	indf2,c
  5145                           
  5146                           ; BSR set to: 0
  5147  000A66  4BA6               	infsnz	sprintf@sp& (0+255),f,b
  5148  000A68  2BA7               	incf	(sprintf@sp+1)& (0+255),f,b
  5149                           
  5150                           ; BSR set to: 0
  5151                           ;doprnt.c: 1457: while(--width);
  5152  000A6A  07CD               	decf	sprintf@width& (0+255),f,b
  5153  000A6C  A0D8               	btfss	status,0,c
  5154  000A6E  07CE               	decf	(sprintf@width+1)& (0+255),f,b
  5155  000A70  51CD               	movf	sprintf@width& (0+255),w,b
  5156  000A72  11CE               	iorwf	(sprintf@width+1)& (0+255),w,b
  5157  000A74  A4D8               	btfss	status,2,c
  5158  000A76  D7F1               	goto	u6760
  5159  000A78                     u6770:
  5160                           
  5161                           ; BSR set to: 0
  5162                           ;doprnt.c: 1464: if(flag & 0x03)
  5163  000A78  C0C8  F0B0         	movff	sprintf@flag,??_sprintf
  5164  000A7C  0E03               	movlw	3
  5165  000A7E  17B0               	andwf	??_sprintf& (0+255),f,b
  5166  000A80  B4D8               	btfsc	status,2,c
  5167  000A82  D04A               	goto	l5611
  5168                           
  5169                           ; BSR set to: 0
  5170                           ;doprnt.c: 1465: ((*sp++ = ('-')));
  5171  000A84  C0A6  FFD9         	movff	sprintf@sp,fsr2l
  5172  000A88  C0A7  FFDA         	movff	sprintf@sp+1,fsr2h
  5173  000A8C  0E2D               	movlw	45
  5174  000A8E  6EDF               	movwf	indf2,c
  5175  000A90  D041               	goto	l5609
  5176  000A92                     l5605:
  5177                           
  5178                           ; BSR set to: 0
  5179                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned int)prec]) % 10 + '0';
  5180  000A92  C0CF  F0B0         	movff	sprintf@prec,??_sprintf
  5181  000A96  C0D0  F0B1         	movff	sprintf@prec+1,??_sprintf+1
  5182  000A9A  90D8               	bcf	status,0,c
  5183  000A9C  37B0               	rlcf	??_sprintf& (0+255),f,b
  5184  000A9E  37B1               	rlcf	(??_sprintf+1)& (0+255),f,b
  5185  000AA0  90D8               	bcf	status,0,c
  5186  000AA2  37B0               	rlcf	??_sprintf& (0+255),f,b
  5187  000AA4  37B1               	rlcf	(??_sprintf+1)& (0+255),f,b
  5188  000AA6  0E33               	movlw	low _dpowers
  5189  000AA8  25B0               	addwf	??_sprintf& (0+255),w,b
  5190  000AAA  6EF6               	movwf	tblptrl,c
  5191  000AAC  0EFF               	movlw	high _dpowers
  5192  000AAE  21B1               	addwfc	(??_sprintf+1)& (0+255),w,b
  5193  000AB0  6EF7               	movwf	tblptrh,c
  5194  000AB2                     	if	0	;There are less than 3 active tblptr bytes
  5195  000AB2                     	endif
  5196  000AB2  0009               	tblrd		*+
  5197  000AB4  CFF5 F028          	movff	tablat,___lldiv@divisor
  5198  000AB8  0009               	tblrd		*+
  5199  000ABA  CFF5 F029          	movff	tablat,___lldiv@divisor+1
  5200  000ABE  0009               	tblrd		*+
  5201  000AC0  CFF5 F02A          	movff	tablat,___lldiv@divisor+2
  5202  000AC4  000A               	tblrd		*-
  5203  000AC6  CFF5 F02B          	movff	tablat,___lldiv@divisor+3
  5204  000ACA  C0C2  F024         	movff	sprintf@val,___lldiv@dividend
  5205  000ACE  C0C3  F025         	movff	sprintf@val+1,___lldiv@dividend+1
  5206  000AD2  C0C4  F026         	movff	sprintf@val+2,___lldiv@dividend+2
  5207  000AD6  C0C5  F027         	movff	sprintf@val+3,___lldiv@dividend+3
  5208  000ADA  EC82  F010         	call	___lldiv	;wreg free
  5209  000ADE  C024  F031         	movff	?___lldiv,___llmod@dividend
  5210  000AE2  C025  F032         	movff	?___lldiv+1,___llmod@dividend+1
  5211  000AE6  C026  F033         	movff	?___lldiv+2,___llmod@dividend+2
  5212  000AEA  C027  F034         	movff	?___lldiv+3,___llmod@dividend+3
  5213  000AEE  0E0A               	movlw	10
  5214  000AF0  6E35               	movwf	___llmod@divisor^0,c
  5215  000AF2  0E00               	movlw	0
  5216  000AF4  6E36               	movwf	(___llmod@divisor+1)^0,c
  5217  000AF6  0E00               	movlw	0
  5218  000AF8  6E37               	movwf	(___llmod@divisor+2)^0,c
  5219  000AFA  0E00               	movlw	0
  5220  000AFC  6E38               	movwf	(___llmod@divisor+3)^0,c
  5221  000AFE  ECDD  F011         	call	___llmod	;wreg free
  5222  000B02  5031               	movf	?___llmod^0,w,c
  5223  000B04  0F30               	addlw	48
  5224  000B06  6FD1               	movwf	sprintf@c& (0+255),b
  5225                           
  5226                           ; BSR set to: 0
  5227                           ;doprnt.c: 1549: };doprnt.c: 1550: ((*sp++ = (c)));
  5228  000B08  C0A6  FFD9         	movff	sprintf@sp,fsr2l
  5229  000B0C  C0A7  FFDA         	movff	sprintf@sp+1,fsr2h
  5230  000B10  C0D1  FFDF         	movff	sprintf@c,indf2
  5231  000B14                     l5609:
  5232                           
  5233                           ; BSR set to: 0
  5234  000B14  4BA6               	infsnz	sprintf@sp& (0+255),f,b
  5235  000B16  2BA7               	incf	(sprintf@sp+1)& (0+255),f,b
  5236  000B18                     l5611:
  5237                           
  5238                           ; BSR set to: 0
  5239  000B18  07CF               	decf	sprintf@prec& (0+255),f,b
  5240  000B1A  A0D8               	btfss	status,0,c
  5241  000B1C  07D0               	decf	(sprintf@prec+1)& (0+255),f,b
  5242  000B1E  29CF               	incf	sprintf@prec& (0+255),w,b
  5243  000B20  E1B8               	bnz	l5605
  5244  000B22  29D0               	incf	(sprintf@prec+1)& (0+255),w,b
  5245  000B24  A4D8               	btfss	status,2,c
  5246  000B26  D7B5               	goto	l5605
  5247  000B28                     u6790:
  5248                           
  5249                           ; BSR set to: 0
  5250  000B28  C0A8  FFF6         	movff	sprintf@f,tblptrl
  5251  000B2C  C0A9  FFF7         	movff	sprintf@f+1,tblptrh
  5252  000B30  4BA8               	infsnz	sprintf@f& (0+255),f,b
  5253  000B32  2BA9               	incf	(sprintf@f+1)& (0+255),f,b
  5254  000B34                     	if	0	;tblptru may be non-zero
  5255  000B34                     	endif
  5256  000B34                     	if	0	;tblptru may be non-zero
  5257  000B34                     	endif
  5258  000B34  0008               	tblrd		*
  5259  000B36  CFF5 F0D1          	movff	tablat,sprintf@c
  5260  000B3A  51D1               	movf	sprintf@c& (0+255),w,b
  5261  000B3C  A4D8               	btfss	status,2,c
  5262  000B3E  EF0D  F000         	goto	l5247
  5263  000B42                     u6800:
  5264                           
  5265                           ; BSR set to: 0
  5266                           ;doprnt.c: 1564: *sp = 0;
  5267  000B42  C0A6  FFD9         	movff	sprintf@sp,fsr2l
  5268  000B46  C0A7  FFDA         	movff	sprintf@sp+1,fsr2h
  5269  000B4A  0E00               	movlw	0
  5270  000B4C  6EDF               	movwf	indf2,c
  5271                           
  5272                           ; BSR set to: 0
  5273  000B4E  0012               	return		;funcret
  5274  000B50                     __end_of_sprintf:
  5275                           	callstack 0
  5276                           
  5277 ;; *************** function _scale *****************
  5278 ;; Defined at:
  5279 ;;		line 433 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c"
  5280 ;; Parameters:    Size  Location     Type
  5281 ;;  scl             1    wreg     char 
  5282 ;; Auto vars:     Size  Location     Type
  5283 ;;  scl             1    6[BANK0 ] char 
  5284 ;; Return value:  Size  Location     Type
  5285 ;;                  3    0[BANK0 ] char 
  5286 ;; Registers used:
  5287 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5288 ;; Tracked objects:
  5289 ;;		On entry : 3F/0
  5290 ;;		On exit  : 0/0
  5291 ;;		Unchanged: 0/0
  5292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5293 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5294 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5296 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5297 ;;Total ram usage:        7 bytes
  5298 ;; Hardware stack levels used:    1
  5299 ;; Hardware stack levels required when called:    6
  5300 ;; This function calls:
  5301 ;;		___awdiv
  5302 ;;		___awmod
  5303 ;;		___ftmul
  5304 ;; This function is called by:
  5305 ;;		_sprintf
  5306 ;; This function uses a non-reentrant model
  5307 ;;
  5308                           
  5309                           	psect	text16
  5310  000B50                     __ptext16:
  5311                           	callstack 0
  5312  000B50                     _scale:
  5313                           	callstack 22
  5314                           
  5315                           ; BSR set to: 0
  5316                           ;incstack = 0
  5317                           ;scale@scl stored from wreg
  5318  000B50  6F86               	movwf	scale@scl& (0+255),b
  5319                           
  5320                           ;doprnt.c: 436: if(scl < 0) {
  5321  000B52  0100               	movlb	0	; () banked
  5322  000B54  AF86               	btfss	scale@scl& (0+255),7,b
  5323  000B56  D0DC               	goto	l5129
  5324                           
  5325                           ; BSR set to: 0
  5326                           ;doprnt.c: 437: scl = -scl;
  5327  000B58  6D86               	negf	scale@scl& (0+255),b
  5328                           
  5329                           ;doprnt.c: 438: if(scl>=110)
  5330  000B5A  5186               	movf	scale@scl& (0+255),w,b
  5331  000B5C  0A80               	xorlw	128
  5332  000B5E  0F12               	addlw	-238
  5333  000B60  A0D8               	btfss	status,0,c
  5334  000B62  D07B               	goto	l5119
  5335                           
  5336                           ; BSR set to: 0
  5337                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  5338  000B64  0E00               	movlw	0
  5339  000B66  6E2D               	movwf	(___awdiv@divisor+1)^0,c
  5340  000B68  0E0A               	movlw	10
  5341  000B6A  6E2C               	movwf	___awdiv@divisor^0,c
  5342  000B6C  0E00               	movlw	0
  5343  000B6E  6E27               	movwf	(___awmod@divisor+1)^0,c
  5344  000B70  0E64               	movlw	100
  5345  000B72  6E26               	movwf	___awmod@divisor^0,c
  5346  000B74  5186               	movf	scale@scl& (0+255),w,b
  5347  000B76  6E24               	movwf	___awmod@dividend^0,c
  5348  000B78  6A25               	clrf	(___awmod@dividend+1)^0,c
  5349  000B7A  BE24               	btfsc	___awmod@dividend^0,7,c
  5350  000B7C  0625               	decf	(___awmod@dividend+1)^0,f,c
  5351  000B7E  EC70  F011         	call	___awmod	;wreg free
  5352  000B82  C024  F02A         	movff	?___awmod,___awdiv@dividend
  5353  000B86  C025  F02B         	movff	?___awmod+1,___awdiv@dividend+1
  5354  000B8A  EC40  F010         	call	___awdiv	;wreg free
  5355  000B8E  0E09               	movlw	9
  5356  000B90  262A               	addwf	?___awdiv^0,f,c
  5357  000B92  502A               	movf	?___awdiv^0,w,c
  5358  000B94  0D03               	mullw	3
  5359  000B96  0E0C               	movlw	low __npowers_
  5360  000B98  24F3               	addwf	243,w,c
  5361  000B9A  6EF6               	movwf	tblptrl,c
  5362  000B9C  0EFF               	movlw	high __npowers_
  5363  000B9E  20F4               	addwfc	244,w,c
  5364  000BA0  6EF7               	movwf	tblptrh,c
  5365  000BA2                     	if	0	;There are less than 3 active tblptr bytes
  5366  000BA2                     	endif
  5367  000BA2  0009               	tblrd		*+
  5368  000BA4  CFF5 F035          	movff	tablat,___ftmul@f2
  5369  000BA8  0009               	tblrd		*+
  5370  000BAA  CFF5 F036          	movff	tablat,___ftmul@f2+1
  5371  000BAE  000A               	tblrd		*-
  5372  000BB0  CFF5 F037          	movff	tablat,___ftmul@f2+2
  5373  000BB4  0E00               	movlw	0
  5374  000BB6  6E2D               	movwf	(___awdiv@divisor+1)^0,c
  5375  000BB8  0E64               	movlw	100
  5376  000BBA  6E2C               	movwf	___awdiv@divisor^0,c
  5377  000BBC  0100               	movlb	0	; () banked
  5378  000BBE  5186               	movf	scale@scl& (0+255),w,b
  5379  000BC0  6E2A               	movwf	___awdiv@dividend^0,c
  5380  000BC2  6A2B               	clrf	(___awdiv@dividend+1)^0,c
  5381  000BC4  BE2A               	btfsc	___awdiv@dividend^0,7,c
  5382  000BC6  062B               	decf	(___awdiv@dividend+1)^0,f,c
  5383  000BC8  EC40  F010         	call	___awdiv	;wreg free
  5384  000BCC  0E12               	movlw	18
  5385  000BCE  262A               	addwf	?___awdiv^0,f,c
  5386  000BD0  502A               	movf	?___awdiv^0,w,c
  5387  000BD2  0D03               	mullw	3
  5388  000BD4  0E0C               	movlw	low __npowers_
  5389  000BD6  24F3               	addwf	243,w,c
  5390  000BD8  6EF6               	movwf	tblptrl,c
  5391  000BDA  0EFF               	movlw	high __npowers_
  5392  000BDC  20F4               	addwfc	244,w,c
  5393  000BDE  6EF7               	movwf	tblptrh,c
  5394  000BE0                     	if	0	;There are less than 3 active tblptr bytes
  5395  000BE0                     	endif
  5396  000BE0  0009               	tblrd		*+
  5397  000BE2  CFF5 F032          	movff	tablat,___ftmul@f1
  5398  000BE6  0009               	tblrd		*+
  5399  000BE8  CFF5 F033          	movff	tablat,___ftmul@f1+1
  5400  000BEC  000A               	tblrd		*-
  5401  000BEE  CFF5 F034          	movff	tablat,___ftmul@f1+2
  5402  000BF2  EC1C  F00D         	call	___ftmul	;wreg free
  5403  000BF6  C032  F083         	movff	?___ftmul,_scale$1844
  5404  000BFA  C033  F084         	movff	?___ftmul+1,_scale$1844+1
  5405  000BFE  C034  F085         	movff	?___ftmul+2,_scale$1844+2
  5406                           
  5407                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  5408  000C02  C083  F032         	movff	_scale$1844,___ftmul@f1
  5409  000C06  C084  F033         	movff	_scale$1844+1,___ftmul@f1+1
  5410  000C0A  C085  F034         	movff	_scale$1844+2,___ftmul@f1+2
  5411  000C0E  0E00               	movlw	0
  5412  000C10  6E27               	movwf	(___awmod@divisor+1)^0,c
  5413  000C12  0E0A               	movlw	10
  5414  000C14  6E26               	movwf	___awmod@divisor^0,c
  5415  000C16  0100               	movlb	0	; () banked
  5416  000C18  5186               	movf	scale@scl& (0+255),w,b
  5417  000C1A  6E24               	movwf	___awmod@dividend^0,c
  5418  000C1C  6A25               	clrf	(___awmod@dividend+1)^0,c
  5419  000C1E  BE24               	btfsc	___awmod@dividend^0,7,c
  5420  000C20  0625               	decf	(___awmod@dividend+1)^0,f,c
  5421  000C22  EC70  F011         	call	___awmod	;wreg free
  5422  000C26  5024               	movf	?___awmod^0,w,c
  5423  000C28  0D03               	mullw	3
  5424  000C2A  0E0C               	movlw	low __npowers_
  5425  000C2C  24F3               	addwf	243,w,c
  5426  000C2E  6EF6               	movwf	tblptrl,c
  5427  000C30  0EFF               	movlw	high __npowers_
  5428  000C32  20F4               	addwfc	244,w,c
  5429  000C34  6EF7               	movwf	tblptrh,c
  5430  000C36                     	if	0	;There are less than 3 active tblptr bytes
  5431  000C36                     	endif
  5432  000C36  0009               	tblrd		*+
  5433  000C38  CFF5 F035          	movff	tablat,___ftmul@f2
  5434  000C3C  0009               	tblrd		*+
  5435  000C3E  CFF5 F036          	movff	tablat,___ftmul@f2+1
  5436  000C42  000A               	tblrd		*-
  5437  000C44  CFF5 F037          	movff	tablat,___ftmul@f2+2
  5438  000C48  EC1C  F00D         	call	___ftmul	;wreg free
  5439  000C4C  C032  F080         	movff	?___ftmul,?_scale
  5440  000C50  C033  F081         	movff	?___ftmul+1,?_scale+1
  5441  000C54  C034  F082         	movff	?___ftmul+2,?_scale+2
  5442  000C58  0012               	return	
  5443  000C5A                     l5119:
  5444                           
  5445                           ; BSR set to: 0
  5446                           ;doprnt.c: 440: else if(scl > 10)
  5447  000C5A  5186               	movf	scale@scl& (0+255),w,b
  5448  000C5C  0A80               	xorlw	128
  5449  000C5E  0F75               	addlw	-139
  5450  000C60  A0D8               	btfss	status,0,c
  5451  000C62  D044               	goto	l5125
  5452                           
  5453                           ; BSR set to: 0
  5454                           ;doprnt.c: 441: return _npowers_[(unsigned char)(scl/10+9)] * _npowers_[(unsigned char)(
      +                          scl%10)];
  5455  000C64  0E00               	movlw	0
  5456  000C66  6E2D               	movwf	(___awdiv@divisor+1)^0,c
  5457  000C68  0E0A               	movlw	10
  5458  000C6A  6E2C               	movwf	___awdiv@divisor^0,c
  5459  000C6C  5186               	movf	scale@scl& (0+255),w,b
  5460  000C6E  6E2A               	movwf	___awdiv@dividend^0,c
  5461  000C70  6A2B               	clrf	(___awdiv@dividend+1)^0,c
  5462  000C72  BE2A               	btfsc	___awdiv@dividend^0,7,c
  5463  000C74  062B               	decf	(___awdiv@dividend+1)^0,f,c
  5464  000C76  EC40  F010         	call	___awdiv	;wreg free
  5465  000C7A  0E09               	movlw	9
  5466  000C7C  262A               	addwf	?___awdiv^0,f,c
  5467  000C7E  502A               	movf	?___awdiv^0,w,c
  5468  000C80  0D03               	mullw	3
  5469  000C82  0E0C               	movlw	low __npowers_
  5470  000C84  24F3               	addwf	243,w,c
  5471  000C86  6EF6               	movwf	tblptrl,c
  5472  000C88  0EFF               	movlw	high __npowers_
  5473  000C8A  20F4               	addwfc	244,w,c
  5474  000C8C  6EF7               	movwf	tblptrh,c
  5475  000C8E                     	if	0	;There are less than 3 active tblptr bytes
  5476  000C8E                     	endif
  5477  000C8E  0009               	tblrd		*+
  5478  000C90  CFF5 F032          	movff	tablat,___ftmul@f1
  5479  000C94  0009               	tblrd		*+
  5480  000C96  CFF5 F033          	movff	tablat,___ftmul@f1+1
  5481  000C9A  000A               	tblrd		*-
  5482  000C9C  CFF5 F034          	movff	tablat,___ftmul@f1+2
  5483  000CA0  0E00               	movlw	0
  5484  000CA2  6E27               	movwf	(___awmod@divisor+1)^0,c
  5485  000CA4  0E0A               	movlw	10
  5486  000CA6  6E26               	movwf	___awmod@divisor^0,c
  5487  000CA8  0100               	movlb	0	; () banked
  5488  000CAA  5186               	movf	scale@scl& (0+255),w,b
  5489  000CAC  6E24               	movwf	___awmod@dividend^0,c
  5490  000CAE  6A25               	clrf	(___awmod@dividend+1)^0,c
  5491  000CB0  BE24               	btfsc	___awmod@dividend^0,7,c
  5492  000CB2  0625               	decf	(___awmod@dividend+1)^0,f,c
  5493  000CB4  EC70  F011         	call	___awmod	;wreg free
  5494  000CB8  5024               	movf	?___awmod^0,w,c
  5495  000CBA  0D03               	mullw	3
  5496  000CBC  0E0C               	movlw	low __npowers_
  5497  000CBE  24F3               	addwf	243,w,c
  5498  000CC0  6EF6               	movwf	tblptrl,c
  5499  000CC2  0EFF               	movlw	high __npowers_
  5500  000CC4  20F4               	addwfc	244,w,c
  5501  000CC6  6EF7               	movwf	tblptrh,c
  5502  000CC8                     	if	0	;There are less than 3 active tblptr bytes
  5503  000CC8                     	endif
  5504  000CC8  0009               	tblrd		*+
  5505  000CCA  CFF5 F035          	movff	tablat,___ftmul@f2
  5506  000CCE  0009               	tblrd		*+
  5507  000CD0  CFF5 F036          	movff	tablat,___ftmul@f2+1
  5508  000CD4  000A               	tblrd		*-
  5509  000CD6  CFF5 F037          	movff	tablat,___ftmul@f2+2
  5510  000CDA  EC1C  F00D         	call	___ftmul	;wreg free
  5511  000CDE  C032  F080         	movff	?___ftmul,?_scale
  5512  000CE2  C033  F081         	movff	?___ftmul+1,?_scale+1
  5513  000CE6  C034  F082         	movff	?___ftmul+2,?_scale+2
  5514  000CEA  0012               	return	
  5515  000CEC                     l5125:
  5516                           
  5517                           ; BSR set to: 0
  5518                           ;doprnt.c: 442: return _npowers_[(unsigned char)scl];
  5519  000CEC  5186               	movf	scale@scl& (0+255),w,b
  5520  000CEE  0D03               	mullw	3
  5521  000CF0  0E0C               	movlw	low __npowers_
  5522  000CF2  24F3               	addwf	243,w,c
  5523  000CF4  6EF6               	movwf	tblptrl,c
  5524  000CF6  0EFF               	movlw	high __npowers_
  5525  000CF8  20F4               	addwfc	244,w,c
  5526  000CFA  6EF7               	movwf	tblptrh,c
  5527  000CFC                     	if	0	;There are less than 3 active tblptr bytes
  5528  000CFC                     	endif
  5529  000CFC  0009               	tblrd		*+
  5530  000CFE  CFF5 F080          	movff	tablat,?_scale
  5531  000D02  0009               	tblrd		*+
  5532  000D04  CFF5 F081          	movff	tablat,?_scale+1
  5533  000D08  000A               	tblrd		*-
  5534  000D0A  CFF5 F082          	movff	tablat,?_scale+2
  5535  000D0E  0012               	return	
  5536  000D10                     l5129:
  5537                           
  5538                           ; BSR set to: 0
  5539                           ;doprnt.c: 443: };doprnt.c: 444: if(scl>=110)
  5540  000D10  5186               	movf	scale@scl& (0+255),w,b
  5541  000D12  0A80               	xorlw	128
  5542  000D14  0F12               	addlw	-238
  5543  000D16  A0D8               	btfss	status,0,c
  5544  000D18  D07B               	goto	l5137
  5545                           
  5546                           ; BSR set to: 0
  5547                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  5548  000D1A  0E00               	movlw	0
  5549  000D1C  6E2D               	movwf	(___awdiv@divisor+1)^0,c
  5550  000D1E  0E0A               	movlw	10
  5551  000D20  6E2C               	movwf	___awdiv@divisor^0,c
  5552  000D22  0E00               	movlw	0
  5553  000D24  6E27               	movwf	(___awmod@divisor+1)^0,c
  5554  000D26  0E64               	movlw	100
  5555  000D28  6E26               	movwf	___awmod@divisor^0,c
  5556  000D2A  5186               	movf	scale@scl& (0+255),w,b
  5557  000D2C  6E24               	movwf	___awmod@dividend^0,c
  5558  000D2E  6A25               	clrf	(___awmod@dividend+1)^0,c
  5559  000D30  BE24               	btfsc	___awmod@dividend^0,7,c
  5560  000D32  0625               	decf	(___awmod@dividend+1)^0,f,c
  5561  000D34  EC70  F011         	call	___awmod	;wreg free
  5562  000D38  C024  F02A         	movff	?___awmod,___awdiv@dividend
  5563  000D3C  C025  F02B         	movff	?___awmod+1,___awdiv@dividend+1
  5564  000D40  EC40  F010         	call	___awdiv	;wreg free
  5565  000D44  0E09               	movlw	9
  5566  000D46  262A               	addwf	?___awdiv^0,f,c
  5567  000D48  502A               	movf	?___awdiv^0,w,c
  5568  000D4A  0D03               	mullw	3
  5569  000D4C  0EE5               	movlw	low __powers_
  5570  000D4E  24F3               	addwf	243,w,c
  5571  000D50  6EF6               	movwf	tblptrl,c
  5572  000D52  0EFE               	movlw	high __powers_
  5573  000D54  20F4               	addwfc	244,w,c
  5574  000D56  6EF7               	movwf	tblptrh,c
  5575  000D58                     	if	0	;There are less than 3 active tblptr bytes
  5576  000D58                     	endif
  5577  000D58  0009               	tblrd		*+
  5578  000D5A  CFF5 F035          	movff	tablat,___ftmul@f2
  5579  000D5E  0009               	tblrd		*+
  5580  000D60  CFF5 F036          	movff	tablat,___ftmul@f2+1
  5581  000D64  000A               	tblrd		*-
  5582  000D66  CFF5 F037          	movff	tablat,___ftmul@f2+2
  5583  000D6A  0E00               	movlw	0
  5584  000D6C  6E2D               	movwf	(___awdiv@divisor+1)^0,c
  5585  000D6E  0E64               	movlw	100
  5586  000D70  6E2C               	movwf	___awdiv@divisor^0,c
  5587  000D72  0100               	movlb	0	; () banked
  5588  000D74  5186               	movf	scale@scl& (0+255),w,b
  5589  000D76  6E2A               	movwf	___awdiv@dividend^0,c
  5590  000D78  6A2B               	clrf	(___awdiv@dividend+1)^0,c
  5591  000D7A  BE2A               	btfsc	___awdiv@dividend^0,7,c
  5592  000D7C  062B               	decf	(___awdiv@dividend+1)^0,f,c
  5593  000D7E  EC40  F010         	call	___awdiv	;wreg free
  5594  000D82  0E12               	movlw	18
  5595  000D84  262A               	addwf	?___awdiv^0,f,c
  5596  000D86  502A               	movf	?___awdiv^0,w,c
  5597  000D88  0D03               	mullw	3
  5598  000D8A  0EE5               	movlw	low __powers_
  5599  000D8C  24F3               	addwf	243,w,c
  5600  000D8E  6EF6               	movwf	tblptrl,c
  5601  000D90  0EFE               	movlw	high __powers_
  5602  000D92  20F4               	addwfc	244,w,c
  5603  000D94  6EF7               	movwf	tblptrh,c
  5604  000D96                     	if	0	;There are less than 3 active tblptr bytes
  5605  000D96                     	endif
  5606  000D96  0009               	tblrd		*+
  5607  000D98  CFF5 F032          	movff	tablat,___ftmul@f1
  5608  000D9C  0009               	tblrd		*+
  5609  000D9E  CFF5 F033          	movff	tablat,___ftmul@f1+1
  5610  000DA2  000A               	tblrd		*-
  5611  000DA4  CFF5 F034          	movff	tablat,___ftmul@f1+2
  5612  000DA8  EC1C  F00D         	call	___ftmul	;wreg free
  5613  000DAC  C032  F083         	movff	?___ftmul,_scale$1844
  5614  000DB0  C033  F084         	movff	?___ftmul+1,_scale$1844+1
  5615  000DB4  C034  F085         	movff	?___ftmul+2,_scale$1844+2
  5616                           
  5617                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  5618  000DB8  C083  F032         	movff	_scale$1844,___ftmul@f1
  5619  000DBC  C084  F033         	movff	_scale$1844+1,___ftmul@f1+1
  5620  000DC0  C085  F034         	movff	_scale$1844+2,___ftmul@f1+2
  5621  000DC4  0E00               	movlw	0
  5622  000DC6  6E27               	movwf	(___awmod@divisor+1)^0,c
  5623  000DC8  0E0A               	movlw	10
  5624  000DCA  6E26               	movwf	___awmod@divisor^0,c
  5625  000DCC  0100               	movlb	0	; () banked
  5626  000DCE  5186               	movf	scale@scl& (0+255),w,b
  5627  000DD0  6E24               	movwf	___awmod@dividend^0,c
  5628  000DD2  6A25               	clrf	(___awmod@dividend+1)^0,c
  5629  000DD4  BE24               	btfsc	___awmod@dividend^0,7,c
  5630  000DD6  0625               	decf	(___awmod@dividend+1)^0,f,c
  5631  000DD8  EC70  F011         	call	___awmod	;wreg free
  5632  000DDC  5024               	movf	?___awmod^0,w,c
  5633  000DDE  0D03               	mullw	3
  5634  000DE0  0EE5               	movlw	low __powers_
  5635  000DE2  24F3               	addwf	243,w,c
  5636  000DE4  6EF6               	movwf	tblptrl,c
  5637  000DE6  0EFE               	movlw	high __powers_
  5638  000DE8  20F4               	addwfc	244,w,c
  5639  000DEA  6EF7               	movwf	tblptrh,c
  5640  000DEC                     	if	0	;There are less than 3 active tblptr bytes
  5641  000DEC                     	endif
  5642  000DEC  0009               	tblrd		*+
  5643  000DEE  CFF5 F035          	movff	tablat,___ftmul@f2
  5644  000DF2  0009               	tblrd		*+
  5645  000DF4  CFF5 F036          	movff	tablat,___ftmul@f2+1
  5646  000DF8  000A               	tblrd		*-
  5647  000DFA  CFF5 F037          	movff	tablat,___ftmul@f2+2
  5648  000DFE  EC1C  F00D         	call	___ftmul	;wreg free
  5649  000E02  C032  F080         	movff	?___ftmul,?_scale
  5650  000E06  C033  F081         	movff	?___ftmul+1,?_scale+1
  5651  000E0A  C034  F082         	movff	?___ftmul+2,?_scale+2
  5652  000E0E  0012               	return	
  5653  000E10                     l5137:
  5654                           
  5655                           ; BSR set to: 0
  5656                           ;doprnt.c: 446: else if(scl > 10)
  5657  000E10  5186               	movf	scale@scl& (0+255),w,b
  5658  000E12  0A80               	xorlw	128
  5659  000E14  0F75               	addlw	-139
  5660  000E16  A0D8               	btfss	status,0,c
  5661  000E18  D044               	goto	l5143
  5662                           
  5663                           ; BSR set to: 0
  5664                           ;doprnt.c: 447: return _powers_[(unsigned char)(scl/10+9)] * _powers_[(unsigned char)(sc
      +                          l%10)];
  5665  000E1A  0E00               	movlw	0
  5666  000E1C  6E2D               	movwf	(___awdiv@divisor+1)^0,c
  5667  000E1E  0E0A               	movlw	10
  5668  000E20  6E2C               	movwf	___awdiv@divisor^0,c
  5669  000E22  5186               	movf	scale@scl& (0+255),w,b
  5670  000E24  6E2A               	movwf	___awdiv@dividend^0,c
  5671  000E26  6A2B               	clrf	(___awdiv@dividend+1)^0,c
  5672  000E28  BE2A               	btfsc	___awdiv@dividend^0,7,c
  5673  000E2A  062B               	decf	(___awdiv@dividend+1)^0,f,c
  5674  000E2C  EC40  F010         	call	___awdiv	;wreg free
  5675  000E30  0E09               	movlw	9
  5676  000E32  262A               	addwf	?___awdiv^0,f,c
  5677  000E34  502A               	movf	?___awdiv^0,w,c
  5678  000E36  0D03               	mullw	3
  5679  000E38  0EE5               	movlw	low __powers_
  5680  000E3A  24F3               	addwf	243,w,c
  5681  000E3C  6EF6               	movwf	tblptrl,c
  5682  000E3E  0EFE               	movlw	high __powers_
  5683  000E40  20F4               	addwfc	244,w,c
  5684  000E42  6EF7               	movwf	tblptrh,c
  5685  000E44                     	if	0	;There are less than 3 active tblptr bytes
  5686  000E44                     	endif
  5687  000E44  0009               	tblrd		*+
  5688  000E46  CFF5 F032          	movff	tablat,___ftmul@f1
  5689  000E4A  0009               	tblrd		*+
  5690  000E4C  CFF5 F033          	movff	tablat,___ftmul@f1+1
  5691  000E50  000A               	tblrd		*-
  5692  000E52  CFF5 F034          	movff	tablat,___ftmul@f1+2
  5693  000E56  0E00               	movlw	0
  5694  000E58  6E27               	movwf	(___awmod@divisor+1)^0,c
  5695  000E5A  0E0A               	movlw	10
  5696  000E5C  6E26               	movwf	___awmod@divisor^0,c
  5697  000E5E  0100               	movlb	0	; () banked
  5698  000E60  5186               	movf	scale@scl& (0+255),w,b
  5699  000E62  6E24               	movwf	___awmod@dividend^0,c
  5700  000E64  6A25               	clrf	(___awmod@dividend+1)^0,c
  5701  000E66  BE24               	btfsc	___awmod@dividend^0,7,c
  5702  000E68  0625               	decf	(___awmod@dividend+1)^0,f,c
  5703  000E6A  EC70  F011         	call	___awmod	;wreg free
  5704  000E6E  5024               	movf	?___awmod^0,w,c
  5705  000E70  0D03               	mullw	3
  5706  000E72  0EE5               	movlw	low __powers_
  5707  000E74  24F3               	addwf	243,w,c
  5708  000E76  6EF6               	movwf	tblptrl,c
  5709  000E78  0EFE               	movlw	high __powers_
  5710  000E7A  20F4               	addwfc	244,w,c
  5711  000E7C  6EF7               	movwf	tblptrh,c
  5712  000E7E                     	if	0	;There are less than 3 active tblptr bytes
  5713  000E7E                     	endif
  5714  000E7E  0009               	tblrd		*+
  5715  000E80  CFF5 F035          	movff	tablat,___ftmul@f2
  5716  000E84  0009               	tblrd		*+
  5717  000E86  CFF5 F036          	movff	tablat,___ftmul@f2+1
  5718  000E8A  000A               	tblrd		*-
  5719  000E8C  CFF5 F037          	movff	tablat,___ftmul@f2+2
  5720  000E90  EC1C  F00D         	call	___ftmul	;wreg free
  5721  000E94  C032  F080         	movff	?___ftmul,?_scale
  5722  000E98  C033  F081         	movff	?___ftmul+1,?_scale+1
  5723  000E9C  C034  F082         	movff	?___ftmul+2,?_scale+2
  5724  000EA0  0012               	return	
  5725  000EA2                     l5143:
  5726                           
  5727                           ; BSR set to: 0
  5728                           ;doprnt.c: 448: return _powers_[(unsigned char)scl];
  5729  000EA2  5186               	movf	scale@scl& (0+255),w,b
  5730  000EA4  0D03               	mullw	3
  5731  000EA6  0EE5               	movlw	low __powers_
  5732  000EA8  24F3               	addwf	243,w,c
  5733  000EAA  6EF6               	movwf	tblptrl,c
  5734  000EAC  0EFE               	movlw	high __powers_
  5735  000EAE  20F4               	addwfc	244,w,c
  5736  000EB0  6EF7               	movwf	tblptrh,c
  5737  000EB2                     	if	0	;There are less than 3 active tblptr bytes
  5738  000EB2                     	endif
  5739  000EB2  0009               	tblrd		*+
  5740  000EB4  CFF5 F080          	movff	tablat,?_scale
  5741  000EB8  0009               	tblrd		*+
  5742  000EBA  CFF5 F081          	movff	tablat,?_scale+1
  5743  000EBE  000A               	tblrd		*-
  5744  000EC0  CFF5 F082          	movff	tablat,?_scale+2
  5745  000EC4  0012               	return		;funcret
  5746  000EC6                     __end_of_scale:
  5747                           	callstack 0
  5748                           
  5749 ;; *************** function ___awmod *****************
  5750 ;; Defined at:
  5751 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awmod.c"
  5752 ;; Parameters:    Size  Location     Type
  5753 ;;  dividend        2   35[COMRAM] int 
  5754 ;;  divisor         2   37[COMRAM] int 
  5755 ;; Auto vars:     Size  Location     Type
  5756 ;;  sign            1   40[COMRAM] unsigned char 
  5757 ;;  counter         1   39[COMRAM] unsigned char 
  5758 ;; Return value:  Size  Location     Type
  5759 ;;                  2   35[COMRAM] int 
  5760 ;; Registers used:
  5761 ;;		wreg, status,2, status,0
  5762 ;; Tracked objects:
  5763 ;;		On entry : 3F/0
  5764 ;;		On exit  : 3F/0
  5765 ;;		Unchanged: 3F/0
  5766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5767 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5768 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5770 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5771 ;;Total ram usage:        6 bytes
  5772 ;; Hardware stack levels used:    1
  5773 ;; Hardware stack levels required when called:    4
  5774 ;; This function calls:
  5775 ;;		Nothing
  5776 ;; This function is called by:
  5777 ;;		_scale
  5778 ;; This function uses a non-reentrant model
  5779 ;;
  5780                           
  5781                           	psect	text17
  5782  0022E0                     __ptext17:
  5783                           	callstack 0
  5784  0022E0                     ___awmod:
  5785                           	callstack 23
  5786                           
  5787                           ; BSR set to: 0
  5788                           
  5789                           ;incstack = 0
  5790  0022E0  0E00               	movlw	0
  5791  0022E2  6E29               	movwf	___awmod@sign^0,c
  5792                           
  5793                           ; BSR set to: 0
  5794  0022E4  AE25               	btfss	(___awmod@dividend+1)^0,7,c
  5795  0022E6  D006               	goto	l5021
  5796                           
  5797                           ; BSR set to: 0
  5798  0022E8  6C24               	negf	___awmod@dividend^0,c
  5799  0022EA  1E25               	comf	(___awmod@dividend+1)^0,f,c
  5800  0022EC  B0D8               	btfsc	status,0,c
  5801  0022EE  2A25               	incf	(___awmod@dividend+1)^0,f,c
  5802                           
  5803                           ; BSR set to: 0
  5804  0022F0  0E01               	movlw	1
  5805  0022F2  6E29               	movwf	___awmod@sign^0,c
  5806  0022F4                     l5021:
  5807                           
  5808                           ; BSR set to: 0
  5809  0022F4  AE27               	btfss	(___awmod@divisor+1)^0,7,c
  5810  0022F6  D004               	goto	l5025
  5811                           
  5812                           ; BSR set to: 0
  5813  0022F8  6C26               	negf	___awmod@divisor^0,c
  5814  0022FA  1E27               	comf	(___awmod@divisor+1)^0,f,c
  5815  0022FC  B0D8               	btfsc	status,0,c
  5816  0022FE  2A27               	incf	(___awmod@divisor+1)^0,f,c
  5817  002300                     l5025:
  5818                           
  5819                           ; BSR set to: 0
  5820  002300  5026               	movf	___awmod@divisor^0,w,c
  5821  002302  1027               	iorwf	(___awmod@divisor+1)^0,w,c
  5822  002304  B4D8               	btfsc	status,2,c
  5823  002306  D018               	goto	l5041
  5824                           
  5825                           ; BSR set to: 0
  5826  002308  0E01               	movlw	1
  5827  00230A  6E28               	movwf	___awmod@counter^0,c
  5828  00230C  D004               	goto	l5031
  5829  00230E                     l5029:
  5830                           
  5831                           ; BSR set to: 0
  5832  00230E  90D8               	bcf	status,0,c
  5833  002310  3626               	rlcf	___awmod@divisor^0,f,c
  5834  002312  3627               	rlcf	(___awmod@divisor+1)^0,f,c
  5835  002314  2A28               	incf	___awmod@counter^0,f,c
  5836  002316                     l5031:
  5837                           
  5838                           ; BSR set to: 0
  5839  002316  AE27               	btfss	(___awmod@divisor+1)^0,7,c
  5840  002318  D7FA               	goto	l5029
  5841  00231A                     u5890:
  5842                           
  5843                           ; BSR set to: 0
  5844  00231A  5026               	movf	___awmod@divisor^0,w,c
  5845  00231C  5C24               	subwf	___awmod@dividend^0,w,c
  5846  00231E  5027               	movf	(___awmod@divisor+1)^0,w,c
  5847  002320  5825               	subwfb	(___awmod@dividend+1)^0,w,c
  5848  002322  A0D8               	btfss	status,0,c
  5849  002324  D004               	goto	l5037
  5850                           
  5851                           ; BSR set to: 0
  5852  002326  5026               	movf	___awmod@divisor^0,w,c
  5853  002328  5E24               	subwf	___awmod@dividend^0,f,c
  5854  00232A  5027               	movf	(___awmod@divisor+1)^0,w,c
  5855  00232C  5A25               	subwfb	(___awmod@dividend+1)^0,f,c
  5856  00232E                     l5037:
  5857                           
  5858                           ; BSR set to: 0
  5859  00232E  90D8               	bcf	status,0,c
  5860  002330  3227               	rrcf	(___awmod@divisor+1)^0,f,c
  5861  002332  3226               	rrcf	___awmod@divisor^0,f,c
  5862                           
  5863                           ; BSR set to: 0
  5864  002334  2E28               	decfsz	___awmod@counter^0,f,c
  5865  002336  D7F1               	goto	u5890
  5866  002338                     l5041:
  5867                           
  5868                           ; BSR set to: 0
  5869  002338  5029               	movf	___awmod@sign^0,w,c
  5870  00233A  B4D8               	btfsc	status,2,c
  5871  00233C  D004               	goto	l5045
  5872                           
  5873                           ; BSR set to: 0
  5874  00233E  6C24               	negf	___awmod@dividend^0,c
  5875  002340  1E25               	comf	(___awmod@dividend+1)^0,f,c
  5876  002342  B0D8               	btfsc	status,0,c
  5877  002344  2A25               	incf	(___awmod@dividend+1)^0,f,c
  5878  002346                     l5045:
  5879                           
  5880                           ; BSR set to: 0
  5881  002346  C024  F024         	movff	___awmod@dividend,?___awmod
  5882  00234A  C025  F025         	movff	___awmod@dividend+1,?___awmod+1
  5883                           
  5884                           ; BSR set to: 0
  5885  00234E  0012               	return		;funcret
  5886  002350                     __end_of___awmod:
  5887                           	callstack 0
  5888                           
  5889 ;; *************** function ___awdiv *****************
  5890 ;; Defined at:
  5891 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awdiv.c"
  5892 ;; Parameters:    Size  Location     Type
  5893 ;;  dividend        2   41[COMRAM] int 
  5894 ;;  divisor         2   43[COMRAM] int 
  5895 ;; Auto vars:     Size  Location     Type
  5896 ;;  quotient        2   47[COMRAM] int 
  5897 ;;  sign            1   46[COMRAM] unsigned char 
  5898 ;;  counter         1   45[COMRAM] unsigned char 
  5899 ;; Return value:  Size  Location     Type
  5900 ;;                  2   41[COMRAM] int 
  5901 ;; Registers used:
  5902 ;;		wreg, status,2, status,0
  5903 ;; Tracked objects:
  5904 ;;		On entry : 0/0
  5905 ;;		On exit  : 0/0
  5906 ;;		Unchanged: 0/0
  5907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5908 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5909 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5911 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5912 ;;Total ram usage:        8 bytes
  5913 ;; Hardware stack levels used:    1
  5914 ;; Hardware stack levels required when called:    4
  5915 ;; This function calls:
  5916 ;;		Nothing
  5917 ;; This function is called by:
  5918 ;;		_scale
  5919 ;;		_sprintf
  5920 ;; This function uses a non-reentrant model
  5921 ;;
  5922                           
  5923                           	psect	text18
  5924  002080                     __ptext18:
  5925                           	callstack 0
  5926  002080                     ___awdiv:
  5927                           	callstack 23
  5928                           
  5929                           ; BSR set to: 0
  5930                           ;incstack = 0
  5931  002080  0E00               	movlw	0
  5932  002082  6E2F               	movwf	___awdiv@sign^0,c
  5933  002084  AE2D               	btfss	(___awdiv@divisor+1)^0,7,c
  5934  002086  D006               	goto	l4977
  5935  002088  6C2C               	negf	___awdiv@divisor^0,c
  5936  00208A  1E2D               	comf	(___awdiv@divisor+1)^0,f,c
  5937  00208C  B0D8               	btfsc	status,0,c
  5938  00208E  2A2D               	incf	(___awdiv@divisor+1)^0,f,c
  5939  002090  0E01               	movlw	1
  5940  002092  6E2F               	movwf	___awdiv@sign^0,c
  5941  002094                     l4977:
  5942  002094  AE2B               	btfss	(___awdiv@dividend+1)^0,7,c
  5943  002096  D006               	goto	l4983
  5944  002098  6C2A               	negf	___awdiv@dividend^0,c
  5945  00209A  1E2B               	comf	(___awdiv@dividend+1)^0,f,c
  5946  00209C  B0D8               	btfsc	status,0,c
  5947  00209E  2A2B               	incf	(___awdiv@dividend+1)^0,f,c
  5948  0020A0  0E01               	movlw	1
  5949  0020A2  1A2F               	xorwf	___awdiv@sign^0,f,c
  5950  0020A4                     l4983:
  5951  0020A4  0E00               	movlw	0
  5952  0020A6  6E31               	movwf	(___awdiv@quotient+1)^0,c
  5953  0020A8  0E00               	movlw	0
  5954  0020AA  6E30               	movwf	___awdiv@quotient^0,c
  5955  0020AC  502C               	movf	___awdiv@divisor^0,w,c
  5956  0020AE  102D               	iorwf	(___awdiv@divisor+1)^0,w,c
  5957  0020B0  B4D8               	btfsc	status,2,c
  5958  0020B2  D01C               	goto	l5005
  5959  0020B4  0E01               	movlw	1
  5960  0020B6  6E2E               	movwf	___awdiv@counter^0,c
  5961  0020B8  D004               	goto	l4991
  5962  0020BA                     l4989:
  5963  0020BA  90D8               	bcf	status,0,c
  5964  0020BC  362C               	rlcf	___awdiv@divisor^0,f,c
  5965  0020BE  362D               	rlcf	(___awdiv@divisor+1)^0,f,c
  5966  0020C0  2A2E               	incf	___awdiv@counter^0,f,c
  5967  0020C2                     l4991:
  5968  0020C2  AE2D               	btfss	(___awdiv@divisor+1)^0,7,c
  5969  0020C4  D7FA               	goto	l4989
  5970  0020C6                     u5830:
  5971  0020C6  90D8               	bcf	status,0,c
  5972  0020C8  3630               	rlcf	___awdiv@quotient^0,f,c
  5973  0020CA  3631               	rlcf	(___awdiv@quotient+1)^0,f,c
  5974  0020CC  502C               	movf	___awdiv@divisor^0,w,c
  5975  0020CE  5C2A               	subwf	___awdiv@dividend^0,w,c
  5976  0020D0  502D               	movf	(___awdiv@divisor+1)^0,w,c
  5977  0020D2  582B               	subwfb	(___awdiv@dividend+1)^0,w,c
  5978  0020D4  A0D8               	btfss	status,0,c
  5979  0020D6  D005               	goto	l5001
  5980  0020D8  502C               	movf	___awdiv@divisor^0,w,c
  5981  0020DA  5E2A               	subwf	___awdiv@dividend^0,f,c
  5982  0020DC  502D               	movf	(___awdiv@divisor+1)^0,w,c
  5983  0020DE  5A2B               	subwfb	(___awdiv@dividend+1)^0,f,c
  5984  0020E0  8030               	bsf	___awdiv@quotient^0,0,c
  5985  0020E2                     l5001:
  5986  0020E2  90D8               	bcf	status,0,c
  5987  0020E4  322D               	rrcf	(___awdiv@divisor+1)^0,f,c
  5988  0020E6  322C               	rrcf	___awdiv@divisor^0,f,c
  5989  0020E8  2E2E               	decfsz	___awdiv@counter^0,f,c
  5990  0020EA  D7ED               	goto	u5830
  5991  0020EC                     l5005:
  5992  0020EC  502F               	movf	___awdiv@sign^0,w,c
  5993  0020EE  B4D8               	btfsc	status,2,c
  5994  0020F0  D004               	goto	l5009
  5995  0020F2  6C30               	negf	___awdiv@quotient^0,c
  5996  0020F4  1E31               	comf	(___awdiv@quotient+1)^0,f,c
  5997  0020F6  B0D8               	btfsc	status,0,c
  5998  0020F8  2A31               	incf	(___awdiv@quotient+1)^0,f,c
  5999  0020FA                     l5009:
  6000  0020FA  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  6001  0020FE  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  6002  002102  0012               	return		;funcret
  6003  002104                     __end_of___awdiv:
  6004                           	callstack 0
  6005                           
  6006 ;; *************** function _isdigit *****************
  6007 ;; Defined at:
  6008 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\isdigit.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;  c               1    wreg     unsigned char 
  6011 ;; Auto vars:     Size  Location     Type
  6012 ;;  c               1   37[COMRAM] unsigned char 
  6013 ;; Return value:  Size  Location     Type
  6014 ;;		None               void
  6015 ;; Registers used:
  6016 ;;		wreg, status,2, status,0
  6017 ;; Tracked objects:
  6018 ;;		On entry : 3F/0
  6019 ;;		On exit  : 0/0
  6020 ;;		Unchanged: 0/0
  6021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6023 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6024 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6025 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6026 ;;Total ram usage:        3 bytes
  6027 ;; Hardware stack levels used:    1
  6028 ;; Hardware stack levels required when called:    4
  6029 ;; This function calls:
  6030 ;;		Nothing
  6031 ;; This function is called by:
  6032 ;;		_sprintf
  6033 ;; This function uses a non-reentrant model
  6034 ;;
  6035                           
  6036                           	psect	text19
  6037  002AF2                     __ptext19:
  6038                           	callstack 0
  6039  002AF2                     _isdigit:
  6040                           	callstack 24
  6041                           
  6042                           ;incstack = 0
  6043                           ;isdigit@c stored from wreg
  6044  002AF2  6E26               	movwf	isdigit@c^0,c
  6045  002AF4  0E00               	movlw	0
  6046  002AF6  6E25               	movwf	_isdigit$1593^0,c
  6047  002AF8  0E3A               	movlw	58
  6048  002AFA  6026               	cpfslt	isdigit@c^0,c
  6049  002AFC  D005               	goto	l3505
  6050  002AFE  0E2F               	movlw	47
  6051  002B00  6426               	cpfsgt	isdigit@c^0,c
  6052  002B02  D002               	goto	l3505
  6053  002B04  0E01               	movlw	1
  6054  002B06  6E25               	movwf	_isdigit$1593^0,c
  6055  002B08                     l3505:
  6056  002B08  C025  F024         	movff	_isdigit$1593,??_isdigit
  6057  002B0C  3024               	rrcf	??_isdigit^0,w,c
  6058  002B0E  0012               	return		;funcret
  6059  002B10                     __end_of_isdigit:
  6060                           	callstack 0
  6061                           
  6062 ;; *************** function _fround *****************
  6063 ;; Defined at:
  6064 ;;		line 417 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c"
  6065 ;; Parameters:    Size  Location     Type
  6066 ;;  prec            1    wreg     unsigned char 
  6067 ;; Auto vars:     Size  Location     Type
  6068 ;;  prec            1   10[BANK0 ] unsigned char 
  6069 ;; Return value:  Size  Location     Type
  6070 ;;                  3    0[BANK0 ] unsigned char 
  6071 ;; Registers used:
  6072 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6073 ;; Tracked objects:
  6074 ;;		On entry : 3F/0
  6075 ;;		On exit  : 0/0
  6076 ;;		Unchanged: 0/0
  6077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6078 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6079 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6080 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6081 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6082 ;;Total ram usage:       11 bytes
  6083 ;; Hardware stack levels used:    1
  6084 ;; Hardware stack levels required when called:    6
  6085 ;; This function calls:
  6086 ;;		___ftmul
  6087 ;;		___lbdiv
  6088 ;;		___lbmod
  6089 ;; This function is called by:
  6090 ;;		_sprintf
  6091 ;; This function uses a non-reentrant model
  6092 ;;
  6093                           
  6094                           	psect	text20
  6095  0013F2                     __ptext20:
  6096                           	callstack 0
  6097  0013F2                     _fround:
  6098                           	callstack 22
  6099                           
  6100                           ;incstack = 0
  6101                           ;fround@prec stored from wreg
  6102  0013F2  6F8A               	movwf	fround@prec& (0+255),b
  6103                           
  6104                           ;doprnt.c: 421: if(prec>=110)
  6105  0013F4  0E6D               	movlw	109
  6106  0013F6  0100               	movlb	0	; () banked
  6107  0013F8  658A               	cpfsgt	fround@prec& (0+255),b
  6108  0013FA  D081               	goto	l5099
  6109                           
  6110                           ; BSR set to: 0
  6111                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  6112  0013FC  0E00               	movlw	0
  6113  0013FE  6E35               	movwf	___ftmul@f2^0,c
  6114  001400  0E00               	movlw	0
  6115  001402  6E36               	movwf	(___ftmul@f2+1)^0,c
  6116  001404  0E3F               	movlw	63
  6117  001406  6E37               	movwf	(___ftmul@f2+2)^0,c
  6118  001408  0E64               	movlw	100
  6119  00140A  6E28               	movwf	___lbdiv@divisor^0,c
  6120  00140C  518A               	movf	fround@prec& (0+255),w,b
  6121  00140E  EC6D  F014         	call	___lbdiv
  6122  001412  0100               	movlb	0	; () banked
  6123  001414  6F83               	movwf	??_fround& (0+255),b
  6124  001416  5183               	movf	??_fround& (0+255),w,b
  6125  001418  0D03               	mullw	3
  6126  00141A  0E36               	movlw	54
  6127  00141C  26F3               	addwf	243,f,c
  6128  00141E  0E00               	movlw	0
  6129  001420  22F4               	addwfc	244,f,c
  6130  001422  0E0C               	movlw	low __npowers_
  6131  001424  24F3               	addwf	243,w,c
  6132  001426  6EF6               	movwf	tblptrl,c
  6133  001428  0EFF               	movlw	high __npowers_
  6134  00142A  20F4               	addwfc	244,w,c
  6135  00142C  6EF7               	movwf	tblptrh,c
  6136  00142E                     	if	0	;There are less than 3 active tblptr bytes
  6137  00142E                     	endif
  6138  00142E  0009               	tblrd		*+
  6139  001430  CFF5 F032          	movff	tablat,___ftmul@f1
  6140  001434  0009               	tblrd		*+
  6141  001436  CFF5 F033          	movff	tablat,___ftmul@f1+1
  6142  00143A  000A               	tblrd		*-
  6143  00143C  CFF5 F034          	movff	tablat,___ftmul@f1+2
  6144  001440  EC1C  F00D         	call	___ftmul	;wreg free
  6145  001444  C032  F087         	movff	?___ftmul,_fround$1842
  6146  001448  C033  F088         	movff	?___ftmul+1,_fround$1842+1
  6147  00144C  C034  F089         	movff	?___ftmul+2,_fround$1842+2
  6148                           
  6149                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  6150  001450  0E0A               	movlw	10
  6151  001452  6E28               	movwf	___lbdiv@divisor^0,c
  6152  001454  0E64               	movlw	100
  6153  001456  6E24               	movwf	___lbmod@divisor^0,c
  6154  001458  0100               	movlb	0	; () banked
  6155  00145A  518A               	movf	fround@prec& (0+255),w,b
  6156  00145C  ECF7  F014         	call	___lbmod
  6157  001460  EC6D  F014         	call	___lbdiv
  6158  001464  0100               	movlb	0	; () banked
  6159  001466  6F83               	movwf	??_fround& (0+255),b
  6160  001468  5183               	movf	??_fround& (0+255),w,b
  6161  00146A  0D03               	mullw	3
  6162  00146C  0E1B               	movlw	27
  6163  00146E  26F3               	addwf	243,f,c
  6164  001470  0E00               	movlw	0
  6165  001472  22F4               	addwfc	244,f,c
  6166  001474  0E0C               	movlw	low __npowers_
  6167  001476  24F3               	addwf	243,w,c
  6168  001478  6EF6               	movwf	tblptrl,c
  6169  00147A  0EFF               	movlw	high __npowers_
  6170  00147C  20F4               	addwfc	244,w,c
  6171  00147E  6EF7               	movwf	tblptrh,c
  6172  001480                     	if	0	;There are less than 3 active tblptr bytes
  6173  001480                     	endif
  6174  001480  0009               	tblrd		*+
  6175  001482  CFF5 F035          	movff	tablat,___ftmul@f2
  6176  001486  0009               	tblrd		*+
  6177  001488  CFF5 F036          	movff	tablat,___ftmul@f2+1
  6178  00148C  000A               	tblrd		*-
  6179  00148E  CFF5 F037          	movff	tablat,___ftmul@f2+2
  6180  001492  C087  F032         	movff	_fround$1842,___ftmul@f1
  6181  001496  C088  F033         	movff	_fround$1842+1,___ftmul@f1+1
  6182  00149A  C089  F034         	movff	_fround$1842+2,___ftmul@f1+2
  6183  00149E  EC1C  F00D         	call	___ftmul	;wreg free
  6184  0014A2  C032  F084         	movff	?___ftmul,_fround$1843
  6185  0014A6  C033  F085         	movff	?___ftmul+1,_fround$1843+1
  6186  0014AA  C034  F086         	movff	?___ftmul+2,_fround$1843+2
  6187                           
  6188                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  6189  0014AE  C084  F032         	movff	_fround$1843,___ftmul@f1
  6190  0014B2  C085  F033         	movff	_fround$1843+1,___ftmul@f1+1
  6191  0014B6  C086  F034         	movff	_fround$1843+2,___ftmul@f1+2
  6192  0014BA  0E0A               	movlw	10
  6193  0014BC  6E24               	movwf	___lbmod@divisor^0,c
  6194  0014BE  0100               	movlb	0	; () banked
  6195  0014C0  518A               	movf	fround@prec& (0+255),w,b
  6196  0014C2  ECF7  F014         	call	___lbmod
  6197  0014C6  0100               	movlb	0	; () banked
  6198  0014C8  6F83               	movwf	??_fround& (0+255),b
  6199  0014CA  5183               	movf	??_fround& (0+255),w,b
  6200  0014CC  0D03               	mullw	3
  6201  0014CE  0E0C               	movlw	low __npowers_
  6202  0014D0  24F3               	addwf	243,w,c
  6203  0014D2  6EF6               	movwf	tblptrl,c
  6204  0014D4  0EFF               	movlw	high __npowers_
  6205  0014D6  20F4               	addwfc	244,w,c
  6206  0014D8  6EF7               	movwf	tblptrh,c
  6207  0014DA                     	if	0	;There are less than 3 active tblptr bytes
  6208  0014DA                     	endif
  6209  0014DA  0009               	tblrd		*+
  6210  0014DC  CFF5 F035          	movff	tablat,___ftmul@f2
  6211  0014E0  0009               	tblrd		*+
  6212  0014E2  CFF5 F036          	movff	tablat,___ftmul@f2+1
  6213  0014E6  000A               	tblrd		*-
  6214  0014E8  CFF5 F037          	movff	tablat,___ftmul@f2+2
  6215  0014EC  EC1C  F00D         	call	___ftmul	;wreg free
  6216  0014F0  C032  F080         	movff	?___ftmul,?_fround
  6217  0014F4  C033  F081         	movff	?___ftmul+1,?_fround+1
  6218  0014F8  C034  F082         	movff	?___ftmul+2,?_fround+2
  6219  0014FC  0012               	return	
  6220  0014FE                     l5099:
  6221                           
  6222                           ; BSR set to: 0
  6223                           ;doprnt.c: 423: else if(prec > 10)
  6224  0014FE  0E0A               	movlw	10
  6225  001500  658A               	cpfsgt	fround@prec& (0+255),b
  6226  001502  D052               	goto	l5105
  6227                           
  6228                           ; BSR set to: 0
  6229                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  6230  001504  0E00               	movlw	0
  6231  001506  6E35               	movwf	___ftmul@f2^0,c
  6232  001508  0E00               	movlw	0
  6233  00150A  6E36               	movwf	(___ftmul@f2+1)^0,c
  6234  00150C  0E3F               	movlw	63
  6235  00150E  6E37               	movwf	(___ftmul@f2+2)^0,c
  6236  001510  0E0A               	movlw	10
  6237  001512  6E28               	movwf	___lbdiv@divisor^0,c
  6238  001514  518A               	movf	fround@prec& (0+255),w,b
  6239  001516  EC6D  F014         	call	___lbdiv
  6240  00151A  0100               	movlb	0	; () banked
  6241  00151C  6F83               	movwf	??_fround& (0+255),b
  6242  00151E  5183               	movf	??_fround& (0+255),w,b
  6243  001520  0D03               	mullw	3
  6244  001522  0E1B               	movlw	27
  6245  001524  26F3               	addwf	243,f,c
  6246  001526  0E00               	movlw	0
  6247  001528  22F4               	addwfc	244,f,c
  6248  00152A  0E0C               	movlw	low __npowers_
  6249  00152C  24F3               	addwf	243,w,c
  6250  00152E  6EF6               	movwf	tblptrl,c
  6251  001530  0EFF               	movlw	high __npowers_
  6252  001532  20F4               	addwfc	244,w,c
  6253  001534  6EF7               	movwf	tblptrh,c
  6254  001536                     	if	0	;There are less than 3 active tblptr bytes
  6255  001536                     	endif
  6256  001536  0009               	tblrd		*+
  6257  001538  CFF5 F032          	movff	tablat,___ftmul@f1
  6258  00153C  0009               	tblrd		*+
  6259  00153E  CFF5 F033          	movff	tablat,___ftmul@f1+1
  6260  001542  000A               	tblrd		*-
  6261  001544  CFF5 F034          	movff	tablat,___ftmul@f1+2
  6262  001548  EC1C  F00D         	call	___ftmul	;wreg free
  6263  00154C  C032  F087         	movff	?___ftmul,_fround$1842
  6264  001550  C033  F088         	movff	?___ftmul+1,_fround$1842+1
  6265  001554  C034  F089         	movff	?___ftmul+2,_fround$1842+2
  6266                           
  6267                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  6268  001558  C087  F032         	movff	_fround$1842,___ftmul@f1
  6269  00155C  C088  F033         	movff	_fround$1842+1,___ftmul@f1+1
  6270  001560  C089  F034         	movff	_fround$1842+2,___ftmul@f1+2
  6271  001564  0E0A               	movlw	10
  6272  001566  6E24               	movwf	___lbmod@divisor^0,c
  6273  001568  0100               	movlb	0	; () banked
  6274  00156A  518A               	movf	fround@prec& (0+255),w,b
  6275  00156C  ECF7  F014         	call	___lbmod
  6276  001570  0100               	movlb	0	; () banked
  6277  001572  6F83               	movwf	??_fround& (0+255),b
  6278  001574  5183               	movf	??_fround& (0+255),w,b
  6279  001576  0D03               	mullw	3
  6280  001578  0E0C               	movlw	low __npowers_
  6281  00157A  24F3               	addwf	243,w,c
  6282  00157C  6EF6               	movwf	tblptrl,c
  6283  00157E  0EFF               	movlw	high __npowers_
  6284  001580  20F4               	addwfc	244,w,c
  6285  001582  6EF7               	movwf	tblptrh,c
  6286  001584                     	if	0	;There are less than 3 active tblptr bytes
  6287  001584                     	endif
  6288  001584  0009               	tblrd		*+
  6289  001586  CFF5 F035          	movff	tablat,___ftmul@f2
  6290  00158A  0009               	tblrd		*+
  6291  00158C  CFF5 F036          	movff	tablat,___ftmul@f2+1
  6292  001590  000A               	tblrd		*-
  6293  001592  CFF5 F037          	movff	tablat,___ftmul@f2+2
  6294  001596  EC1C  F00D         	call	___ftmul	;wreg free
  6295  00159A  C032  F080         	movff	?___ftmul,?_fround
  6296  00159E  C033  F081         	movff	?___ftmul+1,?_fround+1
  6297  0015A2  C034  F082         	movff	?___ftmul+2,?_fround+2
  6298  0015A6  0012               	return	
  6299  0015A8                     l5105:
  6300                           
  6301                           ; BSR set to: 0
  6302                           ;doprnt.c: 425: return 0.5 * _npowers_[prec];
  6303  0015A8  518A               	movf	fround@prec& (0+255),w,b
  6304  0015AA  0D03               	mullw	3
  6305  0015AC  0E0C               	movlw	low __npowers_
  6306  0015AE  24F3               	addwf	243,w,c
  6307  0015B0  6EF6               	movwf	tblptrl,c
  6308  0015B2  0EFF               	movlw	high __npowers_
  6309  0015B4  20F4               	addwfc	244,w,c
  6310  0015B6  6EF7               	movwf	tblptrh,c
  6311  0015B8                     	if	0	;There are less than 3 active tblptr bytes
  6312  0015B8                     	endif
  6313  0015B8  0009               	tblrd		*+
  6314  0015BA  CFF5 F032          	movff	tablat,___ftmul@f1
  6315  0015BE  0009               	tblrd		*+
  6316  0015C0  CFF5 F033          	movff	tablat,___ftmul@f1+1
  6317  0015C4  000A               	tblrd		*-
  6318  0015C6  CFF5 F034          	movff	tablat,___ftmul@f1+2
  6319  0015CA  0E00               	movlw	0
  6320  0015CC  6E35               	movwf	___ftmul@f2^0,c
  6321  0015CE  0E00               	movlw	0
  6322  0015D0  6E36               	movwf	(___ftmul@f2+1)^0,c
  6323  0015D2  0E3F               	movlw	63
  6324  0015D4  6E37               	movwf	(___ftmul@f2+2)^0,c
  6325  0015D6  EC1C  F00D         	call	___ftmul	;wreg free
  6326  0015DA  C032  F080         	movff	?___ftmul,?_fround
  6327  0015DE  C033  F081         	movff	?___ftmul+1,?_fround+1
  6328  0015E2  C034  F082         	movff	?___ftmul+2,?_fround+2
  6329  0015E6  0012               	return		;funcret
  6330  0015E8                     __end_of_fround:
  6331                           	callstack 0
  6332                           
  6333 ;; *************** function ___lbmod *****************
  6334 ;; Defined at:
  6335 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lbmod.c"
  6336 ;; Parameters:    Size  Location     Type
  6337 ;;  dividend        1    wreg     unsigned char 
  6338 ;;  divisor         1   35[COMRAM] unsigned char 
  6339 ;; Auto vars:     Size  Location     Type
  6340 ;;  dividend        1   36[COMRAM] unsigned char 
  6341 ;;  rem             1   38[COMRAM] unsigned char 
  6342 ;;  counter         1   37[COMRAM] unsigned char 
  6343 ;; Return value:  Size  Location     Type
  6344 ;;                  1    wreg      unsigned char 
  6345 ;; Registers used:
  6346 ;;		wreg, status,2, status,0
  6347 ;; Tracked objects:
  6348 ;;		On entry : 3F/0
  6349 ;;		On exit  : 0/0
  6350 ;;		Unchanged: 0/0
  6351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6352 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6353 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6355 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6356 ;;Total ram usage:        4 bytes
  6357 ;; Hardware stack levels used:    1
  6358 ;; Hardware stack levels required when called:    4
  6359 ;; This function calls:
  6360 ;;		Nothing
  6361 ;; This function is called by:
  6362 ;;		_fround
  6363 ;; This function uses a non-reentrant model
  6364 ;;
  6365                           
  6366                           	psect	text21
  6367  0029EE                     __ptext21:
  6368                           	callstack 0
  6369  0029EE                     ___lbmod:
  6370                           	callstack 23
  6371                           
  6372                           ;incstack = 0
  6373                           ;___lbmod@dividend stored from wreg
  6374  0029EE  6E25               	movwf	___lbmod@dividend^0,c
  6375  0029F0  0E08               	movlw	8
  6376  0029F2  6E26               	movwf	___lbmod@counter^0,c
  6377  0029F4  0E00               	movlw	0
  6378  0029F6  6E27               	movwf	___lbmod@rem^0,c
  6379  0029F8                     l5077:
  6380  0029F8  90D8               	bcf	status,0,c
  6381  0029FA  3425               	rlcf	___lbmod@dividend^0,w,c
  6382  0029FC  3427               	rlcf	___lbmod@rem^0,w,c
  6383  0029FE  6E27               	movwf	___lbmod@rem^0,c
  6384  002A00  90D8               	bcf	status,0,c
  6385  002A02  3625               	rlcf	___lbmod@dividend^0,f,c
  6386  002A04  5024               	movf	___lbmod@divisor^0,w,c
  6387  002A06  5C27               	subwf	___lbmod@rem^0,w,c
  6388  002A08  A0D8               	btfss	status,0,c
  6389  002A0A  D002               	goto	l5085
  6390  002A0C  5024               	movf	___lbmod@divisor^0,w,c
  6391  002A0E  5E27               	subwf	___lbmod@rem^0,f,c
  6392  002A10                     l5085:
  6393  002A10  2E26               	decfsz	___lbmod@counter^0,f,c
  6394  002A12  D7F2               	goto	l5077
  6395  002A14  5027               	movf	___lbmod@rem^0,w,c
  6396  002A16  0012               	return		;funcret
  6397  002A18                     __end_of___lbmod:
  6398                           	callstack 0
  6399                           
  6400 ;; *************** function ___lbdiv *****************
  6401 ;; Defined at:
  6402 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lbdiv.c"
  6403 ;; Parameters:    Size  Location     Type
  6404 ;;  dividend        1    wreg     unsigned char 
  6405 ;;  divisor         1   39[COMRAM] unsigned char 
  6406 ;; Auto vars:     Size  Location     Type
  6407 ;;  dividend        1   40[COMRAM] unsigned char 
  6408 ;;  quotient        1   42[COMRAM] unsigned char 
  6409 ;;  counter         1   41[COMRAM] unsigned char 
  6410 ;; Return value:  Size  Location     Type
  6411 ;;                  1    wreg      unsigned char 
  6412 ;; Registers used:
  6413 ;;		wreg, status,2, status,0
  6414 ;; Tracked objects:
  6415 ;;		On entry : 0/0
  6416 ;;		On exit  : 0/0
  6417 ;;		Unchanged: 0/0
  6418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6419 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6420 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6422 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6423 ;;Total ram usage:        4 bytes
  6424 ;; Hardware stack levels used:    1
  6425 ;; Hardware stack levels required when called:    4
  6426 ;; This function calls:
  6427 ;;		Nothing
  6428 ;; This function is called by:
  6429 ;;		_fround
  6430 ;; This function uses a non-reentrant model
  6431 ;;
  6432                           
  6433                           	psect	text22
  6434  0028DA                     __ptext22:
  6435                           	callstack 0
  6436  0028DA                     ___lbdiv:
  6437                           	callstack 23
  6438                           
  6439                           ;incstack = 0
  6440                           ;___lbdiv@dividend stored from wreg
  6441  0028DA  6E29               	movwf	___lbdiv@dividend^0,c
  6442  0028DC  0E00               	movlw	0
  6443  0028DE  6E2B               	movwf	___lbdiv@quotient^0,c
  6444  0028E0  5028               	movf	___lbdiv@divisor^0,w,c
  6445  0028E2  B4D8               	btfsc	status,2,c
  6446  0028E4  D015               	goto	l5071
  6447  0028E6  0E01               	movlw	1
  6448  0028E8  6E2A               	movwf	___lbdiv@counter^0,c
  6449  0028EA  D003               	goto	l5059
  6450  0028EC                     l5055:
  6451  0028EC  90D8               	bcf	status,0,c
  6452  0028EE  3628               	rlcf	___lbdiv@divisor^0,f,c
  6453  0028F0  2A2A               	incf	___lbdiv@counter^0,f,c
  6454  0028F2                     l5059:
  6455  0028F2  AE28               	btfss	___lbdiv@divisor^0,7,c
  6456  0028F4  D7FB               	goto	l5055
  6457  0028F6                     u5930:
  6458  0028F6  90D8               	bcf	status,0,c
  6459  0028F8  362B               	rlcf	___lbdiv@quotient^0,f,c
  6460  0028FA  5028               	movf	___lbdiv@divisor^0,w,c
  6461  0028FC  5C29               	subwf	___lbdiv@dividend^0,w,c
  6462  0028FE  A0D8               	btfss	status,0,c
  6463  002900  D003               	goto	l5067
  6464  002902  5028               	movf	___lbdiv@divisor^0,w,c
  6465  002904  5E29               	subwf	___lbdiv@dividend^0,f,c
  6466  002906  802B               	bsf	___lbdiv@quotient^0,0,c
  6467  002908                     l5067:
  6468  002908  90D8               	bcf	status,0,c
  6469  00290A  3228               	rrcf	___lbdiv@divisor^0,f,c
  6470  00290C  2E2A               	decfsz	___lbdiv@counter^0,f,c
  6471  00290E  D7F3               	goto	u5930
  6472  002910                     l5071:
  6473  002910  502B               	movf	___lbdiv@quotient^0,w,c
  6474  002912  0012               	return		;funcret
  6475  002914                     __end_of___lbdiv:
  6476                           	callstack 0
  6477                           
  6478 ;; *************** function ___ftmul *****************
  6479 ;; Defined at:
  6480 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftmul.c"
  6481 ;; Parameters:    Size  Location     Type
  6482 ;;  f1              3   49[COMRAM] float 
  6483 ;;  f2              3   52[COMRAM] float 
  6484 ;; Auto vars:     Size  Location     Type
  6485 ;;  f3_as_produc    3   59[COMRAM] unsigned um
  6486 ;;  sign            1   63[COMRAM] unsigned char 
  6487 ;;  cntr            1   62[COMRAM] unsigned char 
  6488 ;;  exp             1   58[COMRAM] unsigned char 
  6489 ;; Return value:  Size  Location     Type
  6490 ;;                  3   49[COMRAM] float 
  6491 ;; Registers used:
  6492 ;;		wreg, status,2, status,0, cstack
  6493 ;; Tracked objects:
  6494 ;;		On entry : 0/0
  6495 ;;		On exit  : 0/0
  6496 ;;		Unchanged: 0/0
  6497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6498 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6499 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6500 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6501 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6502 ;;Total ram usage:       15 bytes
  6503 ;; Hardware stack levels used:    1
  6504 ;; Hardware stack levels required when called:    5
  6505 ;; This function calls:
  6506 ;;		___ftpack
  6507 ;; This function is called by:
  6508 ;;		_main
  6509 ;;		_fround
  6510 ;;		_scale
  6511 ;;		_sprintf
  6512 ;; This function uses a non-reentrant model
  6513 ;;
  6514                           
  6515                           	psect	text23
  6516  001A38                     __ptext23:
  6517                           	callstack 0
  6518  001A38                     ___ftmul:
  6519                           	callstack 22
  6520                           
  6521                           ;incstack = 0
  6522  001A38  C034  F038         	movff	___ftmul@f1+2,??___ftmul
  6523  001A3C  6A39               	clrf	(??___ftmul+1)^0,c
  6524  001A3E  6A3A               	clrf	(??___ftmul+2)^0,c
  6525  001A40  3433               	rlcf	(___ftmul@f1+1)^0,w,c
  6526  001A42  3638               	rlcf	??___ftmul^0,f,c
  6527  001A44  E301               	bnc	u5741
  6528  001A46  8039               	bsf	(??___ftmul+1)^0,0,c
  6529  001A48                     u5741:
  6530  001A48  5038               	movf	??___ftmul^0,w,c
  6531  001A4A  6E3B               	movwf	___ftmul@exp^0,c
  6532  001A4C  503B               	movf	___ftmul@exp^0,w,c
  6533  001A4E  A4D8               	btfss	status,2,c
  6534  001A50  D007               	goto	l4927
  6535  001A52  0E00               	movlw	0
  6536  001A54  6E32               	movwf	?___ftmul^0,c
  6537  001A56  0E00               	movlw	0
  6538  001A58  6E33               	movwf	(?___ftmul+1)^0,c
  6539  001A5A  0E00               	movlw	0
  6540  001A5C  6E34               	movwf	(?___ftmul+2)^0,c
  6541  001A5E  0012               	return	
  6542  001A60                     l4927:
  6543  001A60  C037  F038         	movff	___ftmul@f2+2,??___ftmul
  6544  001A64  6A39               	clrf	(??___ftmul+1)^0,c
  6545  001A66  6A3A               	clrf	(??___ftmul+2)^0,c
  6546  001A68  3436               	rlcf	(___ftmul@f2+1)^0,w,c
  6547  001A6A  3638               	rlcf	??___ftmul^0,f,c
  6548  001A6C  E301               	bnc	u5761
  6549  001A6E  8039               	bsf	(??___ftmul+1)^0,0,c
  6550  001A70                     u5761:
  6551  001A70  5038               	movf	??___ftmul^0,w,c
  6552  001A72  6E40               	movwf	___ftmul@sign^0,c
  6553  001A74  5040               	movf	___ftmul@sign^0,w,c
  6554  001A76  A4D8               	btfss	status,2,c
  6555  001A78  D007               	goto	l4933
  6556  001A7A  0E00               	movlw	0
  6557  001A7C  6E32               	movwf	?___ftmul^0,c
  6558  001A7E  0E00               	movlw	0
  6559  001A80  6E33               	movwf	(?___ftmul+1)^0,c
  6560  001A82  0E00               	movlw	0
  6561  001A84  6E34               	movwf	(?___ftmul+2)^0,c
  6562  001A86  0012               	return	
  6563  001A88                     l4933:
  6564  001A88  5040               	movf	___ftmul@sign^0,w,c
  6565  001A8A  0F7B               	addlw	123
  6566  001A8C  263B               	addwf	___ftmul@exp^0,f,c
  6567  001A8E  C034  F040         	movff	___ftmul@f1+2,___ftmul@sign
  6568  001A92  5037               	movf	(___ftmul@f2+2)^0,w,c
  6569  001A94  1A40               	xorwf	___ftmul@sign^0,f,c
  6570  001A96  0E80               	movlw	128
  6571  001A98  1640               	andwf	___ftmul@sign^0,f,c
  6572  001A9A  8E33               	bsf	(___ftmul@f1+1)^0,7,c
  6573  001A9C  8E36               	bsf	(___ftmul@f2+1)^0,7,c
  6574  001A9E  0EFF               	movlw	255
  6575  001AA0  1635               	andwf	___ftmul@f2^0,f,c
  6576  001AA2  0EFF               	movlw	255
  6577  001AA4  1636               	andwf	(___ftmul@f2+1)^0,f,c
  6578  001AA6  0E00               	movlw	0
  6579  001AA8  1637               	andwf	(___ftmul@f2+2)^0,f,c
  6580  001AAA  0E00               	movlw	0
  6581  001AAC  6E3C               	movwf	___ftmul@f3_as_product^0,c
  6582  001AAE  0E00               	movlw	0
  6583  001AB0  6E3D               	movwf	(___ftmul@f3_as_product+1)^0,c
  6584  001AB2  0E00               	movlw	0
  6585  001AB4  6E3E               	movwf	(___ftmul@f3_as_product+2)^0,c
  6586  001AB6  0E07               	movlw	7
  6587  001AB8  6E3F               	movwf	___ftmul@cntr^0,c
  6588  001ABA                     l4947:
  6589  001ABA  A032               	btfss	___ftmul@f1^0,0,c
  6590  001ABC  D006               	goto	l4951
  6591  001ABE  5035               	movf	___ftmul@f2^0,w,c
  6592  001AC0  263C               	addwf	___ftmul@f3_as_product^0,f,c
  6593  001AC2  5036               	movf	(___ftmul@f2+1)^0,w,c
  6594  001AC4  223D               	addwfc	(___ftmul@f3_as_product+1)^0,f,c
  6595  001AC6  5037               	movf	(___ftmul@f2+2)^0,w,c
  6596  001AC8  223E               	addwfc	(___ftmul@f3_as_product+2)^0,f,c
  6597  001ACA                     l4951:
  6598  001ACA  90D8               	bcf	status,0,c
  6599  001ACC  3234               	rrcf	(___ftmul@f1+2)^0,f,c
  6600  001ACE  3233               	rrcf	(___ftmul@f1+1)^0,f,c
  6601  001AD0  3232               	rrcf	___ftmul@f1^0,f,c
  6602  001AD2  90D8               	bcf	status,0,c
  6603  001AD4  3635               	rlcf	___ftmul@f2^0,f,c
  6604  001AD6  3636               	rlcf	(___ftmul@f2+1)^0,f,c
  6605  001AD8  3637               	rlcf	(___ftmul@f2+2)^0,f,c
  6606  001ADA  2E3F               	decfsz	___ftmul@cntr^0,f,c
  6607  001ADC  D7EE               	goto	l4947
  6608  001ADE  0E09               	movlw	9
  6609  001AE0  6E3F               	movwf	___ftmul@cntr^0,c
  6610  001AE2                     l4957:
  6611  001AE2  A032               	btfss	___ftmul@f1^0,0,c
  6612  001AE4  D006               	goto	l4961
  6613  001AE6  5035               	movf	___ftmul@f2^0,w,c
  6614  001AE8  263C               	addwf	___ftmul@f3_as_product^0,f,c
  6615  001AEA  5036               	movf	(___ftmul@f2+1)^0,w,c
  6616  001AEC  223D               	addwfc	(___ftmul@f3_as_product+1)^0,f,c
  6617  001AEE  5037               	movf	(___ftmul@f2+2)^0,w,c
  6618  001AF0  223E               	addwfc	(___ftmul@f3_as_product+2)^0,f,c
  6619  001AF2                     l4961:
  6620  001AF2  90D8               	bcf	status,0,c
  6621  001AF4  3234               	rrcf	(___ftmul@f1+2)^0,f,c
  6622  001AF6  3233               	rrcf	(___ftmul@f1+1)^0,f,c
  6623  001AF8  3232               	rrcf	___ftmul@f1^0,f,c
  6624  001AFA  90D8               	bcf	status,0,c
  6625  001AFC  323E               	rrcf	(___ftmul@f3_as_product+2)^0,f,c
  6626  001AFE  323D               	rrcf	(___ftmul@f3_as_product+1)^0,f,c
  6627  001B00  323C               	rrcf	___ftmul@f3_as_product^0,f,c
  6628  001B02  2E3F               	decfsz	___ftmul@cntr^0,f,c
  6629  001B04  D7EE               	goto	l4957
  6630  001B06  C03C  F024         	movff	___ftmul@f3_as_product,___ftpack@arg
  6631  001B0A  C03D  F025         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6632  001B0E  C03E  F026         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6633  001B12  C03B  F027         	movff	___ftmul@exp,___ftpack@exp
  6634  001B16  C040  F028         	movff	___ftmul@sign,___ftpack@sign
  6635  001B1A  EC4D  F00F         	call	___ftpack	;wreg free
  6636  001B1E  C024  F032         	movff	?___ftpack,?___ftmul
  6637  001B22  C025  F033         	movff	?___ftpack+1,?___ftmul+1
  6638  001B26  C026  F034         	movff	?___ftpack+2,?___ftmul+2
  6639  001B2A  0012               	return		;funcret
  6640  001B2C                     __end_of___ftmul:
  6641                           	callstack 0
  6642                           
  6643 ;; *************** function __tdiv_to_l_ *****************
  6644 ;; Defined at:
  6645 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftdivl.c"
  6646 ;; Parameters:    Size  Location     Type
  6647 ;;  f1              3   35[COMRAM] float 
  6648 ;;  f2              3   38[COMRAM] float 
  6649 ;; Auto vars:     Size  Location     Type
  6650 ;;  quot            4   44[COMRAM] unsigned long 
  6651 ;;  exp1            1   49[COMRAM] unsigned char 
  6652 ;;  cntr            1   48[COMRAM] unsigned char 
  6653 ;; Return value:  Size  Location     Type
  6654 ;;                  4   35[COMRAM] unsigned long 
  6655 ;; Registers used:
  6656 ;;		wreg, status,2, status,0
  6657 ;; Tracked objects:
  6658 ;;		On entry : 0/0
  6659 ;;		On exit  : 0/0
  6660 ;;		Unchanged: 0/0
  6661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6662 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6663 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6664 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6665 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6666 ;;Total ram usage:       15 bytes
  6667 ;; Hardware stack levels used:    1
  6668 ;; Hardware stack levels required when called:    4
  6669 ;; This function calls:
  6670 ;;		Nothing
  6671 ;; This function is called by:
  6672 ;;		_sprintf
  6673 ;; This function uses a non-reentrant model
  6674 ;;
  6675                           
  6676                           	psect	text24
  6677  00193A                     __ptext24:
  6678                           	callstack 0
  6679  00193A                     __tdiv_to_l_:
  6680                           	callstack 24
  6681                           
  6682                           ;incstack = 0
  6683  00193A  C026  F02A         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6684  00193E  6A2B               	clrf	(??__tdiv_to_l_+1)^0,c
  6685  001940  6A2C               	clrf	(??__tdiv_to_l_+2)^0,c
  6686  001942  3425               	rlcf	(__tdiv_to_l_@f1+1)^0,w,c
  6687  001944  362A               	rlcf	??__tdiv_to_l_^0,f,c
  6688  001946  E301               	bnc	u3371
  6689  001948  802B               	bsf	(??__tdiv_to_l_+1)^0,0,c
  6690  00194A                     u3371:
  6691  00194A  502A               	movf	??__tdiv_to_l_^0,w,c
  6692  00194C  6E32               	movwf	__tdiv_to_l_@exp1^0,c
  6693  00194E  5032               	movf	__tdiv_to_l_@exp1^0,w,c
  6694  001950  A4D8               	btfss	status,2,c
  6695  001952  D009               	goto	l3515
  6696  001954                     u3380:
  6697  001954  0E00               	movlw	0
  6698  001956  6E24               	movwf	?__tdiv_to_l_^0,c
  6699  001958  0E00               	movlw	0
  6700  00195A  6E25               	movwf	(?__tdiv_to_l_+1)^0,c
  6701  00195C  0E00               	movlw	0
  6702  00195E  6E26               	movwf	(?__tdiv_to_l_+2)^0,c
  6703  001960  0E00               	movlw	0
  6704  001962  6E27               	movwf	(?__tdiv_to_l_+3)^0,c
  6705  001964  0012               	return	
  6706  001966                     l3515:
  6707  001966  C029  F02A         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6708  00196A  6A2B               	clrf	(??__tdiv_to_l_+1)^0,c
  6709  00196C  6A2C               	clrf	(??__tdiv_to_l_+2)^0,c
  6710  00196E  3428               	rlcf	(__tdiv_to_l_@f2+1)^0,w,c
  6711  001970  362A               	rlcf	??__tdiv_to_l_^0,f,c
  6712  001972  E301               	bnc	u3391
  6713  001974  802B               	bsf	(??__tdiv_to_l_+1)^0,0,c
  6714  001976                     u3391:
  6715  001976  502A               	movf	??__tdiv_to_l_^0,w,c
  6716  001978  6E31               	movwf	__tdiv_to_l_@cntr^0,c
  6717  00197A  5031               	movf	__tdiv_to_l_@cntr^0,w,c
  6718  00197C  B4D8               	btfsc	status,2,c
  6719  00197E  D7EA               	goto	u3380
  6720  001980  8E25               	bsf	(__tdiv_to_l_@f1+1)^0,7,c
  6721  001982  0EFF               	movlw	255
  6722  001984  1624               	andwf	__tdiv_to_l_@f1^0,f,c
  6723  001986  0EFF               	movlw	255
  6724  001988  1625               	andwf	(__tdiv_to_l_@f1+1)^0,f,c
  6725  00198A  0E00               	movlw	0
  6726  00198C  1626               	andwf	(__tdiv_to_l_@f1+2)^0,f,c
  6727  00198E  8E28               	bsf	(__tdiv_to_l_@f2+1)^0,7,c
  6728  001990  0EFF               	movlw	255
  6729  001992  1627               	andwf	__tdiv_to_l_@f2^0,f,c
  6730  001994  0EFF               	movlw	255
  6731  001996  1628               	andwf	(__tdiv_to_l_@f2+1)^0,f,c
  6732  001998  0E00               	movlw	0
  6733  00199A  1629               	andwf	(__tdiv_to_l_@f2+2)^0,f,c
  6734  00199C  0E00               	movlw	0
  6735  00199E  6E2D               	movwf	__tdiv_to_l_@quot^0,c
  6736  0019A0  0E00               	movlw	0
  6737  0019A2  6E2E               	movwf	(__tdiv_to_l_@quot+1)^0,c
  6738  0019A4  0E00               	movlw	0
  6739  0019A6  6E2F               	movwf	(__tdiv_to_l_@quot+2)^0,c
  6740  0019A8  0E00               	movlw	0
  6741  0019AA  6E30               	movwf	(__tdiv_to_l_@quot+3)^0,c
  6742  0019AC  0E7F               	movlw	127
  6743  0019AE  5E32               	subwf	__tdiv_to_l_@exp1^0,f,c
  6744  0019B0  5031               	movf	__tdiv_to_l_@cntr^0,w,c
  6745  0019B2  0F98               	addlw	152
  6746  0019B4  5E32               	subwf	__tdiv_to_l_@exp1^0,f,c
  6747  0019B6  0E18               	movlw	24
  6748  0019B8  6E31               	movwf	__tdiv_to_l_@cntr^0,c
  6749  0019BA                     l916:
  6750  0019BA  90D8               	bcf	status,0,c
  6751  0019BC  362D               	rlcf	__tdiv_to_l_@quot^0,f,c
  6752  0019BE  362E               	rlcf	(__tdiv_to_l_@quot+1)^0,f,c
  6753  0019C0  362F               	rlcf	(__tdiv_to_l_@quot+2)^0,f,c
  6754  0019C2  3630               	rlcf	(__tdiv_to_l_@quot+3)^0,f,c
  6755  0019C4  5027               	movf	__tdiv_to_l_@f2^0,w,c
  6756  0019C6  5C24               	subwf	__tdiv_to_l_@f1^0,w,c
  6757  0019C8  5028               	movf	(__tdiv_to_l_@f2+1)^0,w,c
  6758  0019CA  5825               	subwfb	(__tdiv_to_l_@f1+1)^0,w,c
  6759  0019CC  5029               	movf	(__tdiv_to_l_@f2+2)^0,w,c
  6760  0019CE  5826               	subwfb	(__tdiv_to_l_@f1+2)^0,w,c
  6761  0019D0  A0D8               	btfss	status,0,c
  6762  0019D2  D007               	goto	l917
  6763  0019D4  5027               	movf	__tdiv_to_l_@f2^0,w,c
  6764  0019D6  5E24               	subwf	__tdiv_to_l_@f1^0,f,c
  6765  0019D8  5028               	movf	(__tdiv_to_l_@f2+1)^0,w,c
  6766  0019DA  5A25               	subwfb	(__tdiv_to_l_@f1+1)^0,f,c
  6767  0019DC  5029               	movf	(__tdiv_to_l_@f2+2)^0,w,c
  6768  0019DE  5A26               	subwfb	(__tdiv_to_l_@f1+2)^0,f,c
  6769  0019E0  802D               	bsf	__tdiv_to_l_@quot^0,0,c
  6770  0019E2                     l917:
  6771  0019E2  90D8               	bcf	status,0,c
  6772  0019E4  3624               	rlcf	__tdiv_to_l_@f1^0,f,c
  6773  0019E6  3625               	rlcf	(__tdiv_to_l_@f1+1)^0,f,c
  6774  0019E8  3626               	rlcf	(__tdiv_to_l_@f1+2)^0,f,c
  6775  0019EA  2E31               	decfsz	__tdiv_to_l_@cntr^0,f,c
  6776  0019EC  D7E6               	goto	l916
  6777  0019EE  AE32               	btfss	__tdiv_to_l_@exp1^0,7,c
  6778  0019F0  D00D               	goto	l3555
  6779  0019F2  5032               	movf	__tdiv_to_l_@exp1^0,w,c
  6780  0019F4  0A80               	xorlw	128
  6781  0019F6  0F97               	addlw	151
  6782  0019F8  A0D8               	btfss	status,0,c
  6783  0019FA  D7AC               	goto	u3380
  6784  0019FC                     l3551:
  6785  0019FC  90D8               	bcf	status,0,c
  6786  0019FE  3230               	rrcf	(__tdiv_to_l_@quot+3)^0,f,c
  6787  001A00  322F               	rrcf	(__tdiv_to_l_@quot+2)^0,f,c
  6788  001A02  322E               	rrcf	(__tdiv_to_l_@quot+1)^0,f,c
  6789  001A04  322D               	rrcf	__tdiv_to_l_@quot^0,f,c
  6790  001A06  3E32               	incfsz	__tdiv_to_l_@exp1^0,f,c
  6791  001A08  D7F9               	goto	l3551
  6792  001A0A  D00D               	goto	u3450
  6793  001A0C                     l3555:
  6794  001A0C  0E17               	movlw	23
  6795  001A0E  6432               	cpfsgt	__tdiv_to_l_@exp1^0,c
  6796  001A10  D007               	goto	l3563
  6797  001A12  D7A0               	goto	u3380
  6798  001A14                     l3561:
  6799  001A14  90D8               	bcf	status,0,c
  6800  001A16  362D               	rlcf	__tdiv_to_l_@quot^0,f,c
  6801  001A18  362E               	rlcf	(__tdiv_to_l_@quot+1)^0,f,c
  6802  001A1A  362F               	rlcf	(__tdiv_to_l_@quot+2)^0,f,c
  6803  001A1C  3630               	rlcf	(__tdiv_to_l_@quot+3)^0,f,c
  6804  001A1E  0632               	decf	__tdiv_to_l_@exp1^0,f,c
  6805  001A20                     l3563:
  6806  001A20  5032               	movf	__tdiv_to_l_@exp1^0,w,c
  6807  001A22  A4D8               	btfss	status,2,c
  6808  001A24  D7F7               	goto	l3561
  6809  001A26                     u3450:
  6810  001A26  C02D  F024         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6811  001A2A  C02E  F025         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6812  001A2E  C02F  F026         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6813  001A32  C030  F027         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6814  001A36  0012               	return		;funcret
  6815  001A38                     __end_of__tdiv_to_l_:
  6816                           	callstack 0
  6817                           
  6818 ;; *************** function __div_to_l_ *****************
  6819 ;; Defined at:
  6820 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\fldivl.c"
  6821 ;; Parameters:    Size  Location     Type
  6822 ;;  f1              3   35[COMRAM] unsigned long 
  6823 ;;  f2              3   38[COMRAM] unsigned long 
  6824 ;; Auto vars:     Size  Location     Type
  6825 ;;  quot            4   41[COMRAM] unsigned long 
  6826 ;;  exp1            1   46[COMRAM] unsigned char 
  6827 ;;  cntr            1   45[COMRAM] unsigned char 
  6828 ;; Return value:  Size  Location     Type
  6829 ;;                  4   35[COMRAM] unsigned long 
  6830 ;; Registers used:
  6831 ;;		wreg, status,2, status,0
  6832 ;; Tracked objects:
  6833 ;;		On entry : 0/0
  6834 ;;		On exit  : 0/0
  6835 ;;		Unchanged: 0/0
  6836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6837 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6838 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6840 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6841 ;;Total ram usage:       12 bytes
  6842 ;; Hardware stack levels used:    1
  6843 ;; Hardware stack levels required when called:    4
  6844 ;; This function calls:
  6845 ;;		Nothing
  6846 ;; This function is called by:
  6847 ;;		_sprintf
  6848 ;; This function uses a non-reentrant model
  6849 ;;
  6850                           
  6851                           	psect	text25
  6852  001B2C                     __ptext25:
  6853                           	callstack 0
  6854  001B2C                     __div_to_l_:
  6855                           	callstack 24
  6856                           
  6857                           ;incstack = 0
  6858  001B2C  3426               	rlcf	(__div_to_l_@f1+2)^0,w,c
  6859  001B2E  3427               	rlcf	(__div_to_l_@f1+3)^0,w,c
  6860  001B30  6E2F               	movwf	__div_to_l_@exp1^0,c
  6861  001B32  502F               	movf	__div_to_l_@exp1^0,w,c
  6862  001B34  A4D8               	btfss	status,2,c
  6863  001B36  D009               	goto	l3571
  6864  001B38                     u3460:
  6865  001B38  0E00               	movlw	0
  6866  001B3A  6E24               	movwf	?__div_to_l_^0,c
  6867  001B3C  0E00               	movlw	0
  6868  001B3E  6E25               	movwf	(?__div_to_l_+1)^0,c
  6869  001B40  0E00               	movlw	0
  6870  001B42  6E26               	movwf	(?__div_to_l_+2)^0,c
  6871  001B44  0E00               	movlw	0
  6872  001B46  6E27               	movwf	(?__div_to_l_+3)^0,c
  6873  001B48  0012               	return	
  6874  001B4A                     l3571:
  6875  001B4A  3429               	rlcf	(__div_to_l_@f2+2)^0,w,c
  6876  001B4C  342A               	rlcf	(__div_to_l_@f2+3)^0,w,c
  6877  001B4E  6E2E               	movwf	__div_to_l_@cntr^0,c
  6878  001B50  502E               	movf	__div_to_l_@cntr^0,w,c
  6879  001B52  B4D8               	btfsc	status,2,c
  6880  001B54  D7F1               	goto	u3460
  6881  001B56  8E26               	bsf	(__div_to_l_@f1+2)^0,7,c
  6882  001B58  0EFF               	movlw	255
  6883  001B5A  1624               	andwf	__div_to_l_@f1^0,f,c
  6884  001B5C  0EFF               	movlw	255
  6885  001B5E  1625               	andwf	(__div_to_l_@f1+1)^0,f,c
  6886  001B60  0EFF               	movlw	255
  6887  001B62  1626               	andwf	(__div_to_l_@f1+2)^0,f,c
  6888  001B64  0E00               	movlw	0
  6889  001B66  1627               	andwf	(__div_to_l_@f1+3)^0,f,c
  6890  001B68  8E29               	bsf	(__div_to_l_@f2+2)^0,7,c
  6891  001B6A  0EFF               	movlw	255
  6892  001B6C  1627               	andwf	__div_to_l_@f2^0,f,c
  6893  001B6E  0EFF               	movlw	255
  6894  001B70  1628               	andwf	(__div_to_l_@f2+1)^0,f,c
  6895  001B72  0EFF               	movlw	255
  6896  001B74  1629               	andwf	(__div_to_l_@f2+2)^0,f,c
  6897  001B76  0E00               	movlw	0
  6898  001B78  162A               	andwf	(__div_to_l_@f2+3)^0,f,c
  6899  001B7A  0E00               	movlw	0
  6900  001B7C  6E2A               	movwf	__div_to_l_@quot^0,c
  6901  001B7E  0E00               	movlw	0
  6902  001B80  6E2B               	movwf	(__div_to_l_@quot+1)^0,c
  6903  001B82  0E00               	movlw	0
  6904  001B84  6E2C               	movwf	(__div_to_l_@quot+2)^0,c
  6905  001B86  0E00               	movlw	0
  6906  001B88  6E2D               	movwf	(__div_to_l_@quot+3)^0,c
  6907  001B8A  0E7F               	movlw	127
  6908  001B8C  5E2F               	subwf	__div_to_l_@exp1^0,f,c
  6909  001B8E  502E               	movf	__div_to_l_@cntr^0,w,c
  6910  001B90  0FA0               	addlw	160
  6911  001B92  5E2F               	subwf	__div_to_l_@exp1^0,f,c
  6912  001B94  0E20               	movlw	32
  6913  001B96  6E2E               	movwf	__div_to_l_@cntr^0,c
  6914  001B98                     l3591:
  6915  001B98  90D8               	bcf	status,0,c
  6916  001B9A  362A               	rlcf	__div_to_l_@quot^0,f,c
  6917  001B9C  362B               	rlcf	(__div_to_l_@quot+1)^0,f,c
  6918  001B9E  362C               	rlcf	(__div_to_l_@quot+2)^0,f,c
  6919  001BA0  362D               	rlcf	(__div_to_l_@quot+3)^0,f,c
  6920  001BA2  5027               	movf	__div_to_l_@f2^0,w,c
  6921  001BA4  5C24               	subwf	__div_to_l_@f1^0,w,c
  6922  001BA6  5028               	movf	(__div_to_l_@f2+1)^0,w,c
  6923  001BA8  5825               	subwfb	(__div_to_l_@f1+1)^0,w,c
  6924  001BAA  5029               	movf	(__div_to_l_@f2+2)^0,w,c
  6925  001BAC  5826               	subwfb	(__div_to_l_@f1+2)^0,w,c
  6926  001BAE  502A               	movf	(__div_to_l_@f2+3)^0,w,c
  6927  001BB0  5827               	subwfb	(__div_to_l_@f1+3)^0,w,c
  6928  001BB2  A0D8               	btfss	status,0,c
  6929  001BB4  D009               	goto	l3599
  6930  001BB6  5027               	movf	__div_to_l_@f2^0,w,c
  6931  001BB8  5E24               	subwf	__div_to_l_@f1^0,f,c
  6932  001BBA  5028               	movf	(__div_to_l_@f2+1)^0,w,c
  6933  001BBC  5A25               	subwfb	(__div_to_l_@f1+1)^0,f,c
  6934  001BBE  5029               	movf	(__div_to_l_@f2+2)^0,w,c
  6935  001BC0  5A26               	subwfb	(__div_to_l_@f1+2)^0,f,c
  6936  001BC2  502A               	movf	(__div_to_l_@f2+3)^0,w,c
  6937  001BC4  5A27               	subwfb	(__div_to_l_@f1+3)^0,f,c
  6938  001BC6  802A               	bsf	__div_to_l_@quot^0,0,c
  6939  001BC8                     l3599:
  6940  001BC8  90D8               	bcf	status,0,c
  6941  001BCA  3624               	rlcf	__div_to_l_@f1^0,f,c
  6942  001BCC  3625               	rlcf	(__div_to_l_@f1+1)^0,f,c
  6943  001BCE  3626               	rlcf	(__div_to_l_@f1+2)^0,f,c
  6944  001BD0  3627               	rlcf	(__div_to_l_@f1+3)^0,f,c
  6945  001BD2  2E2E               	decfsz	__div_to_l_@cntr^0,f,c
  6946  001BD4  D7E1               	goto	l3591
  6947  001BD6  AE2F               	btfss	__div_to_l_@exp1^0,7,c
  6948  001BD8  D00D               	goto	l3615
  6949  001BDA  502F               	movf	__div_to_l_@exp1^0,w,c
  6950  001BDC  0A80               	xorlw	128
  6951  001BDE  0F9F               	addlw	159
  6952  001BE0  A0D8               	btfss	status,0,c
  6953  001BE2  D7AA               	goto	u3460
  6954  001BE4                     l3611:
  6955  001BE4  90D8               	bcf	status,0,c
  6956  001BE6  322D               	rrcf	(__div_to_l_@quot+3)^0,f,c
  6957  001BE8  322C               	rrcf	(__div_to_l_@quot+2)^0,f,c
  6958  001BEA  322B               	rrcf	(__div_to_l_@quot+1)^0,f,c
  6959  001BEC  322A               	rrcf	__div_to_l_@quot^0,f,c
  6960  001BEE  3E2F               	incfsz	__div_to_l_@exp1^0,f,c
  6961  001BF0  D7F9               	goto	l3611
  6962  001BF2  D00D               	goto	u3520
  6963  001BF4                     l3615:
  6964  001BF4  0E1F               	movlw	31
  6965  001BF6  642F               	cpfsgt	__div_to_l_@exp1^0,c
  6966  001BF8  D007               	goto	l3623
  6967  001BFA  D79E               	goto	u3460
  6968  001BFC                     l3621:
  6969  001BFC  90D8               	bcf	status,0,c
  6970  001BFE  362A               	rlcf	__div_to_l_@quot^0,f,c
  6971  001C00  362B               	rlcf	(__div_to_l_@quot+1)^0,f,c
  6972  001C02  362C               	rlcf	(__div_to_l_@quot+2)^0,f,c
  6973  001C04  362D               	rlcf	(__div_to_l_@quot+3)^0,f,c
  6974  001C06  062F               	decf	__div_to_l_@exp1^0,f,c
  6975  001C08                     l3623:
  6976  001C08  502F               	movf	__div_to_l_@exp1^0,w,c
  6977  001C0A  A4D8               	btfss	status,2,c
  6978  001C0C  D7F7               	goto	l3621
  6979  001C0E                     u3520:
  6980  001C0E  C02A  F024         	movff	__div_to_l_@quot,?__div_to_l_
  6981  001C12  C02B  F025         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6982  001C16  C02C  F026         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6983  001C1A  C02D  F027         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6984  001C1E  0012               	return		;funcret
  6985  001C20                     __end_of__div_to_l_:
  6986                           	callstack 0
  6987                           
  6988 ;; *************** function ___wmul *****************
  6989 ;; Defined at:
  6990 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\Umul16.c"
  6991 ;; Parameters:    Size  Location     Type
  6992 ;;  multiplier      2   35[COMRAM] unsigned int 
  6993 ;;  multiplicand    2   37[COMRAM] unsigned int 
  6994 ;; Auto vars:     Size  Location     Type
  6995 ;;  product         2   39[COMRAM] unsigned int 
  6996 ;; Return value:  Size  Location     Type
  6997 ;;                  2   35[COMRAM] unsigned int 
  6998 ;; Registers used:
  6999 ;;		wreg, status,2, status,0, prodl, prodh
  7000 ;; Tracked objects:
  7001 ;;		On entry : 0/0
  7002 ;;		On exit  : 0/0
  7003 ;;		Unchanged: 0/0
  7004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7005 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7006 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7008 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7009 ;;Total ram usage:        6 bytes
  7010 ;; Hardware stack levels used:    1
  7011 ;; Hardware stack levels required when called:    4
  7012 ;; This function calls:
  7013 ;;		Nothing
  7014 ;; This function is called by:
  7015 ;;		_read_adc_voltage
  7016 ;;		_sprintf
  7017 ;; This function uses a non-reentrant model
  7018 ;;
  7019                           
  7020                           	psect	text26
  7021  002A18                     __ptext26:
  7022                           	callstack 0
  7023  002A18                     ___wmul:
  7024                           	callstack 25
  7025                           
  7026                           ;incstack = 0
  7027  002A18  5024               	movf	___wmul@multiplier^0,w,c
  7028  002A1A  0226               	mulwf	___wmul@multiplicand^0,c
  7029  002A1C  CFF3 F028          	movff	prodl,___wmul@product
  7030  002A20  CFF4 F029          	movff	prodh,___wmul@product+1
  7031  002A24  5024               	movf	___wmul@multiplier^0,w,c
  7032  002A26  0227               	mulwf	(___wmul@multiplicand+1)^0,c
  7033  002A28  50F3               	movf	243,w,c
  7034  002A2A  2629               	addwf	(___wmul@product+1)^0,f,c
  7035  002A2C  5025               	movf	(___wmul@multiplier+1)^0,w,c
  7036  002A2E  0226               	mulwf	___wmul@multiplicand^0,c
  7037  002A30  50F3               	movf	243,w,c
  7038  002A32  2629               	addwf	(___wmul@product+1)^0,f,c
  7039  002A34  C028  F024         	movff	___wmul@product,?___wmul
  7040  002A38  C029  F025         	movff	___wmul@product+1,?___wmul+1
  7041  002A3C  0012               	return		;funcret
  7042  002A3E                     __end_of___wmul:
  7043                           	callstack 0
  7044                           
  7045 ;; *************** function ___lltoft *****************
  7046 ;; Defined at:
  7047 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lltoft.c"
  7048 ;; Parameters:    Size  Location     Type
  7049 ;;  c               4   43[COMRAM] unsigned long 
  7050 ;; Auto vars:     Size  Location     Type
  7051 ;;  exp             1   51[COMRAM] unsigned char 
  7052 ;; Return value:  Size  Location     Type
  7053 ;;                  3   43[COMRAM] float 
  7054 ;; Registers used:
  7055 ;;		wreg, status,2, status,0, cstack
  7056 ;; Tracked objects:
  7057 ;;		On entry : 3F/0
  7058 ;;		On exit  : 0/0
  7059 ;;		Unchanged: 0/0
  7060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7061 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7062 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7063 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7064 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7065 ;;Total ram usage:        9 bytes
  7066 ;; Hardware stack levels used:    1
  7067 ;; Hardware stack levels required when called:    5
  7068 ;; This function calls:
  7069 ;;		___ftpack
  7070 ;; This function is called by:
  7071 ;;		_sprintf
  7072 ;; This function uses a non-reentrant model
  7073 ;;
  7074                           
  7075                           	psect	text27
  7076  00247E                     __ptext27:
  7077                           	callstack 0
  7078  00247E                     ___lltoft:
  7079                           	callstack 23
  7080                           
  7081                           ; BSR set to: 0
  7082                           
  7083                           ;incstack = 0
  7084  00247E  0E8E               	movlw	142
  7085  002480  6E34               	movwf	___lltoft@exp^0,c
  7086  002482  D006               	goto	l5229
  7087  002484                     l5227:
  7088                           
  7089                           ; BSR set to: 0
  7090  002484  90D8               	bcf	status,0,c
  7091  002486  322F               	rrcf	(___lltoft@c+3)^0,f,c
  7092  002488  322E               	rrcf	(___lltoft@c+2)^0,f,c
  7093  00248A  322D               	rrcf	(___lltoft@c+1)^0,f,c
  7094  00248C  322C               	rrcf	___lltoft@c^0,f,c
  7095  00248E  2A34               	incf	___lltoft@exp^0,f,c
  7096  002490                     l5229:
  7097                           
  7098                           ; BSR set to: 0
  7099  002490  0E00               	movlw	0
  7100  002492  142C               	andwf	___lltoft@c^0,w,c
  7101  002494  6E30               	movwf	??___lltoft^0,c
  7102  002496  0E00               	movlw	0
  7103  002498  142D               	andwf	(___lltoft@c+1)^0,w,c
  7104  00249A  6E31               	movwf	(??___lltoft+1)^0,c
  7105  00249C  0E00               	movlw	0
  7106  00249E  142E               	andwf	(___lltoft@c+2)^0,w,c
  7107  0024A0  6E32               	movwf	(??___lltoft+2)^0,c
  7108  0024A2  0EFF               	movlw	255
  7109  0024A4  142F               	andwf	(___lltoft@c+3)^0,w,c
  7110  0024A6  6E33               	movwf	(??___lltoft+3)^0,c
  7111  0024A8  5030               	movf	??___lltoft^0,w,c
  7112  0024AA  1031               	iorwf	(??___lltoft+1)^0,w,c
  7113  0024AC  1032               	iorwf	(??___lltoft+2)^0,w,c
  7114  0024AE  1033               	iorwf	(??___lltoft+3)^0,w,c
  7115  0024B0  A4D8               	btfss	status,2,c
  7116  0024B2  D7E8               	goto	l5227
  7117                           
  7118                           ; BSR set to: 0
  7119  0024B4  C02C  F024         	movff	___lltoft@c,___ftpack@arg
  7120  0024B8  C02D  F025         	movff	___lltoft@c+1,___ftpack@arg+1
  7121  0024BC  C02E  F026         	movff	___lltoft@c+2,___ftpack@arg+2
  7122  0024C0  C034  F027         	movff	___lltoft@exp,___ftpack@exp
  7123  0024C4  0E00               	movlw	0
  7124  0024C6  6E28               	movwf	___ftpack@sign^0,c
  7125  0024C8  EC4D  F00F         	call	___ftpack	;wreg free
  7126  0024CC  C024  F02C         	movff	?___ftpack,?___lltoft
  7127  0024D0  C025  F02D         	movff	?___ftpack+1,?___lltoft+1
  7128  0024D4  C026  F02E         	movff	?___ftpack+2,?___lltoft+2
  7129  0024D8  0012               	return		;funcret
  7130  0024DA                     __end_of___lltoft:
  7131                           	callstack 0
  7132                           
  7133 ;; *************** function ___llmod *****************
  7134 ;; Defined at:
  7135 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\llmod.c"
  7136 ;; Parameters:    Size  Location     Type
  7137 ;;  dividend        4   48[COMRAM] unsigned long 
  7138 ;;  divisor         4   52[COMRAM] unsigned long 
  7139 ;; Auto vars:     Size  Location     Type
  7140 ;;  counter         1   56[COMRAM] unsigned char 
  7141 ;; Return value:  Size  Location     Type
  7142 ;;                  4   48[COMRAM] unsigned long 
  7143 ;; Registers used:
  7144 ;;		wreg, status,2, status,0
  7145 ;; Tracked objects:
  7146 ;;		On entry : 3F/0
  7147 ;;		On exit  : 3F/0
  7148 ;;		Unchanged: 3F/0
  7149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7150 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7151 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7153 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7154 ;;Total ram usage:        9 bytes
  7155 ;; Hardware stack levels used:    1
  7156 ;; Hardware stack levels required when called:    4
  7157 ;; This function calls:
  7158 ;;		Nothing
  7159 ;; This function is called by:
  7160 ;;		_sprintf
  7161 ;; This function uses a non-reentrant model
  7162 ;;
  7163                           
  7164                           	psect	text28
  7165  0023BA                     __ptext28:
  7166                           	callstack 0
  7167  0023BA                     ___llmod:
  7168                           	callstack 24
  7169                           
  7170                           ; BSR set to: 0
  7171                           
  7172                           ;incstack = 0
  7173  0023BA  5035               	movf	___llmod@divisor^0,w,c
  7174  0023BC  1036               	iorwf	(___llmod@divisor+1)^0,w,c
  7175  0023BE  1037               	iorwf	(___llmod@divisor+2)^0,w,c
  7176  0023C0  1038               	iorwf	(___llmod@divisor+3)^0,w,c
  7177  0023C2  B4D8               	btfsc	status,2,c
  7178  0023C4  D024               	goto	l993
  7179                           
  7180                           ; BSR set to: 0
  7181  0023C6  0E01               	movlw	1
  7182  0023C8  6E39               	movwf	___llmod@counter^0,c
  7183  0023CA  D006               	goto	l3735
  7184  0023CC                     l3733:
  7185                           
  7186                           ; BSR set to: 0
  7187  0023CC  90D8               	bcf	status,0,c
  7188  0023CE  3635               	rlcf	___llmod@divisor^0,f,c
  7189  0023D0  3636               	rlcf	(___llmod@divisor+1)^0,f,c
  7190  0023D2  3637               	rlcf	(___llmod@divisor+2)^0,f,c
  7191  0023D4  3638               	rlcf	(___llmod@divisor+3)^0,f,c
  7192  0023D6  2A39               	incf	___llmod@counter^0,f,c
  7193  0023D8                     l3735:
  7194                           
  7195                           ; BSR set to: 0
  7196  0023D8  AE38               	btfss	(___llmod@divisor+3)^0,7,c
  7197  0023DA  D7F8               	goto	l3733
  7198  0023DC                     u3700:
  7199                           
  7200                           ; BSR set to: 0
  7201  0023DC  5035               	movf	___llmod@divisor^0,w,c
  7202  0023DE  5C31               	subwf	___llmod@dividend^0,w,c
  7203  0023E0  5036               	movf	(___llmod@divisor+1)^0,w,c
  7204  0023E2  5832               	subwfb	(___llmod@dividend+1)^0,w,c
  7205  0023E4  5037               	movf	(___llmod@divisor+2)^0,w,c
  7206  0023E6  5833               	subwfb	(___llmod@dividend+2)^0,w,c
  7207  0023E8  5038               	movf	(___llmod@divisor+3)^0,w,c
  7208  0023EA  5834               	subwfb	(___llmod@dividend+3)^0,w,c
  7209  0023EC  A0D8               	btfss	status,0,c
  7210  0023EE  D008               	goto	l3741
  7211                           
  7212                           ; BSR set to: 0
  7213  0023F0  5035               	movf	___llmod@divisor^0,w,c
  7214  0023F2  5E31               	subwf	___llmod@dividend^0,f,c
  7215  0023F4  5036               	movf	(___llmod@divisor+1)^0,w,c
  7216  0023F6  5A32               	subwfb	(___llmod@dividend+1)^0,f,c
  7217  0023F8  5037               	movf	(___llmod@divisor+2)^0,w,c
  7218  0023FA  5A33               	subwfb	(___llmod@dividend+2)^0,f,c
  7219  0023FC  5038               	movf	(___llmod@divisor+3)^0,w,c
  7220  0023FE  5A34               	subwfb	(___llmod@dividend+3)^0,f,c
  7221  002400                     l3741:
  7222                           
  7223                           ; BSR set to: 0
  7224  002400  90D8               	bcf	status,0,c
  7225  002402  3238               	rrcf	(___llmod@divisor+3)^0,f,c
  7226  002404  3237               	rrcf	(___llmod@divisor+2)^0,f,c
  7227  002406  3236               	rrcf	(___llmod@divisor+1)^0,f,c
  7228  002408  3235               	rrcf	___llmod@divisor^0,f,c
  7229                           
  7230                           ; BSR set to: 0
  7231  00240A  2E39               	decfsz	___llmod@counter^0,f,c
  7232  00240C  D7E7               	goto	u3700
  7233  00240E                     l993:
  7234                           
  7235                           ; BSR set to: 0
  7236  00240E  C031  F031         	movff	___llmod@dividend,?___llmod
  7237  002412  C032  F032         	movff	___llmod@dividend+1,?___llmod+1
  7238  002416  C033  F033         	movff	___llmod@dividend+2,?___llmod+2
  7239  00241A  C034  F034         	movff	___llmod@dividend+3,?___llmod+3
  7240                           
  7241                           ; BSR set to: 0
  7242  00241E  0012               	return		;funcret
  7243  002420                     __end_of___llmod:
  7244                           	callstack 0
  7245                           
  7246 ;; *************** function ___lldiv *****************
  7247 ;; Defined at:
  7248 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\__lldiv.c"
  7249 ;; Parameters:    Size  Location     Type
  7250 ;;  dividend        4   35[COMRAM] unsigned long 
  7251 ;;  divisor         4   39[COMRAM] unsigned long 
  7252 ;; Auto vars:     Size  Location     Type
  7253 ;;  quotient        4   43[COMRAM] unsigned long 
  7254 ;;  counter         1   47[COMRAM] unsigned char 
  7255 ;; Return value:  Size  Location     Type
  7256 ;;                  4   35[COMRAM] unsigned long 
  7257 ;; Registers used:
  7258 ;;		wreg, status,2, status,0
  7259 ;; Tracked objects:
  7260 ;;		On entry : 3F/0
  7261 ;;		On exit  : 3F/0
  7262 ;;		Unchanged: 3F/0
  7263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7264 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7265 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7267 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7268 ;;Total ram usage:       13 bytes
  7269 ;; Hardware stack levels used:    1
  7270 ;; Hardware stack levels required when called:    4
  7271 ;; This function calls:
  7272 ;;		Nothing
  7273 ;; This function is called by:
  7274 ;;		_sprintf
  7275 ;; This function uses a non-reentrant model
  7276 ;;
  7277                           
  7278                           	psect	text29
  7279  002104                     __ptext29:
  7280                           	callstack 0
  7281  002104                     ___lldiv:
  7282                           	callstack 24
  7283                           
  7284                           ; BSR set to: 0
  7285                           
  7286                           ; BSR set to: 0
  7287                           ;incstack = 0
  7288  002104  0E00               	movlw	0
  7289  002106  6E2C               	movwf	___lldiv@quotient^0,c
  7290  002108  0E00               	movlw	0
  7291  00210A  6E2D               	movwf	(___lldiv@quotient+1)^0,c
  7292  00210C  0E00               	movlw	0
  7293  00210E  6E2E               	movwf	(___lldiv@quotient+2)^0,c
  7294  002110  0E00               	movlw	0
  7295  002112  6E2F               	movwf	(___lldiv@quotient+3)^0,c
  7296                           
  7297                           ; BSR set to: 0
  7298  002114  5028               	movf	___lldiv@divisor^0,w,c
  7299  002116  1029               	iorwf	(___lldiv@divisor+1)^0,w,c
  7300  002118  102A               	iorwf	(___lldiv@divisor+2)^0,w,c
  7301  00211A  102B               	iorwf	(___lldiv@divisor+3)^0,w,c
  7302  00211C  B4D8               	btfsc	status,2,c
  7303  00211E  D02A               	goto	l578
  7304                           
  7305                           ; BSR set to: 0
  7306  002120  0E01               	movlw	1
  7307  002122  6E30               	movwf	___lldiv@counter^0,c
  7308  002124  D006               	goto	l3639
  7309  002126                     l3637:
  7310                           
  7311                           ; BSR set to: 0
  7312  002126  90D8               	bcf	status,0,c
  7313  002128  3628               	rlcf	___lldiv@divisor^0,f,c
  7314  00212A  3629               	rlcf	(___lldiv@divisor+1)^0,f,c
  7315  00212C  362A               	rlcf	(___lldiv@divisor+2)^0,f,c
  7316  00212E  362B               	rlcf	(___lldiv@divisor+3)^0,f,c
  7317  002130  2A30               	incf	___lldiv@counter^0,f,c
  7318  002132                     l3639:
  7319                           
  7320                           ; BSR set to: 0
  7321  002132  AE2B               	btfss	(___lldiv@divisor+3)^0,7,c
  7322  002134  D7F8               	goto	l3637
  7323  002136                     u3540:
  7324                           
  7325                           ; BSR set to: 0
  7326  002136  90D8               	bcf	status,0,c
  7327  002138  362C               	rlcf	___lldiv@quotient^0,f,c
  7328  00213A  362D               	rlcf	(___lldiv@quotient+1)^0,f,c
  7329  00213C  362E               	rlcf	(___lldiv@quotient+2)^0,f,c
  7330  00213E  362F               	rlcf	(___lldiv@quotient+3)^0,f,c
  7331                           
  7332                           ; BSR set to: 0
  7333  002140  5028               	movf	___lldiv@divisor^0,w,c
  7334  002142  5C24               	subwf	___lldiv@dividend^0,w,c
  7335  002144  5029               	movf	(___lldiv@divisor+1)^0,w,c
  7336  002146  5825               	subwfb	(___lldiv@dividend+1)^0,w,c
  7337  002148  502A               	movf	(___lldiv@divisor+2)^0,w,c
  7338  00214A  5826               	subwfb	(___lldiv@dividend+2)^0,w,c
  7339  00214C  502B               	movf	(___lldiv@divisor+3)^0,w,c
  7340  00214E  5827               	subwfb	(___lldiv@dividend+3)^0,w,c
  7341  002150  A0D8               	btfss	status,0,c
  7342  002152  D009               	goto	l3649
  7343                           
  7344                           ; BSR set to: 0
  7345  002154  5028               	movf	___lldiv@divisor^0,w,c
  7346  002156  5E24               	subwf	___lldiv@dividend^0,f,c
  7347  002158  5029               	movf	(___lldiv@divisor+1)^0,w,c
  7348  00215A  5A25               	subwfb	(___lldiv@dividend+1)^0,f,c
  7349  00215C  502A               	movf	(___lldiv@divisor+2)^0,w,c
  7350  00215E  5A26               	subwfb	(___lldiv@dividend+2)^0,f,c
  7351  002160  502B               	movf	(___lldiv@divisor+3)^0,w,c
  7352  002162  5A27               	subwfb	(___lldiv@dividend+3)^0,f,c
  7353                           
  7354                           ; BSR set to: 0
  7355  002164  802C               	bsf	___lldiv@quotient^0,0,c
  7356  002166                     l3649:
  7357                           
  7358                           ; BSR set to: 0
  7359  002166  90D8               	bcf	status,0,c
  7360  002168  322B               	rrcf	(___lldiv@divisor+3)^0,f,c
  7361  00216A  322A               	rrcf	(___lldiv@divisor+2)^0,f,c
  7362  00216C  3229               	rrcf	(___lldiv@divisor+1)^0,f,c
  7363  00216E  3228               	rrcf	___lldiv@divisor^0,f,c
  7364                           
  7365                           ; BSR set to: 0
  7366  002170  2E30               	decfsz	___lldiv@counter^0,f,c
  7367  002172  D7E1               	goto	u3540
  7368  002174                     l578:
  7369                           
  7370                           ; BSR set to: 0
  7371  002174  C02C  F024         	movff	___lldiv@quotient,?___lldiv
  7372  002178  C02D  F025         	movff	___lldiv@quotient+1,?___lldiv+1
  7373  00217C  C02E  F026         	movff	___lldiv@quotient+2,?___lldiv+2
  7374  002180  C02F  F027         	movff	___lldiv@quotient+3,?___lldiv+3
  7375                           
  7376                           ; BSR set to: 0
  7377  002184  0012               	return		;funcret
  7378  002186                     __end_of___lldiv:
  7379                           	callstack 0
  7380                           
  7381 ;; *************** function ___fttol *****************
  7382 ;; Defined at:
  7383 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\fttol.c"
  7384 ;; Parameters:    Size  Location     Type
  7385 ;;  f1              3    7[BANK0 ] float 
  7386 ;; Auto vars:     Size  Location     Type
  7387 ;;  lval            4   17[BANK0 ] unsigned long 
  7388 ;;  exp1            1   21[BANK0 ] unsigned char 
  7389 ;;  sign1           1   16[BANK0 ] unsigned char 
  7390 ;; Return value:  Size  Location     Type
  7391 ;;                  4    7[BANK0 ] long 
  7392 ;; Registers used:
  7393 ;;		wreg, status,2, status,0
  7394 ;; Tracked objects:
  7395 ;;		On entry : 0/0
  7396 ;;		On exit  : 3F/0
  7397 ;;		Unchanged: 0/0
  7398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7399 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7400 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7401 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7402 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7403 ;;Total ram usage:       15 bytes
  7404 ;; Hardware stack levels used:    1
  7405 ;; Hardware stack levels required when called:    4
  7406 ;; This function calls:
  7407 ;;		Nothing
  7408 ;; This function is called by:
  7409 ;;		_sprintf
  7410 ;; This function uses a non-reentrant model
  7411 ;;
  7412                           
  7413                           	psect	text30
  7414  001D06                     __ptext30:
  7415                           	callstack 0
  7416  001D06                     ___fttol:
  7417                           	callstack 24
  7418                           
  7419                           ; BSR set to: 0
  7420                           ;incstack = 0
  7421  001D06  C089  F08B         	movff	___fttol@f1+2,??___fttol
  7422  001D0A  0100               	movlb	0	; () banked
  7423  001D0C  6B8C               	clrf	(??___fttol+1)& (0+255),b
  7424  001D0E  6B8D               	clrf	(??___fttol+2)& (0+255),b
  7425  001D10  3588               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7426  001D12  378B               	rlcf	??___fttol& (0+255),f,b
  7427  001D14  E301               	bnc	u6071
  7428  001D16  818C               	bsf	(??___fttol+1)& (0+255),0,b
  7429  001D18                     u6071:
  7430  001D18  518B               	movf	??___fttol& (0+255),w,b
  7431  001D1A  6F95               	movwf	___fttol@exp1& (0+255),b
  7432  001D1C  5195               	movf	___fttol@exp1& (0+255),w,b
  7433  001D1E  A4D8               	btfss	status,2,c
  7434  001D20  D009               	goto	l5185
  7435  001D22                     u6080:
  7436                           
  7437                           ; BSR set to: 0
  7438  001D22  0E00               	movlw	0
  7439  001D24  6F87               	movwf	?___fttol& (0+255),b
  7440  001D26  0E00               	movlw	0
  7441  001D28  6F88               	movwf	(?___fttol+1)& (0+255),b
  7442  001D2A  0E00               	movlw	0
  7443  001D2C  6F89               	movwf	(?___fttol+2)& (0+255),b
  7444  001D2E  0E00               	movlw	0
  7445  001D30  6F8A               	movwf	(?___fttol+3)& (0+255),b
  7446  001D32  0012               	return	
  7447  001D34                     l5185:
  7448                           
  7449                           ; BSR set to: 0
  7450  001D34  0E17               	movlw	23
  7451  001D36  6F8B               	movwf	??___fttol& (0+255),b
  7452  001D38  C087  F08C         	movff	___fttol@f1,??___fttol+1
  7453  001D3C  C088  F08D         	movff	___fttol@f1+1,??___fttol+2
  7454  001D40  C089  F08E         	movff	___fttol@f1+2,??___fttol+3
  7455  001D44  298B               	incf	??___fttol& (0+255),w,b
  7456  001D46  6F8F               	movwf	(??___fttol+4)& (0+255),b
  7457  001D48  D004               	goto	u6090
  7458  001D4A                     u6095:
  7459  001D4A  90D8               	bcf	status,0,c
  7460  001D4C  338E               	rrcf	(??___fttol+3)& (0+255),f,b
  7461  001D4E  338D               	rrcf	(??___fttol+2)& (0+255),f,b
  7462  001D50  338C               	rrcf	(??___fttol+1)& (0+255),f,b
  7463  001D52                     u6090:
  7464  001D52  2F8F               	decfsz	(??___fttol+4)& (0+255),f,b
  7465  001D54  D7FA               	goto	u6095
  7466  001D56  0100               	movlb	0	; () banked
  7467  001D58  518C               	movf	(??___fttol+1)& (0+255),w,b
  7468  001D5A  6F90               	movwf	___fttol@sign1& (0+255),b
  7469                           
  7470                           ; BSR set to: 0
  7471  001D5C  8F88               	bsf	(___fttol@f1+1)& (0+255),7,b
  7472                           
  7473                           ; BSR set to: 0
  7474  001D5E  0EFF               	movlw	255
  7475  001D60  1787               	andwf	___fttol@f1& (0+255),f,b
  7476  001D62  0EFF               	movlw	255
  7477  001D64  1788               	andwf	(___fttol@f1+1)& (0+255),f,b
  7478  001D66  0E00               	movlw	0
  7479  001D68  1789               	andwf	(___fttol@f1+2)& (0+255),f,b
  7480                           
  7481                           ; BSR set to: 0
  7482  001D6A  5187               	movf	___fttol@f1& (0+255),w,b
  7483  001D6C  6F91               	movwf	___fttol@lval& (0+255),b
  7484  001D6E  5188               	movf	(___fttol@f1+1)& (0+255),w,b
  7485  001D70  6F92               	movwf	(___fttol@lval+1)& (0+255),b
  7486  001D72  5189               	movf	(___fttol@f1+2)& (0+255),w,b
  7487  001D74  6F93               	movwf	(___fttol@lval+2)& (0+255),b
  7488  001D76  6B94               	clrf	(___fttol@lval+3)& (0+255),b
  7489                           
  7490                           ; BSR set to: 0
  7491  001D78  0E8E               	movlw	142
  7492  001D7A  5F95               	subwf	___fttol@exp1& (0+255),f,b
  7493                           
  7494                           ; BSR set to: 0
  7495  001D7C  AF95               	btfss	___fttol@exp1& (0+255),7,b
  7496  001D7E  D00D               	goto	l5207
  7497                           
  7498                           ; BSR set to: 0
  7499  001D80  5195               	movf	___fttol@exp1& (0+255),w,b
  7500  001D82  0A80               	xorlw	128
  7501  001D84  0F8F               	addlw	143
  7502  001D86  A0D8               	btfss	status,0,c
  7503  001D88  D7CC               	goto	u6080
  7504  001D8A                     l5203:
  7505                           
  7506                           ; BSR set to: 0
  7507  001D8A  90D8               	bcf	status,0,c
  7508  001D8C  3394               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7509  001D8E  3393               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7510  001D90  3392               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7511  001D92  3391               	rrcf	___fttol@lval& (0+255),f,b
  7512                           
  7513                           ; BSR set to: 0
  7514  001D94  3F95               	incfsz	___fttol@exp1& (0+255),f,b
  7515  001D96  D7F9               	goto	l5203
  7516  001D98  D00D               	goto	u6130
  7517  001D9A                     l5207:
  7518                           
  7519                           ; BSR set to: 0
  7520  001D9A  0E17               	movlw	23
  7521  001D9C  6595               	cpfsgt	___fttol@exp1& (0+255),b
  7522  001D9E  D007               	goto	l5215
  7523  001DA0  D7C0               	goto	u6080
  7524  001DA2                     l5213:
  7525                           
  7526                           ; BSR set to: 0
  7527  001DA2  90D8               	bcf	status,0,c
  7528  001DA4  3791               	rlcf	___fttol@lval& (0+255),f,b
  7529  001DA6  3792               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7530  001DA8  3793               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7531  001DAA  3794               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7532  001DAC  0795               	decf	___fttol@exp1& (0+255),f,b
  7533  001DAE                     l5215:
  7534                           
  7535                           ; BSR set to: 0
  7536  001DAE  5195               	movf	___fttol@exp1& (0+255),w,b
  7537  001DB0  A4D8               	btfss	status,2,c
  7538  001DB2  D7F7               	goto	l5213
  7539  001DB4                     u6130:
  7540                           
  7541                           ; BSR set to: 0
  7542  001DB4  5190               	movf	___fttol@sign1& (0+255),w,b
  7543  001DB6  B4D8               	btfsc	status,2,c
  7544  001DB8  D008               	goto	l5221
  7545                           
  7546                           ; BSR set to: 0
  7547  001DBA  1F94               	comf	(___fttol@lval+3)& (0+255),f,b
  7548  001DBC  1F93               	comf	(___fttol@lval+2)& (0+255),f,b
  7549  001DBE  1F92               	comf	(___fttol@lval+1)& (0+255),f,b
  7550  001DC0  6D91               	negf	___fttol@lval& (0+255),b
  7551  001DC2  0E00               	movlw	0
  7552  001DC4  2392               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7553  001DC6  2393               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7554  001DC8  2394               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7555  001DCA                     l5221:
  7556                           
  7557                           ; BSR set to: 0
  7558  001DCA  C091  F087         	movff	___fttol@lval,?___fttol
  7559  001DCE  C092  F088         	movff	___fttol@lval+1,?___fttol+1
  7560  001DD2  C093  F089         	movff	___fttol@lval+2,?___fttol+2
  7561  001DD6  C094  F08A         	movff	___fttol@lval+3,?___fttol+3
  7562                           
  7563                           ; BSR set to: 0
  7564  001DDA  0012               	return		;funcret
  7565  001DDC                     __end_of___fttol:
  7566                           	callstack 0
  7567                           
  7568 ;; *************** function ___ftsub *****************
  7569 ;; Defined at:
  7570 ;;		line 19 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftsub.c"
  7571 ;; Parameters:    Size  Location     Type
  7572 ;;  f1              3   23[BANK0 ] float 
  7573 ;;  f2              3   26[BANK0 ] float 
  7574 ;; Auto vars:     Size  Location     Type
  7575 ;;		None
  7576 ;; Return value:  Size  Location     Type
  7577 ;;                  3   23[BANK0 ] float 
  7578 ;; Registers used:
  7579 ;;		wreg, status,2, status,0, cstack
  7580 ;; Tracked objects:
  7581 ;;		On entry : 0/0
  7582 ;;		On exit  : 0/0
  7583 ;;		Unchanged: 0/0
  7584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7585 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7588 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7589 ;;Total ram usage:        6 bytes
  7590 ;; Hardware stack levels used:    1
  7591 ;; Hardware stack levels required when called:    6
  7592 ;; This function calls:
  7593 ;;		___ftadd
  7594 ;; This function is called by:
  7595 ;;		_main
  7596 ;;		_sprintf
  7597 ;; This function uses a non-reentrant model
  7598 ;;
  7599                           
  7600                           	psect	text31
  7601  0027A0                     __ptext31:
  7602                           	callstack 0
  7603  0027A0                     ___ftsub:
  7604                           	callstack 22
  7605                           
  7606                           ; BSR set to: 0
  7607                           ;incstack = 0
  7608  0027A0  0100               	movlb	0	; () banked
  7609  0027A2  519A               	movf	___ftsub@f2& (0+255),w,b
  7610  0027A4  119B               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  7611  0027A6  119C               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  7612  0027A8  B4D8               	btfsc	status,2,c
  7613  0027AA  D006               	goto	l5157
  7614                           
  7615                           ; BSR set to: 0
  7616  0027AC  0E00               	movlw	0
  7617  0027AE  1B9A               	xorwf	___ftsub@f2& (0+255),f,b
  7618  0027B0  0E00               	movlw	0
  7619  0027B2  1B9B               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7620  0027B4  0E80               	movlw	128
  7621  0027B6  1B9C               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7622  0027B8                     l5157:
  7623                           
  7624                           ; BSR set to: 0
  7625  0027B8  C097  F08B         	movff	___ftsub@f1,___ftadd@f1
  7626  0027BC  C098  F08C         	movff	___ftsub@f1+1,___ftadd@f1+1
  7627  0027C0  C099  F08D         	movff	___ftsub@f1+2,___ftadd@f1+2
  7628  0027C4  C09A  F08E         	movff	___ftsub@f2,___ftadd@f2
  7629  0027C8  C09B  F08F         	movff	___ftsub@f2+1,___ftadd@f2+1
  7630  0027CC  C09C  F090         	movff	___ftsub@f2+2,___ftadd@f2+2
  7631  0027D0  ECF4  F00A         	call	___ftadd	;wreg free
  7632  0027D4  C08B  F097         	movff	?___ftadd,?___ftsub
  7633  0027D8  C08C  F098         	movff	?___ftadd+1,?___ftsub+1
  7634  0027DC  C08D  F099         	movff	?___ftadd+2,?___ftsub+2
  7635  0027E0  0012               	return		;funcret
  7636  0027E2                     __end_of___ftsub:
  7637                           	callstack 0
  7638                           
  7639 ;; *************** function ___ftadd *****************
  7640 ;; Defined at:
  7641 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftadd.c"
  7642 ;; Parameters:    Size  Location     Type
  7643 ;;  f1              3   11[BANK0 ] float 
  7644 ;;  f2              3   14[BANK0 ] float 
  7645 ;; Auto vars:     Size  Location     Type
  7646 ;;  exp1            1   22[BANK0 ] unsigned char 
  7647 ;;  exp2            1   21[BANK0 ] unsigned char 
  7648 ;;  sign            1   20[BANK0 ] unsigned char 
  7649 ;; Return value:  Size  Location     Type
  7650 ;;                  3   11[BANK0 ] float 
  7651 ;; Registers used:
  7652 ;;		wreg, status,2, status,0, cstack
  7653 ;; Tracked objects:
  7654 ;;		On entry : 0/0
  7655 ;;		On exit  : 0/0
  7656 ;;		Unchanged: 0/0
  7657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7658 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7659 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7660 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7661 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7662 ;;Total ram usage:       12 bytes
  7663 ;; Hardware stack levels used:    1
  7664 ;; Hardware stack levels required when called:    5
  7665 ;; This function calls:
  7666 ;;		___ftpack
  7667 ;; This function is called by:
  7668 ;;		_main
  7669 ;;		_sprintf
  7670 ;;		___ftsub
  7671 ;; This function uses a non-reentrant model
  7672 ;;
  7673                           
  7674                           	psect	text32
  7675  0015E8                     __ptext32:
  7676                           	callstack 0
  7677  0015E8                     ___ftadd:
  7678                           	callstack 22
  7679                           
  7680                           ;incstack = 0
  7681  0015E8  C08D  F091         	movff	___ftadd@f1+2,??___ftadd
  7682  0015EC  0100               	movlb	0	; () banked
  7683  0015EE  6B92               	clrf	(??___ftadd+1)& (0+255),b
  7684  0015F0  6B93               	clrf	(??___ftadd+2)& (0+255),b
  7685  0015F2  358C               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  7686  0015F4  3791               	rlcf	??___ftadd& (0+255),f,b
  7687  0015F6  E301               	bnc	u5531
  7688  0015F8  8192               	bsf	(??___ftadd+1)& (0+255),0,b
  7689  0015FA                     u5531:
  7690  0015FA  5191               	movf	??___ftadd& (0+255),w,b
  7691  0015FC  6F96               	movwf	___ftadd@exp1& (0+255),b
  7692  0015FE  C090  F091         	movff	___ftadd@f2+2,??___ftadd
  7693  001602  6B92               	clrf	(??___ftadd+1)& (0+255),b
  7694  001604  6B93               	clrf	(??___ftadd+2)& (0+255),b
  7695  001606  358F               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  7696  001608  3791               	rlcf	??___ftadd& (0+255),f,b
  7697  00160A  E301               	bnc	u5541
  7698  00160C  8192               	bsf	(??___ftadd+1)& (0+255),0,b
  7699  00160E                     u5541:
  7700  00160E  5191               	movf	??___ftadd& (0+255),w,b
  7701  001610  6F95               	movwf	___ftadd@exp2& (0+255),b
  7702                           
  7703                           ; BSR set to: 0
  7704  001612  5196               	movf	___ftadd@exp1& (0+255),w,b
  7705  001614  B4D8               	btfsc	status,2,c
  7706  001616  D00A               	goto	u5570
  7707                           
  7708                           ; BSR set to: 0
  7709  001618  5195               	movf	___ftadd@exp2& (0+255),w,b
  7710  00161A  5D96               	subwf	___ftadd@exp1& (0+255),w,b
  7711  00161C  B0D8               	btfsc	status,0,c
  7712  00161E  D00D               	goto	l4859
  7713                           
  7714                           ; BSR set to: 0
  7715  001620  5196               	movf	___ftadd@exp1& (0+255),w,b
  7716  001622  5D95               	subwf	___ftadd@exp2& (0+255),w,b
  7717  001624  6F91               	movwf	??___ftadd& (0+255),b
  7718  001626  0E18               	movlw	24
  7719  001628  6591               	cpfsgt	??___ftadd& (0+255),b
  7720  00162A  D007               	goto	l4859
  7721  00162C                     u5570:
  7722                           
  7723                           ; BSR set to: 0
  7724  00162C  C08E  F08B         	movff	___ftadd@f2,?___ftadd
  7725  001630  C08F  F08C         	movff	___ftadd@f2+1,?___ftadd+1
  7726  001634  C090  F08D         	movff	___ftadd@f2+2,?___ftadd+2
  7727  001638  0012               	return	
  7728  00163A                     l4859:
  7729                           
  7730                           ; BSR set to: 0
  7731  00163A  5195               	movf	___ftadd@exp2& (0+255),w,b
  7732  00163C  B4D8               	btfsc	status,2,c
  7733  00163E  D00A               	goto	u5600
  7734                           
  7735                           ; BSR set to: 0
  7736  001640  5196               	movf	___ftadd@exp1& (0+255),w,b
  7737  001642  5D95               	subwf	___ftadd@exp2& (0+255),w,b
  7738  001644  B0D8               	btfsc	status,0,c
  7739  001646  D00D               	goto	l4865
  7740                           
  7741                           ; BSR set to: 0
  7742  001648  5195               	movf	___ftadd@exp2& (0+255),w,b
  7743  00164A  5D96               	subwf	___ftadd@exp1& (0+255),w,b
  7744  00164C  6F91               	movwf	??___ftadd& (0+255),b
  7745  00164E  0E18               	movlw	24
  7746  001650  6591               	cpfsgt	??___ftadd& (0+255),b
  7747  001652  D007               	goto	l4865
  7748  001654                     u5600:
  7749                           
  7750                           ; BSR set to: 0
  7751  001654  C08B  F08B         	movff	___ftadd@f1,?___ftadd
  7752  001658  C08C  F08C         	movff	___ftadd@f1+1,?___ftadd+1
  7753  00165C  C08D  F08D         	movff	___ftadd@f1+2,?___ftadd+2
  7754  001660  0012               	return	
  7755  001662                     l4865:
  7756                           
  7757                           ; BSR set to: 0
  7758  001662  0E06               	movlw	6
  7759  001664  6F94               	movwf	___ftadd@sign& (0+255),b
  7760                           
  7761                           ; BSR set to: 0
  7762  001666  BF8D               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  7763                           
  7764                           ; BSR set to: 0
  7765  001668  8F94               	bsf	___ftadd@sign& (0+255),7,b
  7766                           
  7767                           ; BSR set to: 0
  7768  00166A  BF90               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  7769                           
  7770                           ; BSR set to: 0
  7771  00166C  8D94               	bsf	___ftadd@sign& (0+255),6,b
  7772                           
  7773                           ; BSR set to: 0
  7774  00166E  8F8C               	bsf	(___ftadd@f1+1)& (0+255),7,b
  7775                           
  7776                           ; BSR set to: 0
  7777  001670  0EFF               	movlw	255
  7778  001672  178B               	andwf	___ftadd@f1& (0+255),f,b
  7779  001674  0EFF               	movlw	255
  7780  001676  178C               	andwf	(___ftadd@f1+1)& (0+255),f,b
  7781  001678  0E00               	movlw	0
  7782  00167A  178D               	andwf	(___ftadd@f1+2)& (0+255),f,b
  7783  00167C  8F8F               	bsf	(___ftadd@f2+1)& (0+255),7,b
  7784                           
  7785                           ; BSR set to: 0
  7786  00167E  0EFF               	movlw	255
  7787  001680  178E               	andwf	___ftadd@f2& (0+255),f,b
  7788  001682  0EFF               	movlw	255
  7789  001684  178F               	andwf	(___ftadd@f2+1)& (0+255),f,b
  7790  001686  0E00               	movlw	0
  7791  001688  1790               	andwf	(___ftadd@f2+2)& (0+255),f,b
  7792                           
  7793                           ; BSR set to: 0
  7794  00168A  5195               	movf	___ftadd@exp2& (0+255),w,b
  7795  00168C  5D96               	subwf	___ftadd@exp1& (0+255),w,b
  7796  00168E  B0D8               	btfsc	status,0,c
  7797  001690  D01B               	goto	l4891
  7798  001692                     u5630:
  7799                           
  7800                           ; BSR set to: 0
  7801  001692  90D8               	bcf	status,0,c
  7802  001694  378E               	rlcf	___ftadd@f2& (0+255),f,b
  7803  001696  378F               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  7804  001698  3790               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  7805  00169A  0795               	decf	___ftadd@exp2& (0+255),f,b
  7806                           
  7807                           ; BSR set to: 0
  7808  00169C  5196               	movf	___ftadd@exp1& (0+255),w,b
  7809  00169E  1995               	xorwf	___ftadd@exp2& (0+255),w,b
  7810  0016A0  B4D8               	btfsc	status,2,c
  7811  0016A2  D00D               	goto	l4889
  7812                           
  7813                           ; BSR set to: 0
  7814  0016A4  0794               	decf	___ftadd@sign& (0+255),f,b
  7815  0016A6  C094  F091         	movff	___ftadd@sign,??___ftadd
  7816  0016AA  0E07               	movlw	7
  7817  0016AC  1791               	andwf	??___ftadd& (0+255),f,b
  7818  0016AE  B4D8               	btfsc	status,2,c
  7819  0016B0  D006               	goto	l4889
  7820  0016B2  D7EF               	goto	u5630
  7821  0016B4                     l4887:
  7822                           
  7823                           ; BSR set to: 0
  7824  0016B4  90D8               	bcf	status,0,c
  7825  0016B6  338D               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  7826  0016B8  338C               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  7827  0016BA  338B               	rrcf	___ftadd@f1& (0+255),f,b
  7828  0016BC  2B96               	incf	___ftadd@exp1& (0+255),f,b
  7829  0016BE                     l4889:
  7830                           
  7831                           ; BSR set to: 0
  7832  0016BE  5195               	movf	___ftadd@exp2& (0+255),w,b
  7833  0016C0  1996               	xorwf	___ftadd@exp1& (0+255),w,b
  7834  0016C2  B4D8               	btfsc	status,2,c
  7835  0016C4  D01F               	goto	u5700
  7836  0016C6  D7F6               	goto	l4887
  7837  0016C8                     l4891:
  7838                           
  7839                           ; BSR set to: 0
  7840  0016C8  5196               	movf	___ftadd@exp1& (0+255),w,b
  7841  0016CA  5D95               	subwf	___ftadd@exp2& (0+255),w,b
  7842  0016CC  B0D8               	btfsc	status,0,c
  7843  0016CE  D01A               	goto	u5700
  7844  0016D0                     u5670:
  7845                           
  7846                           ; BSR set to: 0
  7847  0016D0  90D8               	bcf	status,0,c
  7848  0016D2  378B               	rlcf	___ftadd@f1& (0+255),f,b
  7849  0016D4  378C               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  7850  0016D6  378D               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  7851  0016D8  0796               	decf	___ftadd@exp1& (0+255),f,b
  7852                           
  7853                           ; BSR set to: 0
  7854  0016DA  5196               	movf	___ftadd@exp1& (0+255),w,b
  7855  0016DC  1995               	xorwf	___ftadd@exp2& (0+255),w,b
  7856  0016DE  B4D8               	btfsc	status,2,c
  7857  0016E0  D00D               	goto	l4901
  7858                           
  7859                           ; BSR set to: 0
  7860  0016E2  0794               	decf	___ftadd@sign& (0+255),f,b
  7861  0016E4  C094  F091         	movff	___ftadd@sign,??___ftadd
  7862  0016E8  0E07               	movlw	7
  7863  0016EA  1791               	andwf	??___ftadd& (0+255),f,b
  7864  0016EC  B4D8               	btfsc	status,2,c
  7865  0016EE  D006               	goto	l4901
  7866  0016F0  D7EF               	goto	u5670
  7867  0016F2                     l4899:
  7868                           
  7869                           ; BSR set to: 0
  7870  0016F2  90D8               	bcf	status,0,c
  7871  0016F4  3390               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  7872  0016F6  338F               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  7873  0016F8  338E               	rrcf	___ftadd@f2& (0+255),f,b
  7874  0016FA  2B95               	incf	___ftadd@exp2& (0+255),f,b
  7875  0016FC                     l4901:
  7876                           
  7877                           ; BSR set to: 0
  7878  0016FC  5195               	movf	___ftadd@exp2& (0+255),w,b
  7879  0016FE  1996               	xorwf	___ftadd@exp1& (0+255),w,b
  7880  001700  A4D8               	btfss	status,2,c
  7881  001702  D7F7               	goto	l4899
  7882  001704                     u5700:
  7883                           
  7884                           ; BSR set to: 0
  7885  001704  AF94               	btfss	___ftadd@sign& (0+255),7,b
  7886  001706  D00C               	goto	l898
  7887                           
  7888                           ; BSR set to: 0
  7889  001708  0EFF               	movlw	255
  7890  00170A  1B8B               	xorwf	___ftadd@f1& (0+255),f,b
  7891  00170C  0EFF               	movlw	255
  7892  00170E  1B8C               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  7893  001710  0EFF               	movlw	255
  7894  001712  1B8D               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  7895  001714  0E01               	movlw	1
  7896  001716  278B               	addwf	___ftadd@f1& (0+255),f,b
  7897  001718  0E00               	movlw	0
  7898  00171A  238C               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  7899  00171C  0E00               	movlw	0
  7900  00171E  238D               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  7901  001720                     l898:
  7902                           
  7903                           ; BSR set to: 0
  7904  001720  AD94               	btfss	___ftadd@sign& (0+255),6,b
  7905  001722  D00C               	goto	l4907
  7906                           
  7907                           ; BSR set to: 0
  7908  001724  0EFF               	movlw	255
  7909  001726  1B8E               	xorwf	___ftadd@f2& (0+255),f,b
  7910  001728  0EFF               	movlw	255
  7911  00172A  1B8F               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  7912  00172C  0EFF               	movlw	255
  7913  00172E  1B90               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  7914  001730  0E01               	movlw	1
  7915  001732  278E               	addwf	___ftadd@f2& (0+255),f,b
  7916  001734  0E00               	movlw	0
  7917  001736  238F               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7918  001738  0E00               	movlw	0
  7919  00173A  2390               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7920  00173C                     l4907:
  7921                           
  7922                           ; BSR set to: 0
  7923  00173C  0E00               	movlw	0
  7924  00173E  6F94               	movwf	___ftadd@sign& (0+255),b
  7925                           
  7926                           ; BSR set to: 0
  7927  001740  518B               	movf	___ftadd@f1& (0+255),w,b
  7928  001742  278E               	addwf	___ftadd@f2& (0+255),f,b
  7929  001744  518C               	movf	(___ftadd@f1+1)& (0+255),w,b
  7930  001746  238F               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7931  001748  518D               	movf	(___ftadd@f1+2)& (0+255),w,b
  7932  00174A  2390               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7933                           
  7934                           ; BSR set to: 0
  7935  00174C  AF90               	btfss	(___ftadd@f2+2)& (0+255),7,b
  7936  00174E  D00E               	goto	l4917
  7937                           
  7938                           ; BSR set to: 0
  7939  001750  0EFF               	movlw	255
  7940  001752  1B8E               	xorwf	___ftadd@f2& (0+255),f,b
  7941  001754  0EFF               	movlw	255
  7942  001756  1B8F               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  7943  001758  0EFF               	movlw	255
  7944  00175A  1B90               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  7945  00175C  0E01               	movlw	1
  7946  00175E  278E               	addwf	___ftadd@f2& (0+255),f,b
  7947  001760  0E00               	movlw	0
  7948  001762  238F               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7949  001764  0E00               	movlw	0
  7950  001766  2390               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7951                           
  7952                           ; BSR set to: 0
  7953  001768  0E01               	movlw	1
  7954  00176A  6F94               	movwf	___ftadd@sign& (0+255),b
  7955  00176C                     l4917:
  7956                           
  7957                           ; BSR set to: 0
  7958  00176C  C08E  F024         	movff	___ftadd@f2,___ftpack@arg
  7959  001770  C08F  F025         	movff	___ftadd@f2+1,___ftpack@arg+1
  7960  001774  C090  F026         	movff	___ftadd@f2+2,___ftpack@arg+2
  7961  001778  C096  F027         	movff	___ftadd@exp1,___ftpack@exp
  7962  00177C  C094  F028         	movff	___ftadd@sign,___ftpack@sign
  7963  001780  EC4D  F00F         	call	___ftpack	;wreg free
  7964  001784  C024  F08B         	movff	?___ftpack,?___ftadd
  7965  001788  C025  F08C         	movff	?___ftpack+1,?___ftadd+1
  7966  00178C  C026  F08D         	movff	?___ftpack+2,?___ftadd+2
  7967  001790  0012               	return		;funcret
  7968  001792                     __end_of___ftadd:
  7969                           	callstack 0
  7970                           
  7971 ;; *************** function ___ftneg *****************
  7972 ;; Defined at:
  7973 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftneg.c"
  7974 ;; Parameters:    Size  Location     Type
  7975 ;;  f1              3   35[COMRAM] float 
  7976 ;; Auto vars:     Size  Location     Type
  7977 ;;		None
  7978 ;; Return value:  Size  Location     Type
  7979 ;;                  3   35[COMRAM] float 
  7980 ;; Registers used:
  7981 ;;		wreg, status,2, status,0
  7982 ;; Tracked objects:
  7983 ;;		On entry : 3F/0
  7984 ;;		On exit  : 3F/0
  7985 ;;		Unchanged: 3F/0
  7986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7987 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7990 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7991 ;;Total ram usage:        3 bytes
  7992 ;; Hardware stack levels used:    1
  7993 ;; Hardware stack levels required when called:    4
  7994 ;; This function calls:
  7995 ;;		Nothing
  7996 ;; This function is called by:
  7997 ;;		_sprintf
  7998 ;; This function uses a non-reentrant model
  7999 ;;
  8000                           
  8001                           	psect	text33
  8002  002A64                     __ptext33:
  8003                           	callstack 0
  8004  002A64                     ___ftneg:
  8005                           	callstack 24
  8006                           
  8007                           ; BSR set to: 0
  8008                           
  8009                           ;incstack = 0
  8010  002A64  5024               	movf	___ftneg@f1^0,w,c
  8011  002A66  1025               	iorwf	(___ftneg@f1+1)^0,w,c
  8012  002A68  1026               	iorwf	(___ftneg@f1+2)^0,w,c
  8013  002A6A  B4D8               	btfsc	status,2,c
  8014  002A6C  D006               	goto	l948
  8015                           
  8016                           ; BSR set to: 0
  8017  002A6E  0E00               	movlw	0
  8018  002A70  1A24               	xorwf	___ftneg@f1^0,f,c
  8019  002A72  0E00               	movlw	0
  8020  002A74  1A25               	xorwf	(___ftneg@f1+1)^0,f,c
  8021  002A76  0E80               	movlw	128
  8022  002A78  1A26               	xorwf	(___ftneg@f1+2)^0,f,c
  8023  002A7A                     l948:
  8024                           
  8025                           ; BSR set to: 0
  8026  002A7A  C024  F024         	movff	___ftneg@f1,?___ftneg
  8027  002A7E  C025  F025         	movff	___ftneg@f1+1,?___ftneg+1
  8028  002A82  C026  F026         	movff	___ftneg@f1+2,?___ftneg+2
  8029                           
  8030                           ; BSR set to: 0
  8031  002A86  0012               	return		;funcret
  8032  002A88                     __end_of___ftneg:
  8033                           	callstack 0
  8034                           
  8035 ;; *************** function ___ftge *****************
  8036 ;; Defined at:
  8037 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftge.c"
  8038 ;; Parameters:    Size  Location     Type
  8039 ;;  ff1             3   29[BANK0 ] float 
  8040 ;;  ff2             3   32[BANK0 ] float 
  8041 ;; Auto vars:     Size  Location     Type
  8042 ;;		None
  8043 ;; Return value:  Size  Location     Type
  8044 ;;		None               void
  8045 ;; Registers used:
  8046 ;;		wreg, status,2, status,0
  8047 ;; Tracked objects:
  8048 ;;		On entry : 0/0
  8049 ;;		On exit  : 3F/0
  8050 ;;		Unchanged: 0/0
  8051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8052 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8054 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8055 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8056 ;;Total ram usage:        9 bytes
  8057 ;; Hardware stack levels used:    1
  8058 ;; Hardware stack levels required when called:    4
  8059 ;; This function calls:
  8060 ;;		Nothing
  8061 ;; This function is called by:
  8062 ;;		_main
  8063 ;;		_sprintf
  8064 ;; This function uses a non-reentrant model
  8065 ;;
  8066                           
  8067                           	psect	text34
  8068  002186                     __ptext34:
  8069                           	callstack 0
  8070  002186                     ___ftge:
  8071                           	callstack 24
  8072                           
  8073                           ; BSR set to: 0
  8074                           ;incstack = 0
  8075  002186  0100               	movlb	0	; () banked
  8076  002188  AF9F               	btfss	(___ftge@ff1+2)& (0+255),7,b
  8077  00218A  D00F               	goto	l5165
  8078                           
  8079                           ; BSR set to: 0
  8080  00218C  0E00               	movlw	0
  8081  00218E  6FA3               	movwf	??___ftge& (0+255),b
  8082  002190  0E00               	movlw	0
  8083  002192  6FA4               	movwf	(??___ftge+1)& (0+255),b
  8084  002194  0E80               	movlw	128
  8085  002196  6FA5               	movwf	(??___ftge+2)& (0+255),b
  8086  002198  519D               	movf	___ftge@ff1& (0+255),w,b
  8087  00219A  5DA3               	subwf	??___ftge& (0+255),w,b
  8088  00219C  6F9D               	movwf	___ftge@ff1& (0+255),b
  8089  00219E  519E               	movf	(___ftge@ff1+1)& (0+255),w,b
  8090  0021A0  59A4               	subwfb	(??___ftge+1)& (0+255),w,b
  8091  0021A2  6F9E               	movwf	(___ftge@ff1+1)& (0+255),b
  8092  0021A4  519F               	movf	(___ftge@ff1+2)& (0+255),w,b
  8093  0021A6  59A5               	subwfb	(??___ftge+2)& (0+255),w,b
  8094  0021A8  6F9F               	movwf	(___ftge@ff1+2)& (0+255),b
  8095  0021AA                     l5165:
  8096                           
  8097                           ; BSR set to: 0
  8098  0021AA  AFA2               	btfss	(___ftge@ff2+2)& (0+255),7,b
  8099  0021AC  D00F               	goto	l5169
  8100                           
  8101                           ; BSR set to: 0
  8102  0021AE  0E00               	movlw	0
  8103  0021B0  6FA3               	movwf	??___ftge& (0+255),b
  8104  0021B2  0E00               	movlw	0
  8105  0021B4  6FA4               	movwf	(??___ftge+1)& (0+255),b
  8106  0021B6  0E80               	movlw	128
  8107  0021B8  6FA5               	movwf	(??___ftge+2)& (0+255),b
  8108  0021BA  51A0               	movf	___ftge@ff2& (0+255),w,b
  8109  0021BC  5DA3               	subwf	??___ftge& (0+255),w,b
  8110  0021BE  6FA0               	movwf	___ftge@ff2& (0+255),b
  8111  0021C0  51A1               	movf	(___ftge@ff2+1)& (0+255),w,b
  8112  0021C2  59A4               	subwfb	(??___ftge+1)& (0+255),w,b
  8113  0021C4  6FA1               	movwf	(___ftge@ff2+1)& (0+255),b
  8114  0021C6  51A2               	movf	(___ftge@ff2+2)& (0+255),w,b
  8115  0021C8  59A5               	subwfb	(??___ftge+2)& (0+255),w,b
  8116  0021CA  6FA2               	movwf	(___ftge@ff2+2)& (0+255),b
  8117  0021CC                     l5169:
  8118                           
  8119                           ; BSR set to: 0
  8120  0021CC  0E00               	movlw	0
  8121  0021CE  1B9D               	xorwf	___ftge@ff1& (0+255),f,b
  8122  0021D0  0E00               	movlw	0
  8123  0021D2  1B9E               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  8124  0021D4  0E80               	movlw	128
  8125  0021D6  1B9F               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  8126                           
  8127                           ; BSR set to: 0
  8128  0021D8  0E00               	movlw	0
  8129  0021DA  1BA0               	xorwf	___ftge@ff2& (0+255),f,b
  8130  0021DC  0E00               	movlw	0
  8131  0021DE  1BA1               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  8132  0021E0  0E80               	movlw	128
  8133  0021E2  1BA2               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  8134  0021E4  51A0               	movf	___ftge@ff2& (0+255),w,b
  8135  0021E6  5D9D               	subwf	___ftge@ff1& (0+255),w,b
  8136  0021E8  51A1               	movf	(___ftge@ff2+1)& (0+255),w,b
  8137  0021EA  599E               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  8138  0021EC  51A2               	movf	(___ftge@ff2+2)& (0+255),w,b
  8139  0021EE  599F               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  8140  0021F0  B0D8               	btfsc	status,0,c
  8141  0021F2  D002               	goto	l5175
  8142                           
  8143                           ; BSR set to: 0
  8144  0021F4  90D8               	bcf	status,0,c
  8145  0021F6  0012               	return	
  8146  0021F8                     l5175:
  8147                           
  8148                           ; BSR set to: 0
  8149  0021F8  80D8               	bsf	status,0,c
  8150                           
  8151                           ; BSR set to: 0
  8152  0021FA  0012               	return		;funcret
  8153  0021FC                     __end_of___ftge:
  8154                           	callstack 0
  8155                           
  8156 ;; *************** function _lcd_puts *****************
  8157 ;; Defined at:
  8158 ;;		line 120 in file "lcd_x8.c"
  8159 ;; Parameters:    Size  Location     Type
  8160 ;;  s               2   49[COMRAM] PTR unsigned char 
  8161 ;;		 -> display@LCD(64), display@Buffer(32), display@LCDP(64), display@Buffer2(32), 
  8162 ;;		 -> display@Buffer1(32), 
  8163 ;; Auto vars:     Size  Location     Type
  8164 ;;		None
  8165 ;; Return value:  Size  Location     Type
  8166 ;;                  1    wreg      void 
  8167 ;; Registers used:
  8168 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8169 ;; Tracked objects:
  8170 ;;		On entry : 0/0
  8171 ;;		On exit  : 0/0
  8172 ;;		Unchanged: 0/0
  8173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8174 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8177 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8178 ;;Total ram usage:        2 bytes
  8179 ;; Hardware stack levels used:    1
  8180 ;; Hardware stack levels required when called:    9
  8181 ;; This function calls:
  8182 ;;		_lcd_putc
  8183 ;; This function is called by:
  8184 ;;		_display
  8185 ;; This function uses a non-reentrant model
  8186 ;;
  8187                           
  8188                           	psect	text35
  8189  002A88                     __ptext35:
  8190                           	callstack 0
  8191  002A88                     _lcd_puts:
  8192                           	callstack 20
  8193                           
  8194                           ;lcd_x8.c: 121: while (*s) {
  8195                           
  8196                           ; BSR set to: 0
  8197                           ;incstack = 0
  8198  002A88  D009               	goto	l3797
  8199  002A8A                     l3793:
  8200                           
  8201                           ;lcd_x8.c: 122: lcd_putc(*s);
  8202  002A8A  C032  FFD9         	movff	lcd_puts@s,fsr2l
  8203  002A8E  C033  FFDA         	movff	lcd_puts@s+1,fsr2h
  8204  002A92  50DF               	movf	indf2,w,c
  8205  002A94  ECC7  F012         	call	_lcd_putc
  8206                           
  8207                           ;lcd_x8.c: 123: s++;
  8208  002A98  4A32               	infsnz	lcd_puts@s^0,f,c
  8209  002A9A  2A33               	incf	(lcd_puts@s+1)^0,f,c
  8210  002A9C                     l3797:
  8211  002A9C  C032  FFD9         	movff	lcd_puts@s,fsr2l
  8212  002AA0  C033  FFDA         	movff	lcd_puts@s+1,fsr2h
  8213  002AA4  50DF               	movf	indf2,w,c
  8214  002AA6  B4D8               	btfsc	status,2,c
  8215  002AA8  0012               	return	
  8216  002AAA  D7EF               	goto	l3793
  8217  002AAC                     __end_of_lcd_puts:
  8218                           	callstack 0
  8219                           
  8220 ;; *************** function _lcd_putc *****************
  8221 ;; Defined at:
  8222 ;;		line 106 in file "lcd_x8.c"
  8223 ;; Parameters:    Size  Location     Type
  8224 ;;  c               1    wreg     unsigned char 
  8225 ;; Auto vars:     Size  Location     Type
  8226 ;;  c               1   48[COMRAM] unsigned char 
  8227 ;; Return value:  Size  Location     Type
  8228 ;;                  1    wreg      void 
  8229 ;; Registers used:
  8230 ;;		wreg, status,2, status,0, cstack
  8231 ;; Tracked objects:
  8232 ;;		On entry : 0/0
  8233 ;;		On exit  : 0/0
  8234 ;;		Unchanged: 0/0
  8235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8237 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8239 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8240 ;;Total ram usage:        1 bytes
  8241 ;; Hardware stack levels used:    1
  8242 ;; Hardware stack levels required when called:    8
  8243 ;; This function calls:
  8244 ;;		_delay_ms
  8245 ;;		_lcd_gotoxy
  8246 ;;		_lcd_send_byte
  8247 ;; This function is called by:
  8248 ;;		_lcd_puts
  8249 ;; This function uses a non-reentrant model
  8250 ;;
  8251                           
  8252                           	psect	text36
  8253  00258E                     __ptext36:
  8254                           	callstack 0
  8255  00258E                     _lcd_putc:
  8256                           	callstack 20
  8257                           
  8258                           ;incstack = 0
  8259                           ;lcd_putc@c stored from wreg
  8260  00258E  6E31               	movwf	lcd_putc@c^0,c
  8261                           
  8262                           ;lcd_x8.c: 107: switch (c) {
  8263  002590  D01E               	goto	l3439
  8264  002592                     l3429:
  8265  002592  0E01               	movlw	1
  8266  002594  6E2C               	movwf	lcd_send_byte@n^0,c
  8267  002596  0E00               	movlw	0
  8268  002598  EC8A  F014         	call	_lcd_send_byte
  8269                           
  8270                           ;lcd_x8.c: 109: delay_ms(2);
  8271  00259C  0E00               	movlw	0
  8272  00259E  6E25               	movwf	(delay_ms@n+1)^0,c
  8273  0025A0  0E02               	movlw	2
  8274  0025A2  6E24               	movwf	delay_ms@n^0,c
  8275  0025A4  EC1F  F015         	call	_delay_ms	;wreg free
  8276                           
  8277                           ;lcd_x8.c: 110: break;
  8278  0025A8  0012               	return	
  8279  0025AA                     l3431:
  8280  0025AA  0E02               	movlw	2
  8281  0025AC  6E2E               	movwf	lcd_gotoxy@y^0,c
  8282  0025AE  0E01               	movlw	1
  8283  0025B0  ECF1  F013         	call	_lcd_gotoxy
  8284                           
  8285                           ;lcd_x8.c: 112: break;
  8286  0025B4  0012               	return	
  8287  0025B6                     l3433:
  8288  0025B6  0E10               	movlw	16
  8289  0025B8  6E2C               	movwf	lcd_send_byte@n^0,c
  8290  0025BA  0E00               	movlw	0
  8291  0025BC  EC8A  F014         	call	_lcd_send_byte
  8292                           
  8293                           ;lcd_x8.c: 114: break;
  8294  0025C0  0012               	return	
  8295  0025C2                     l3435:
  8296  0025C2  C031  F02C         	movff	lcd_putc@c,lcd_send_byte@n
  8297  0025C6  0E01               	movlw	1
  8298  0025C8  EC8A  F014         	call	_lcd_send_byte
  8299                           
  8300                           ;lcd_x8.c: 116: break;
  8301  0025CC  0012               	return	
  8302  0025CE                     l3439:
  8303  0025CE  5031               	movf	lcd_putc@c^0,w,c
  8304                           
  8305                           ; Switch size 1, requested type "simple"
  8306                           ; Number of cases is 3, Range of values is 8 to 12
  8307                           ; switch strategies available:
  8308                           ; Name         Instructions Cycles
  8309                           ; simple_byte           10     6 (average)
  8310                           ;	Chosen strategy is simple_byte
  8311  0025D0  0A08               	xorlw	8	; case 8
  8312  0025D2  B4D8               	btfsc	status,2,c
  8313  0025D4  D7F0               	goto	l3433
  8314  0025D6  0A02               	xorlw	2	; case 10
  8315  0025D8  B4D8               	btfsc	status,2,c
  8316  0025DA  D7E7               	goto	l3431
  8317  0025DC  0A06               	xorlw	6	; case 12
  8318  0025DE  B4D8               	btfsc	status,2,c
  8319  0025E0  D7D8               	goto	l3429
  8320  0025E2  D7EF               	goto	l3435
  8321  0025E4                     __end_of_lcd_putc:
  8322                           	callstack 0
  8323                           
  8324 ;; *************** function _lcd_gotoxy *****************
  8325 ;; Defined at:
  8326 ;;		line 89 in file "lcd_x8.c"
  8327 ;; Parameters:    Size  Location     Type
  8328 ;;  x               1    wreg     unsigned char 
  8329 ;;  y               1   45[COMRAM] unsigned char 
  8330 ;; Auto vars:     Size  Location     Type
  8331 ;;  x               1   46[COMRAM] unsigned char 
  8332 ;;  address         1   47[COMRAM] unsigned char 
  8333 ;; Return value:  Size  Location     Type
  8334 ;;                  1    wreg      void 
  8335 ;; Registers used:
  8336 ;;		wreg, status,2, status,0, cstack
  8337 ;; Tracked objects:
  8338 ;;		On entry : 0/0
  8339 ;;		On exit  : 0/0
  8340 ;;		Unchanged: 0/0
  8341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8342 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8343 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8345 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8346 ;;Total ram usage:        3 bytes
  8347 ;; Hardware stack levels used:    1
  8348 ;; Hardware stack levels required when called:    7
  8349 ;; This function calls:
  8350 ;;		_lcd_send_byte
  8351 ;; This function is called by:
  8352 ;;		_lcd_putc
  8353 ;;		_display
  8354 ;; This function uses a non-reentrant model
  8355 ;;
  8356                           
  8357                           	psect	text37
  8358  0027E2                     __ptext37:
  8359                           	callstack 0
  8360  0027E2                     _lcd_gotoxy:
  8361                           	callstack 20
  8362                           
  8363                           ;incstack = 0
  8364                           ;lcd_gotoxy@x stored from wreg
  8365  0027E2  6E2F               	movwf	lcd_gotoxy@x^0,c
  8366                           
  8367                           ;lcd_x8.c: 90: unsigned char address;;lcd_x8.c: 92: switch (y) {
  8368  0027E4  D009               	goto	l3181
  8369  0027E6                     l3171:
  8370  0027E6  0E80               	movlw	128
  8371  0027E8  D005               	goto	L4
  8372  0027EA                     l3173:
  8373  0027EA  0EC0               	movlw	192
  8374  0027EC  D003               	goto	L4
  8375  0027EE                     l3175:
  8376  0027EE  0E90               	movlw	144
  8377  0027F0  D001               	goto	L4
  8378  0027F2                     l3177:
  8379  0027F2  0ED0               	movlw	208
  8380  0027F4                     L4:
  8381  0027F4  6E30               	movwf	lcd_gotoxy@address^0,c
  8382                           
  8383                           ;lcd_x8.c: 100: break;
  8384  0027F6  D00D               	goto	l3183
  8385  0027F8                     l3181:
  8386  0027F8  502E               	movf	lcd_gotoxy@y^0,w,c
  8387                           
  8388                           ; Switch size 1, requested type "simple"
  8389                           ; Number of cases is 4, Range of values is 1 to 4
  8390                           ; switch strategies available:
  8391                           ; Name         Instructions Cycles
  8392                           ; simple_byte           13     7 (average)
  8393                           ;	Chosen strategy is simple_byte
  8394  0027FA  0A01               	xorlw	1	; case 1
  8395  0027FC  B4D8               	btfsc	status,2,c
  8396  0027FE  D7F3               	goto	l3171
  8397  002800  0A03               	xorlw	3	; case 2
  8398  002802  B4D8               	btfsc	status,2,c
  8399  002804  D7F2               	goto	l3173
  8400  002806  0A01               	xorlw	1	; case 3
  8401  002808  B4D8               	btfsc	status,2,c
  8402  00280A  D7F1               	goto	l3175
  8403  00280C  0A07               	xorlw	7	; case 4
  8404  00280E  B4D8               	btfsc	status,2,c
  8405  002810  D7F0               	goto	l3177
  8406  002812                     l3183:
  8407                           
  8408                           ;lcd_x8.c: 102: address += x - 1;
  8409  002812  042F               	decf	lcd_gotoxy@x^0,w,c
  8410  002814  2630               	addwf	lcd_gotoxy@address^0,f,c
  8411                           
  8412                           ;lcd_x8.c: 103: lcd_send_byte(0, (unsigned char) (0x80 | address));
  8413  002816  5030               	movf	lcd_gotoxy@address^0,w,c
  8414  002818  0980               	iorlw	128
  8415  00281A  6E2C               	movwf	lcd_send_byte@n^0,c
  8416  00281C  0E00               	movlw	0
  8417  00281E  EC8A  F014         	call	_lcd_send_byte
  8418  002822  0012               	return		;funcret
  8419  002824                     __end_of_lcd_gotoxy:
  8420                           	callstack 0
  8421                           
  8422 ;; *************** function _lcd_send_byte *****************
  8423 ;; Defined at:
  8424 ;;		line 39 in file "lcd_x8.c"
  8425 ;; Parameters:    Size  Location     Type
  8426 ;;  cm_data         1    wreg     unsigned char 
  8427 ;;  n               1   43[COMRAM] unsigned char 
  8428 ;; Auto vars:     Size  Location     Type
  8429 ;;  cm_data         1   44[COMRAM] unsigned char 
  8430 ;; Return value:  Size  Location     Type
  8431 ;;                  1    wreg      void 
  8432 ;; Registers used:
  8433 ;;		wreg, status,2, status,0, cstack
  8434 ;; Tracked objects:
  8435 ;;		On entry : 0/0
  8436 ;;		On exit  : 0/0
  8437 ;;		Unchanged: 0/0
  8438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8439 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8440 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8442 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8443 ;;Total ram usage:        2 bytes
  8444 ;; Hardware stack levels used:    1
  8445 ;; Hardware stack levels required when called:    6
  8446 ;; This function calls:
  8447 ;;		_delay_cycles
  8448 ;;		_lcd_send_nibble
  8449 ;; This function is called by:
  8450 ;;		_lcd_init
  8451 ;;		_lcd_gotoxy
  8452 ;;		_lcd_putc
  8453 ;;		_main
  8454 ;; This function uses a non-reentrant model
  8455 ;;
  8456                           
  8457                           	psect	text38
  8458  002914                     __ptext38:
  8459                           	callstack 0
  8460  002914                     _lcd_send_byte:
  8461                           	callstack 24
  8462                           
  8463                           ;incstack = 0
  8464                           ;lcd_send_byte@cm_data stored from wreg
  8465  002914  6E2D               	movwf	lcd_send_byte@cm_data^0,c
  8466                           
  8467                           ;lcd_x8.c: 43: PORTEbits.RE2 = cm_data;
  8468  002916  B02D               	btfsc	lcd_send_byte@cm_data^0,0,c
  8469  002918  D002               	bra	u2745
  8470  00291A  9484               	bcf	132,2,c	;volatile
  8471  00291C  D001               	bra	u2746
  8472  00291E                     u2745:
  8473  00291E  8484               	bsf	132,2,c	;volatile
  8474  002920                     u2746:
  8475                           
  8476                           ;lcd_x8.c: 44: delay_cycles(1);
  8477  002920  0E01               	movlw	1
  8478  002922  ECE0  F014         	call	_delay_cycles
  8479                           
  8480                           ;lcd_x8.c: 46: delay_cycles(1);
  8481  002926  0E01               	movlw	1
  8482  002928  ECE0  F014         	call	_delay_cycles
  8483                           
  8484                           ;lcd_x8.c: 47: PORTEbits.RE1 = 0;
  8485  00292C  9284               	bcf	132,1,c	;volatile
  8486                           
  8487                           ;lcd_x8.c: 48: lcd_send_nibble(n >> 4);
  8488  00292E  382C               	swapf	lcd_send_byte@n^0,w,c
  8489  002930  0B0F               	andlw	15
  8490  002932  EC68  F015         	call	_lcd_send_nibble
  8491                           
  8492                           ;lcd_x8.c: 49: lcd_send_nibble(n & 0x0f);
  8493  002936  502C               	movf	lcd_send_byte@n^0,w,c
  8494  002938  0B0F               	andlw	15
  8495  00293A  EC68  F015         	call	_lcd_send_nibble
  8496                           
  8497                           ;lcd_x8.c: 50: if (cm_data) _delaywdt((unsigned long)((200)*(4000000UL/4000000.0)));
  8498  00293E  502D               	movf	lcd_send_byte@cm_data^0,w,c
  8499  002940  B4D8               	btfsc	status,2,c
  8500  002942  0012               	return	
  8501  002944  0E32               	movlw	50
  8502  002946                     u7157:
  8503  002946  0004               	clrwdt	
  8504  002948  2EE8               	decfsz	wreg,f,c
  8505  00294A  D7FD               	bra	u7157
  8506  00294C  0012               	return		;funcret
  8507  00294E                     __end_of_lcd_send_byte:
  8508                           	callstack 0
  8509                           
  8510 ;; *************** function _lcd_send_nibble *****************
  8511 ;; Defined at:
  8512 ;;		line 29 in file "lcd_x8.c"
  8513 ;; Parameters:    Size  Location     Type
  8514 ;;  n               1    wreg     unsigned char 
  8515 ;; Auto vars:     Size  Location     Type
  8516 ;;  n               1   42[COMRAM] unsigned char 
  8517 ;; Return value:  Size  Location     Type
  8518 ;;                  1    wreg      void 
  8519 ;; Registers used:
  8520 ;;		wreg, status,2, status,0, cstack
  8521 ;; Tracked objects:
  8522 ;;		On entry : 0/0
  8523 ;;		On exit  : 0/0
  8524 ;;		Unchanged: 0/0
  8525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8527 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8528 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8529 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8530 ;;Total ram usage:        2 bytes
  8531 ;; Hardware stack levels used:    1
  8532 ;; Hardware stack levels required when called:    5
  8533 ;; This function calls:
  8534 ;;		_delay_cycles
  8535 ;; This function is called by:
  8536 ;;		_lcd_send_byte
  8537 ;;		_lcd_init
  8538 ;; This function uses a non-reentrant model
  8539 ;;
  8540                           
  8541                           	psect	text39
  8542  002AD0                     __ptext39:
  8543                           	callstack 0
  8544  002AD0                     _lcd_send_nibble:
  8545                           	callstack 24
  8546                           
  8547                           ;incstack = 0
  8548                           ;lcd_send_nibble@n stored from wreg
  8549  002AD0  6E2B               	movwf	lcd_send_nibble@n^0,c
  8550                           
  8551                           ;lcd_x8.c: 31: lcd.data = n;
  8552  002AD2  C02B  F02A         	movff	lcd_send_nibble@n,??_lcd_send_nibble
  8553  002AD6  3A2A               	swapf	??_lcd_send_nibble^0,f,c
  8554  002AD8  5083               	movf	131,w,c
  8555  002ADA  182A               	xorwf	??_lcd_send_nibble^0,w,c
  8556  002ADC  0B0F               	andlw	-241
  8557  002ADE  182A               	xorwf	??_lcd_send_nibble^0,w,c
  8558  002AE0  6E83               	movwf	131,c
  8559                           
  8560                           ;lcd_x8.c: 33: delay_cycles(1);
  8561  002AE2  0E01               	movlw	1
  8562  002AE4  ECE0  F014         	call	_delay_cycles
  8563                           
  8564                           ;lcd_x8.c: 34: PORTEbits.RE1 = 1;
  8565  002AE8  8284               	bsf	132,1,c	;volatile
  8566                           
  8567                           ;lcd_x8.c: 35: _delaywdt((unsigned long)((2)*(4000000UL/4000000.0)));
  8568  002AEA  0004               	clrwdt	
  8569  002AEC  F000               	nop		;2 cycle nop
  8570                           
  8571                           ;lcd_x8.c: 36: PORTEbits.RE1 = 0;
  8572  002AEE  9284               	bcf	132,1,c	;volatile
  8573  002AF0  0012               	return		;funcret
  8574  002AF2                     __end_of_lcd_send_nibble:
  8575                           	callstack 0
  8576                           
  8577 ;; *************** function _delay_cycles *****************
  8578 ;; Defined at:
  8579 ;;		line 20 in file "lcd_x8.c"
  8580 ;; Parameters:    Size  Location     Type
  8581 ;;  n               1    wreg     unsigned char 
  8582 ;; Auto vars:     Size  Location     Type
  8583 ;;  n               1   38[COMRAM] unsigned char 
  8584 ;;  x               2   39[COMRAM] int 
  8585 ;; Return value:  Size  Location     Type
  8586 ;;                  1    wreg      void 
  8587 ;; Registers used:
  8588 ;;		wreg, status,2, status,0
  8589 ;; Tracked objects:
  8590 ;;		On entry : 0/0
  8591 ;;		On exit  : 0/0
  8592 ;;		Unchanged: 0/0
  8593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8595 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8596 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8597 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8598 ;;Total ram usage:        6 bytes
  8599 ;; Hardware stack levels used:    1
  8600 ;; Hardware stack levels required when called:    4
  8601 ;; This function calls:
  8602 ;;		Nothing
  8603 ;; This function is called by:
  8604 ;;		_lcd_send_nibble
  8605 ;;		_lcd_send_byte
  8606 ;; This function uses a non-reentrant model
  8607 ;;
  8608                           
  8609                           	psect	text40
  8610  0029C0                     __ptext40:
  8611                           	callstack 0
  8612  0029C0                     _delay_cycles:
  8613                           	callstack 24
  8614                           
  8615                           ;incstack = 0
  8616                           ;delay_cycles@n stored from wreg
  8617  0029C0  6E27               	movwf	delay_cycles@n^0,c
  8618                           
  8619                           ;lcd_x8.c: 21: int x;;lcd_x8.c: 22: for (x = 0; x <= n; x++) {
  8620  0029C2  0E00               	movlw	0
  8621  0029C4  6E29               	movwf	(delay_cycles@x+1)^0,c
  8622  0029C6  0E00               	movlw	0
  8623  0029C8  6E28               	movwf	delay_cycles@x^0,c
  8624  0029CA  D003               	goto	l3099
  8625  0029CC                     l14:
  8626  0029CC  0004               	clrwdt		;# 
  8627  0029CE  4A28               	infsnz	delay_cycles@x^0,f,c
  8628  0029D0  2A29               	incf	(delay_cycles@x+1)^0,f,c
  8629  0029D2                     l3099:
  8630  0029D2  5027               	movf	delay_cycles@n^0,w,c
  8631  0029D4  6E24               	movwf	??_delay_cycles^0,c
  8632  0029D6  6A25               	clrf	(??_delay_cycles+1)^0,c
  8633  0029D8  5028               	movf	delay_cycles@x^0,w,c
  8634  0029DA  5C24               	subwf	??_delay_cycles^0,w,c
  8635  0029DC  5025               	movf	(??_delay_cycles+1)^0,w,c
  8636  0029DE  0A80               	xorlw	128
  8637  0029E0  6E26               	movwf	(??_delay_cycles+2)^0,c
  8638  0029E2  5029               	movf	(delay_cycles@x+1)^0,w,c
  8639  0029E4  0A80               	xorlw	128
  8640  0029E6  5826               	subwfb	(??_delay_cycles+2)^0,w,c
  8641  0029E8  A0D8               	btfss	status,0,c
  8642  0029EA  0012               	return	
  8643  0029EC  D7EF               	goto	l14
  8644  0029EE                     __end_of_delay_cycles:
  8645                           	callstack 0
  8646                           
  8647 ;; *************** function _delay_ms *****************
  8648 ;; Defined at:
  8649 ;;		line 165 in file "HW2.c"
  8650 ;; Parameters:    Size  Location     Type
  8651 ;;  n               2   35[COMRAM] unsigned int 
  8652 ;; Auto vars:     Size  Location     Type
  8653 ;;  i               2   37[COMRAM] int 
  8654 ;; Return value:  Size  Location     Type
  8655 ;;                  1    wreg      void 
  8656 ;; Registers used:
  8657 ;;		wreg, status,2, status,0
  8658 ;; Tracked objects:
  8659 ;;		On entry : 0/0
  8660 ;;		On exit  : 0/0
  8661 ;;		Unchanged: 0/0
  8662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8663 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8664 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8666 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8667 ;;Total ram usage:        4 bytes
  8668 ;; Hardware stack levels used:    1
  8669 ;; Hardware stack levels required when called:    4
  8670 ;; This function calls:
  8671 ;;		Nothing
  8672 ;; This function is called by:
  8673 ;;		_lcd_init
  8674 ;;		_lcd_putc
  8675 ;;		_main
  8676 ;; This function uses a non-reentrant model
  8677 ;;
  8678                           
  8679                           	psect	text41
  8680  002A3E                     __ptext41:
  8681                           	callstack 0
  8682  002A3E                     _delay_ms:
  8683                           	callstack 25
  8684                           
  8685                           ;HW2.c: 167: int i;;HW2.c: 168: for (i=0; i < n; i++){
  8686                           
  8687                           ;incstack = 0
  8688  002A3E  0E00               	movlw	0
  8689  002A40  6E27               	movwf	(delay_ms@i+1)^0,c
  8690  002A42  0E00               	movlw	0
  8691  002A44  6E26               	movwf	delay_ms@i^0,c
  8692  002A46  D007               	goto	l270
  8693  002A48                     l3165:
  8694                           
  8695                           ;HW2.c: 169: _delaywdt((unsigned long)((1)*(4000000UL/4000.0))) ;
  8696  002A48  0EC8               	movlw	200
  8697  002A4A                     u7167:
  8698  002A4A  0004               	clrwdt	
  8699  002A4C  0004               	clrwdt	
  8700  002A4E  2EE8               	decfsz	wreg,f,c
  8701  002A50  D7FC               	bra	u7167
  8702  002A52  4A26               	infsnz	delay_ms@i^0,f,c
  8703  002A54  2A27               	incf	(delay_ms@i+1)^0,f,c
  8704  002A56                     l270:
  8705  002A56  5024               	movf	delay_ms@n^0,w,c
  8706  002A58  5C26               	subwf	delay_ms@i^0,w,c
  8707  002A5A  5025               	movf	(delay_ms@n+1)^0,w,c
  8708  002A5C  5827               	subwfb	(delay_ms@i+1)^0,w,c
  8709  002A5E  B0D8               	btfsc	status,0,c
  8710  002A60  0012               	return	
  8711  002A62  D7F2               	goto	l3165
  8712  002A64                     __end_of_delay_ms:
  8713                           	callstack 0
  8714                           
  8715 ;; *************** function _decrementMinClock *****************
  8716 ;; Defined at:
  8717 ;;		line 262 in file "HW2.c"
  8718 ;; Parameters:    Size  Location     Type
  8719 ;;		None
  8720 ;; Auto vars:     Size  Location     Type
  8721 ;;		None
  8722 ;; Return value:  Size  Location     Type
  8723 ;;                  1    wreg      void 
  8724 ;; Registers used:
  8725 ;;		wreg, status,2, status,0
  8726 ;; Tracked objects:
  8727 ;;		On entry : 3F/1
  8728 ;;		On exit  : 3F/1
  8729 ;;		Unchanged: 0/0
  8730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8735 ;;Total ram usage:        0 bytes
  8736 ;; Hardware stack levels used:    1
  8737 ;; Hardware stack levels required when called:    4
  8738 ;; This function calls:
  8739 ;;		Nothing
  8740 ;; This function is called by:
  8741 ;;		_main
  8742 ;; This function uses a non-reentrant model
  8743 ;;
  8744                           
  8745                           	psect	text42
  8746  00294E                     __ptext42:
  8747                           	callstack 0
  8748  00294E                     _decrementMinClock:
  8749                           	callstack 26
  8750                           
  8751                           ; BSR set to: 1
  8752                           ;HW2.c: 263: minutes -=1 ;
  8753                           
  8754                           ;incstack = 0
  8755  00294E  07E0               	decf	_minutes& (0+255),f,b
  8756  002950  A0D8               	btfss	status,0,c
  8757  002952  07E1               	decf	(_minutes+1)& (0+255),f,b
  8758                           
  8759                           ; BSR set to: 1
  8760                           ;HW2.c: 264: if (minutes<=0){minutes =minutes+60 ;
  8761  002954  BFE1               	btfsc	(_minutes+1)& (0+255),7,b
  8762  002956  D005               	goto	u4980
  8763  002958  51E1               	movf	(_minutes+1)& (0+255),w,b
  8764  00295A  E115               	bnz	l314
  8765  00295C  05E0               	decf	_minutes& (0+255),w,b
  8766  00295E  B0D8               	btfsc	status,0,c
  8767  002960  0012               	return	
  8768  002962                     u4980:
  8769                           
  8770                           ; BSR set to: 1
  8771  002962  0E3C               	movlw	60
  8772  002964  25E0               	addwf	_minutes& (0+255),w,b
  8773  002966  6FE0               	movwf	_minutes& (0+255),b
  8774  002968  0E00               	movlw	0
  8775  00296A  21E1               	addwfc	(_minutes+1)& (0+255),w,b
  8776  00296C  6FE1               	movwf	(_minutes+1)& (0+255),b
  8777                           
  8778                           ; BSR set to: 1
  8779                           ;HW2.c: 266: hours =0 ;
  8780  00296E  0E00               	movlw	0
  8781  002970  6FE5               	movwf	(_hours+1)& (0+255),b
  8782  002972  0E00               	movlw	0
  8783  002974  6FE4               	movwf	_hours& (0+255),b
  8784                           
  8785                           ; BSR set to: 1
  8786                           ;HW2.c: 267: if (hours<=0){hours =0 ;
  8787  002976  51E4               	movf	_hours& (0+255),w,b
  8788  002978  11E5               	iorwf	(_hours+1)& (0+255),w,b
  8789  00297A  A4D8               	btfss	status,2,c
  8790  00297C  0012               	return	
  8791                           
  8792                           ; BSR set to: 1
  8793  00297E  0E00               	movlw	0
  8794  002980  6FE5               	movwf	(_hours+1)& (0+255),b
  8795  002982  0E00               	movlw	0
  8796  002984  6FE4               	movwf	_hours& (0+255),b
  8797  002986                     l314:
  8798                           
  8799                           ; BSR set to: 1
  8800  002986  0012               	return		;funcret
  8801  002988                     __end_of_decrementMinClock:
  8802                           	callstack 0
  8803                           
  8804 ;; *************** function _decrementHourClock *****************
  8805 ;; Defined at:
  8806 ;;		line 319 in file "HW2.c"
  8807 ;; Parameters:    Size  Location     Type
  8808 ;;		None
  8809 ;; Auto vars:     Size  Location     Type
  8810 ;;		None
  8811 ;; Return value:  Size  Location     Type
  8812 ;;                  1    wreg      void 
  8813 ;; Registers used:
  8814 ;;		wreg, status,2, status,0
  8815 ;; Tracked objects:
  8816 ;;		On entry : 3F/1
  8817 ;;		On exit  : 3F/1
  8818 ;;		Unchanged: 0/0
  8819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8824 ;;Total ram usage:        0 bytes
  8825 ;; Hardware stack levels used:    1
  8826 ;; Hardware stack levels required when called:    4
  8827 ;; This function calls:
  8828 ;;		Nothing
  8829 ;; This function is called by:
  8830 ;;		_main
  8831 ;; This function uses a non-reentrant model
  8832 ;;
  8833                           
  8834                           	psect	text43
  8835  002B74                     __ptext43:
  8836                           	callstack 0
  8837  002B74                     _decrementHourClock:
  8838                           	callstack 26
  8839                           
  8840                           ; BSR set to: 1
  8841                           ;HW2.c: 320: hours-=1;
  8842                           
  8843                           ; BSR set to: 1
  8844                           ;incstack = 0
  8845  002B74  07E4               	decf	_hours& (0+255),f,b
  8846  002B76  A0D8               	btfss	status,0,c
  8847  002B78  07E5               	decf	(_hours+1)& (0+255),f,b
  8848                           
  8849                           ; BSR set to: 1
  8850                           
  8851                           ;HW2.c: 321: if (hours<0){ hours=0 ;
  8852  002B7A  0012               	return		;funcret
  8853  002B7C                     __end_of_decrementHourClock:
  8854                           	callstack 0
  8855                           
  8856 ;; *************** function _decrementClock *****************
  8857 ;; Defined at:
  8858 ;;		line 204 in file "HW2.c"
  8859 ;; Parameters:    Size  Location     Type
  8860 ;;		None
  8861 ;; Auto vars:     Size  Location     Type
  8862 ;;		None
  8863 ;; Return value:  Size  Location     Type
  8864 ;;                  1    wreg      void 
  8865 ;; Registers used:
  8866 ;;		wreg, status,2, status,0
  8867 ;; Tracked objects:
  8868 ;;		On entry : 3F/1
  8869 ;;		On exit  : 3F/1
  8870 ;;		Unchanged: 0/0
  8871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8876 ;;Total ram usage:        0 bytes
  8877 ;; Hardware stack levels used:    1
  8878 ;; Hardware stack levels required when called:    4
  8879 ;; This function calls:
  8880 ;;		Nothing
  8881 ;; This function is called by:
  8882 ;;		_main
  8883 ;; This function uses a non-reentrant model
  8884 ;;
  8885                           
  8886                           	psect	text44
  8887  002632                     __ptext44:
  8888                           	callstack 0
  8889  002632                     _decrementClock:
  8890                           	callstack 26
  8891                           
  8892                           ; BSR set to: 1
  8893                           ;HW2.c: 206: if(--seconds <= 0) {
  8894                           
  8895                           ; BSR set to: 1
  8896                           ;incstack = 0
  8897  002632  07E6               	decf	_seconds& (0+255),f,b
  8898  002634  A0D8               	btfss	status,0,c
  8899  002636  07E7               	decf	(_seconds+1)& (0+255),f,b
  8900  002638  BFE7               	btfsc	(_seconds+1)& (0+255),7,b
  8901  00263A  D005               	goto	u4870
  8902  00263C  51E7               	movf	(_seconds+1)& (0+255),w,b
  8903  00263E  E11F               	bnz	l292
  8904  002640  05E6               	decf	_seconds& (0+255),w,b
  8905  002642  B0D8               	btfsc	status,0,c
  8906  002644  0012               	return	
  8907  002646                     u4870:
  8908                           
  8909                           ; BSR set to: 1
  8910                           ;HW2.c: 207: seconds=59;
  8911  002646  0E00               	movlw	0
  8912  002648  6FE7               	movwf	(_seconds+1)& (0+255),b
  8913  00264A  0E3B               	movlw	59
  8914  00264C  6FE6               	movwf	_seconds& (0+255),b
  8915                           
  8916                           ; BSR set to: 1
  8917                           ;HW2.c: 208: if(--minutes == -1) {
  8918  00264E  07E0               	decf	_minutes& (0+255),f,b
  8919  002650  A0D8               	btfss	status,0,c
  8920  002652  07E1               	decf	(_minutes+1)& (0+255),f,b
  8921  002654  29E0               	incf	_minutes& (0+255),w,b
  8922  002656  E113               	bnz	l292
  8923  002658  29E1               	incf	(_minutes+1)& (0+255),w,b
  8924  00265A  A4D8               	btfss	status,2,c
  8925  00265C  0012               	return	
  8926                           
  8927                           ; BSR set to: 1
  8928                           ;HW2.c: 209: minutes = 59;
  8929  00265E  0E00               	movlw	0
  8930  002660  6FE1               	movwf	(_minutes+1)& (0+255),b
  8931  002662  0E3B               	movlw	59
  8932  002664  6FE0               	movwf	_minutes& (0+255),b
  8933                           
  8934                           ; BSR set to: 1
  8935                           ;HW2.c: 210: if (--hours == -1) hours = 9;
  8936  002666  07E4               	decf	_hours& (0+255),f,b
  8937  002668  A0D8               	btfss	status,0,c
  8938  00266A  07E5               	decf	(_hours+1)& (0+255),f,b
  8939  00266C  29E4               	incf	_hours& (0+255),w,b
  8940  00266E  E107               	bnz	l292
  8941  002670  29E5               	incf	(_hours+1)& (0+255),w,b
  8942  002672  A4D8               	btfss	status,2,c
  8943  002674  0012               	return	
  8944                           
  8945                           ; BSR set to: 1
  8946  002676  0E00               	movlw	0
  8947  002678  6FE5               	movwf	(_hours+1)& (0+255),b
  8948  00267A  0E09               	movlw	9
  8949  00267C  6FE4               	movwf	_hours& (0+255),b
  8950  00267E                     l292:
  8951                           
  8952                           ; BSR set to: 1
  8953  00267E  0012               	return		;funcret
  8954  002680                     __end_of_decrementClock:
  8955                           	callstack 0
  8956                           
  8957 ;; *************** function _decrement10SClock *****************
  8958 ;; Defined at:
  8959 ;;		line 228 in file "HW2.c"
  8960 ;; Parameters:    Size  Location     Type
  8961 ;;		None
  8962 ;; Auto vars:     Size  Location     Type
  8963 ;;		None
  8964 ;; Return value:  Size  Location     Type
  8965 ;;                  1    wreg      void 
  8966 ;; Registers used:
  8967 ;;		wreg, status,2, status,0
  8968 ;; Tracked objects:
  8969 ;;		On entry : 3F/1
  8970 ;;		On exit  : 3F/1
  8971 ;;		Unchanged: 0/0
  8972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8977 ;;Total ram usage:        0 bytes
  8978 ;; Hardware stack levels used:    1
  8979 ;; Hardware stack levels required when called:    4
  8980 ;; This function calls:
  8981 ;;		Nothing
  8982 ;; This function is called by:
  8983 ;;		_main
  8984 ;; This function uses a non-reentrant model
  8985 ;;
  8986                           
  8987                           	psect	text45
  8988  002534                     __ptext45:
  8989                           	callstack 0
  8990  002534                     _decrement10SClock:
  8991                           	callstack 26
  8992                           
  8993                           ; BSR set to: 1
  8994                           ;HW2.c: 229: seconds -=10 ;
  8995                           
  8996                           ; BSR set to: 1
  8997                           ;incstack = 0
  8998  002534  0EF6               	movlw	246
  8999  002536  27E6               	addwf	_seconds& (0+255),f,b
  9000  002538  0EFF               	movlw	255
  9001  00253A  23E7               	addwfc	(_seconds+1)& (0+255),f,b
  9002                           
  9003                           ;HW2.c: 230: if (seconds<=0){seconds =seconds+60 ;
  9004  00253C  BFE7               	btfsc	(_seconds+1)& (0+255),7,b
  9005  00253E  D005               	goto	u4930
  9006  002540  51E7               	movf	(_seconds+1)& (0+255),w,b
  9007  002542  E124               	bnz	l304
  9008  002544  05E6               	decf	_seconds& (0+255),w,b
  9009  002546  B0D8               	btfsc	status,0,c
  9010  002548  0012               	return	
  9011  00254A                     u4930:
  9012                           
  9013                           ; BSR set to: 1
  9014  00254A  0E3C               	movlw	60
  9015  00254C  25E6               	addwf	_seconds& (0+255),w,b
  9016  00254E  6FE6               	movwf	_seconds& (0+255),b
  9017  002550  0E00               	movlw	0
  9018  002552  21E7               	addwfc	(_seconds+1)& (0+255),w,b
  9019  002554  6FE7               	movwf	(_seconds+1)& (0+255),b
  9020                           
  9021                           ; BSR set to: 1
  9022                           ;HW2.c: 231: minutes -=1;
  9023  002556  07E0               	decf	_minutes& (0+255),f,b
  9024  002558  A0D8               	btfss	status,0,c
  9025  00255A  07E1               	decf	(_minutes+1)& (0+255),f,b
  9026                           
  9027                           ; BSR set to: 1
  9028                           ;HW2.c: 232: if (minutes<=0){minutes =60+minutes ;
  9029  00255C  BFE1               	btfsc	(_minutes+1)& (0+255),7,b
  9030  00255E  D005               	goto	u4940
  9031  002560  51E1               	movf	(_minutes+1)& (0+255),w,b
  9032  002562  E114               	bnz	l304
  9033  002564  05E0               	decf	_minutes& (0+255),w,b
  9034  002566  B0D8               	btfsc	status,0,c
  9035  002568  0012               	return	
  9036  00256A                     u4940:
  9037                           
  9038                           ; BSR set to: 1
  9039  00256A  0E3C               	movlw	60
  9040  00256C  25E0               	addwf	_minutes& (0+255),w,b
  9041  00256E  6FE0               	movwf	_minutes& (0+255),b
  9042  002570  0E00               	movlw	0
  9043  002572  21E1               	addwfc	(_minutes+1)& (0+255),w,b
  9044  002574  6FE1               	movwf	(_minutes+1)& (0+255),b
  9045                           
  9046                           ; BSR set to: 1
  9047                           ;HW2.c: 233: hours-=1;
  9048  002576  07E4               	decf	_hours& (0+255),f,b
  9049  002578  A0D8               	btfss	status,0,c
  9050  00257A  07E5               	decf	(_hours+1)& (0+255),f,b
  9051                           
  9052                           ; BSR set to: 1
  9053                           ;HW2.c: 234: if (hours<=0){hours =0 ;
  9054  00257C  51E4               	movf	_hours& (0+255),w,b
  9055  00257E  11E5               	iorwf	(_hours+1)& (0+255),w,b
  9056  002580  A4D8               	btfss	status,2,c
  9057  002582  0012               	return	
  9058                           
  9059                           ; BSR set to: 1
  9060  002584  0E00               	movlw	0
  9061  002586  6FE5               	movwf	(_hours+1)& (0+255),b
  9062  002588  0E00               	movlw	0
  9063  00258A  6FE4               	movwf	_hours& (0+255),b
  9064  00258C                     l304:
  9065                           
  9066                           ; BSR set to: 1
  9067  00258C  0012               	return		;funcret
  9068  00258E                     __end_of_decrement10SClock:
  9069                           	callstack 0
  9070                           
  9071 ;; *************** function _decrement10MinClock *****************
  9072 ;; Defined at:
  9073 ;;		line 295 in file "HW2.c"
  9074 ;; Parameters:    Size  Location     Type
  9075 ;;		None
  9076 ;; Auto vars:     Size  Location     Type
  9077 ;;		None
  9078 ;; Return value:  Size  Location     Type
  9079 ;;                  1    wreg      void 
  9080 ;; Registers used:
  9081 ;;		wreg, status,2, status,0
  9082 ;; Tracked objects:
  9083 ;;		On entry : 3F/1
  9084 ;;		On exit  : 3F/1
  9085 ;;		Unchanged: 0/0
  9086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9090 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9091 ;;Total ram usage:        0 bytes
  9092 ;; Hardware stack levels used:    1
  9093 ;; Hardware stack levels required when called:    4
  9094 ;; This function calls:
  9095 ;;		Nothing
  9096 ;; This function is called by:
  9097 ;;		_main
  9098 ;; This function uses a non-reentrant model
  9099 ;;
  9100                           
  9101                           	psect	text46
  9102  002864                     __ptext46:
  9103                           	callstack 0
  9104  002864                     _decrement10MinClock:
  9105                           	callstack 26
  9106                           
  9107                           ; BSR set to: 1
  9108                           ;HW2.c: 296: minutes -=10 ;
  9109                           
  9110                           ; BSR set to: 1
  9111                           ;incstack = 0
  9112  002864  0EF6               	movlw	246
  9113  002866  27E0               	addwf	_minutes& (0+255),f,b
  9114  002868  0EFF               	movlw	255
  9115  00286A  23E1               	addwfc	(_minutes+1)& (0+255),f,b
  9116                           
  9117                           ;HW2.c: 297: if (minutes<=0){minutes =minutes+60 ;
  9118  00286C  BFE1               	btfsc	(_minutes+1)& (0+255),7,b
  9119  00286E  D005               	goto	u5020
  9120  002870  51E1               	movf	(_minutes+1)& (0+255),w,b
  9121  002872  E115               	bnz	l324
  9122  002874  05E0               	decf	_minutes& (0+255),w,b
  9123  002876  B0D8               	btfsc	status,0,c
  9124  002878  0012               	return	
  9125  00287A                     u5020:
  9126                           
  9127                           ; BSR set to: 1
  9128  00287A  0E3C               	movlw	60
  9129  00287C  25E0               	addwf	_minutes& (0+255),w,b
  9130  00287E  6FE0               	movwf	_minutes& (0+255),b
  9131  002880  0E00               	movlw	0
  9132  002882  21E1               	addwfc	(_minutes+1)& (0+255),w,b
  9133  002884  6FE1               	movwf	(_minutes+1)& (0+255),b
  9134                           
  9135                           ; BSR set to: 1
  9136                           ;HW2.c: 299: hours =0 ;
  9137  002886  0E00               	movlw	0
  9138  002888  6FE5               	movwf	(_hours+1)& (0+255),b
  9139  00288A  0E00               	movlw	0
  9140  00288C  6FE4               	movwf	_hours& (0+255),b
  9141                           
  9142                           ; BSR set to: 1
  9143                           ;HW2.c: 300: if (hours<=0){hours =0 ;
  9144  00288E  51E4               	movf	_hours& (0+255),w,b
  9145  002890  11E5               	iorwf	(_hours+1)& (0+255),w,b
  9146  002892  A4D8               	btfss	status,2,c
  9147  002894  0012               	return	
  9148                           
  9149                           ; BSR set to: 1
  9150  002896  0E00               	movlw	0
  9151  002898  6FE5               	movwf	(_hours+1)& (0+255),b
  9152  00289A  0E00               	movlw	0
  9153  00289C  6FE4               	movwf	_hours& (0+255),b
  9154  00289E                     l324:
  9155                           
  9156                           ; BSR set to: 1
  9157  00289E  0012               	return		;funcret
  9158  0028A0                     __end_of_decrement10MinClock:
  9159                           	callstack 0
  9160                           
  9161 ;; *************** function ___lwtoft *****************
  9162 ;; Defined at:
  9163 ;;		line 28 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lwtoft.c"
  9164 ;; Parameters:    Size  Location     Type
  9165 ;;  c               2   43[COMRAM] unsigned int 
  9166 ;; Auto vars:     Size  Location     Type
  9167 ;;		None
  9168 ;; Return value:  Size  Location     Type
  9169 ;;                  3   43[COMRAM] float 
  9170 ;; Registers used:
  9171 ;;		wreg, status,2, status,0, cstack
  9172 ;; Tracked objects:
  9173 ;;		On entry : 0/0
  9174 ;;		On exit  : 0/0
  9175 ;;		Unchanged: 0/0
  9176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9177 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9180 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9181 ;;Total ram usage:        3 bytes
  9182 ;; Hardware stack levels used:    1
  9183 ;; Hardware stack levels required when called:    5
  9184 ;; This function calls:
  9185 ;;		___ftpack
  9186 ;; This function is called by:
  9187 ;;		_main
  9188 ;; This function uses a non-reentrant model
  9189 ;;
  9190                           
  9191                           	psect	text47
  9192  002AAC                     __ptext47:
  9193                           	callstack 0
  9194  002AAC                     ___lwtoft:
  9195                           	callstack 25
  9196                           
  9197                           ; BSR set to: 1
  9198                           ;incstack = 0
  9199  002AAC  C02C  F024         	movff	___lwtoft@c,___ftpack@arg
  9200  002AB0  C02D  F025         	movff	___lwtoft@c+1,___ftpack@arg+1
  9201  002AB4  6A26               	clrf	(___ftpack@arg+2)^0,c
  9202  002AB6  0E8E               	movlw	142
  9203  002AB8  6E27               	movwf	___ftpack@exp^0,c
  9204  002ABA  0E00               	movlw	0
  9205  002ABC  6E28               	movwf	___ftpack@sign^0,c
  9206  002ABE  EC4D  F00F         	call	___ftpack	;wreg free
  9207  002AC2  C024  F02C         	movff	?___ftpack,?___lwtoft
  9208  002AC6  C025  F02D         	movff	?___ftpack+1,?___lwtoft+1
  9209  002ACA  C026  F02E         	movff	?___ftpack+2,?___lwtoft+2
  9210  002ACE  0012               	return		;funcret
  9211  002AD0                     __end_of___lwtoft:
  9212                           	callstack 0
  9213                           
  9214 ;; *************** function ___ftpack *****************
  9215 ;; Defined at:
  9216 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\float.c"
  9217 ;; Parameters:    Size  Location     Type
  9218 ;;  arg             3   35[COMRAM] unsigned um
  9219 ;;  exp             1   38[COMRAM] unsigned char 
  9220 ;;  sign            1   39[COMRAM] unsigned char 
  9221 ;; Auto vars:     Size  Location     Type
  9222 ;;		None
  9223 ;; Return value:  Size  Location     Type
  9224 ;;                  3   35[COMRAM] float 
  9225 ;; Registers used:
  9226 ;;		wreg, status,2, status,0
  9227 ;; Tracked objects:
  9228 ;;		On entry : 0/0
  9229 ;;		On exit  : 0/0
  9230 ;;		Unchanged: 0/0
  9231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9232 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9234 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9235 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9236 ;;Total ram usage:        8 bytes
  9237 ;; Hardware stack levels used:    1
  9238 ;; Hardware stack levels required when called:    4
  9239 ;; This function calls:
  9240 ;;		Nothing
  9241 ;; This function is called by:
  9242 ;;		___awtoft
  9243 ;;		___ftadd
  9244 ;;		___ftdiv
  9245 ;;		___ftmul
  9246 ;;		___lltoft
  9247 ;;		___lwtoft
  9248 ;; This function uses a non-reentrant model
  9249 ;;
  9250                           
  9251                           	psect	text48
  9252  001E9A                     __ptext48:
  9253                           	callstack 0
  9254  001E9A                     ___ftpack:
  9255                           	callstack 24
  9256                           
  9257                           ;incstack = 0
  9258  001E9A  5027               	movf	___ftpack@exp^0,w,c
  9259  001E9C  B4D8               	btfsc	status,2,c
  9260  001E9E  D005               	goto	u5460
  9261  001EA0  5024               	movf	___ftpack@arg^0,w,c
  9262  001EA2  1025               	iorwf	(___ftpack@arg+1)^0,w,c
  9263  001EA4  1026               	iorwf	(___ftpack@arg+2)^0,w,c
  9264  001EA6  A4D8               	btfss	status,2,c
  9265  001EA8  D00C               	goto	l4825
  9266  001EAA                     u5460:
  9267  001EAA  0E00               	movlw	0
  9268  001EAC  6E24               	movwf	?___ftpack^0,c
  9269  001EAE  0E00               	movlw	0
  9270  001EB0  6E25               	movwf	(?___ftpack+1)^0,c
  9271  001EB2  0E00               	movlw	0
  9272  001EB4  6E26               	movwf	(?___ftpack+2)^0,c
  9273  001EB6  0012               	return	
  9274  001EB8                     l4823:
  9275  001EB8  2A27               	incf	___ftpack@exp^0,f,c
  9276  001EBA  90D8               	bcf	status,0,c
  9277  001EBC  3226               	rrcf	(___ftpack@arg+2)^0,f,c
  9278  001EBE  3225               	rrcf	(___ftpack@arg+1)^0,f,c
  9279  001EC0  3224               	rrcf	___ftpack@arg^0,f,c
  9280  001EC2                     l4825:
  9281  001EC2  0E00               	movlw	0
  9282  001EC4  1424               	andwf	___ftpack@arg^0,w,c
  9283  001EC6  6E29               	movwf	??___ftpack^0,c
  9284  001EC8  0E00               	movlw	0
  9285  001ECA  1425               	andwf	(___ftpack@arg+1)^0,w,c
  9286  001ECC  6E2A               	movwf	(??___ftpack+1)^0,c
  9287  001ECE  0EFE               	movlw	254
  9288  001ED0  1426               	andwf	(___ftpack@arg+2)^0,w,c
  9289  001ED2  6E2B               	movwf	(??___ftpack+2)^0,c
  9290  001ED4  5029               	movf	??___ftpack^0,w,c
  9291  001ED6  102A               	iorwf	(??___ftpack+1)^0,w,c
  9292  001ED8  102B               	iorwf	(??___ftpack+2)^0,w,c
  9293  001EDA  B4D8               	btfsc	status,2,c
  9294  001EDC  D00C               	goto	l4831
  9295  001EDE  D7EC               	goto	l4823
  9296  001EE0                     l4827:
  9297  001EE0  2A27               	incf	___ftpack@exp^0,f,c
  9298  001EE2  0E01               	movlw	1
  9299  001EE4  2624               	addwf	___ftpack@arg^0,f,c
  9300  001EE6  0E00               	movlw	0
  9301  001EE8  2225               	addwfc	(___ftpack@arg+1)^0,f,c
  9302  001EEA  0E00               	movlw	0
  9303  001EEC  2226               	addwfc	(___ftpack@arg+2)^0,f,c
  9304  001EEE  90D8               	bcf	status,0,c
  9305  001EF0  3226               	rrcf	(___ftpack@arg+2)^0,f,c
  9306  001EF2  3225               	rrcf	(___ftpack@arg+1)^0,f,c
  9307  001EF4  3224               	rrcf	___ftpack@arg^0,f,c
  9308  001EF6                     l4831:
  9309  001EF6  0E00               	movlw	0
  9310  001EF8  1424               	andwf	___ftpack@arg^0,w,c
  9311  001EFA  6E29               	movwf	??___ftpack^0,c
  9312  001EFC  0E00               	movlw	0
  9313  001EFE  1425               	andwf	(___ftpack@arg+1)^0,w,c
  9314  001F00  6E2A               	movwf	(??___ftpack+1)^0,c
  9315  001F02  0EFF               	movlw	255
  9316  001F04  1426               	andwf	(___ftpack@arg+2)^0,w,c
  9317  001F06  6E2B               	movwf	(??___ftpack+2)^0,c
  9318  001F08  5029               	movf	??___ftpack^0,w,c
  9319  001F0A  102A               	iorwf	(??___ftpack+1)^0,w,c
  9320  001F0C  102B               	iorwf	(??___ftpack+2)^0,w,c
  9321  001F0E  B4D8               	btfsc	status,2,c
  9322  001F10  D006               	goto	l4835
  9323  001F12  D7E6               	goto	l4827
  9324  001F14                     l4833:
  9325  001F14  0627               	decf	___ftpack@exp^0,f,c
  9326  001F16  90D8               	bcf	status,0,c
  9327  001F18  3624               	rlcf	___ftpack@arg^0,f,c
  9328  001F1A  3625               	rlcf	(___ftpack@arg+1)^0,f,c
  9329  001F1C  3626               	rlcf	(___ftpack@arg+2)^0,f,c
  9330  001F1E                     l4835:
  9331  001F1E  BE25               	btfsc	(___ftpack@arg+1)^0,7,c
  9332  001F20  D003               	goto	u5500
  9333  001F22  0E02               	movlw	2
  9334  001F24  6027               	cpfslt	___ftpack@exp^0,c
  9335  001F26  D7F6               	goto	l4833
  9336  001F28                     u5500:
  9337  001F28  A027               	btfss	___ftpack@exp^0,0,c
  9338  001F2A  9E25               	bcf	(___ftpack@arg+1)^0,7,c
  9339  001F2C  90D8               	bcf	status,0,c
  9340  001F2E  3227               	rrcf	___ftpack@exp^0,f,c
  9341  001F30  5027               	movf	___ftpack@exp^0,w,c
  9342  001F32  1226               	iorwf	(___ftpack@arg+2)^0,f,c
  9343  001F34  5028               	movf	___ftpack@sign^0,w,c
  9344  001F36  A4D8               	btfss	status,2,c
  9345  001F38  8E26               	bsf	(___ftpack@arg+2)^0,7,c
  9346  001F3A  C024  F024         	movff	___ftpack@arg,?___ftpack
  9347  001F3E  C025  F025         	movff	___ftpack@arg+1,?___ftpack+1
  9348  001F42  C026  F026         	movff	___ftpack@arg+2,?___ftpack+2
  9349  001F46  0012               	return		;funcret
  9350  001F48                     __end_of___ftpack:
  9351                           	callstack 0
  9352                           
  9353 ;; *************** function _highIsr *****************
  9354 ;; Defined at:
  9355 ;;		line 137 in file "HW2.c"
  9356 ;; Parameters:    Size  Location     Type
  9357 ;;		None
  9358 ;; Auto vars:     Size  Location     Type
  9359 ;;		None
  9360 ;; Return value:  Size  Location     Type
  9361 ;;                  1    wreg      void 
  9362 ;; Registers used:
  9363 ;;		wreg, status,2, status,0, cstack
  9364 ;; Tracked objects:
  9365 ;;		On entry : 0/0
  9366 ;;		On exit  : 0/0
  9367 ;;		Unchanged: 0/0
  9368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9373 ;;Total ram usage:        0 bytes
  9374 ;; Hardware stack levels used:    1
  9375 ;; Hardware stack levels required when called:    3
  9376 ;; This function calls:
  9377 ;;		_EXT_Int0_isr
  9378 ;;		_EXT_Int1_isr
  9379 ;;		_clockNormalMode
  9380 ;;		i2___ftadd
  9381 ;;		i2___ftge
  9382 ;;		i2___ftsub
  9383 ;;		i2_reloadTimer0
  9384 ;; This function is called by:
  9385 ;;		Interrupt level 2
  9386 ;; This function uses a non-reentrant model
  9387 ;;
  9388                           
  9389                           	psect	intcode
  9390  000008                     __pintcode:
  9391                           	callstack 0
  9392  000008                     _highIsr:
  9393                           	callstack 20
  9394                           
  9395                           ;incstack = 0
  9396  000008  825C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9397  00000A  EDEE  F00E         	call	int_func,f	;refresh shadow registers
  9398                           
  9399                           	psect	intcode_body
  9400  001DDC                     __pintcode_body:
  9401                           	callstack 20
  9402  001DDC                     int_func:
  9403                           	callstack 20
  9404  001DDC  0006               	pop		; remove dummy address from shadow register refresh
  9405                           
  9406                           ;HW2.c: 140: if(INTCONbits.TMR0IF) {
  9407  001DDE  A4F2               	btfss	242,2,c	;volatile
  9408  001DE0  D052               	goto	i2l255
  9409                           
  9410                           ;HW2.c: 142: if (initial == 1 || (initial == 0 && clkMode == 0) ){
  9411  001DE2  0447               	decf	_initial^0,w,c
  9412  001DE4  1048               	iorwf	(_initial+1)^0,w,c
  9413  001DE6  B4D8               	btfsc	status,2,c
  9414  001DE8  D008               	goto	i2u515_40
  9415  001DEA  5047               	movf	_initial^0,w,c
  9416  001DEC  1048               	iorwf	(_initial+1)^0,w,c
  9417  001DEE  A4D8               	btfss	status,2,c
  9418  001DF0  D048               	goto	i2l256
  9419  001DF2  505A               	movf	_clkMode^0,w,c
  9420  001DF4  105B               	iorwf	(_clkMode+1)^0,w,c
  9421  001DF6  A4D8               	btfss	status,2,c
  9422  001DF8  D044               	goto	i2l256
  9423  001DFA                     i2u515_40:
  9424                           
  9425                           ;HW2.c: 143: clockNormalMode();
  9426  001DFA  ECFB  F00F         	call	_clockNormalMode	;wreg free
  9427                           
  9428                           ;HW2.c: 144: INTCONbits.TMR0IF = 0;
  9429  001DFE  94F2               	bcf	242,2,c	;volatile
  9430                           
  9431                           ;HW2.c: 145: if(temp <= sp- HS) {
  9432  001E00  C055  F018         	movff	_HS,i2___ftsub@f2
  9433  001E04  C056  F019         	movff	_HS+1,i2___ftsub@f2+1
  9434  001E08  C057  F01A         	movff	_HS+2,i2___ftsub@f2+2
  9435  001E0C  C041  F015         	movff	_sp,i2___ftsub@f1
  9436  001E10  C042  F016         	movff	_sp+1,i2___ftsub@f1+1
  9437  001E14  C043  F017         	movff	_sp+2,i2___ftsub@f1+2
  9438  001E18  EC12  F014         	call	i2___ftsub	;wreg free
  9439  001E1C  C015  F01B         	movff	?i2___ftsub,i2___ftge@ff1
  9440  001E20  C016  F01C         	movff	?i2___ftsub+1,i2___ftge@ff1+1
  9441  001E24  C017  F01D         	movff	?i2___ftsub+2,i2___ftge@ff1+2
  9442  001E28  C044  F01E         	movff	_temp,i2___ftge@ff2
  9443  001E2C  C045  F01F         	movff	_temp+1,i2___ftge@ff2+1
  9444  001E30  C046  F020         	movff	_temp+2,i2___ftge@ff2+2
  9445  001E34  ECFE  F010         	call	i2___ftge	;wreg free
  9446  001E38  A0D8               	btfss	status,0,c
  9447  001E3A  D002               	goto	i2l4641
  9448                           
  9449                           ;HW2.c: 146: PORTCbits.RC5 = 1;
  9450  001E3C  8A82               	bsf	130,5,c	;volatile
  9451                           
  9452                           ;HW2.c: 147: }
  9453  001E3E  D01E               	goto	i2l4645
  9454  001E40                     i2l4641:
  9455                           
  9456                           ;HW2.c: 148: else if(temp >= (sp + HS)) {
  9457  001E40  C044  F01B         	movff	_temp,i2___ftge@ff1
  9458  001E44  C045  F01C         	movff	_temp+1,i2___ftge@ff1+1
  9459  001E48  C046  F01D         	movff	_temp+2,i2___ftge@ff1+2
  9460  001E4C  C055  F00C         	movff	_HS,i2___ftadd@f2
  9461  001E50  C056  F00D         	movff	_HS+1,i2___ftadd@f2+1
  9462  001E54  C057  F00E         	movff	_HS+2,i2___ftadd@f2+2
  9463  001E58  C041  F009         	movff	_sp,i2___ftadd@f1
  9464  001E5C  C042  F00A         	movff	_sp+1,i2___ftadd@f1+1
  9465  001E60  C043  F00B         	movff	_sp+2,i2___ftadd@f1+2
  9466  001E64  ECC9  F00B         	call	i2___ftadd	;wreg free
  9467  001E68  C009  F01E         	movff	?i2___ftadd,i2___ftge@ff2
  9468  001E6C  C00A  F01F         	movff	?i2___ftadd+1,i2___ftge@ff2+1
  9469  001E70  C00B  F020         	movff	?i2___ftadd+2,i2___ftge@ff2+2
  9470  001E74  ECFE  F010         	call	i2___ftge	;wreg free
  9471  001E78  B0D8               	btfsc	status,0,c
  9472                           
  9473                           ;HW2.c: 149: PORTCbits.RC5 = 0;
  9474  001E7A  9A82               	bcf	130,5,c	;volatile
  9475  001E7C                     i2l4645:
  9476                           
  9477                           ;HW2.c: 150: };HW2.c: 154: reloadTimer0();
  9478  001E7C  ECB5  F015         	call	i2_reloadTimer0	;wreg free
  9479                           
  9480                           ;HW2.c: 155: }
  9481  001E80  D00A               	goto	i2l267
  9482  001E82                     i2l256:
  9483                           
  9484                           ;HW2.c: 157: else INTCONbits.TMR0IF = 0;
  9485  001E82  94F2               	bcf	242,2,c	;volatile
  9486  001E84  D008               	goto	i2l267
  9487  001E86                     i2l255:
  9488                           
  9489                           ;HW2.c: 159: else if(INTCON3bits.INT1IF)EXT_Int0_isr();
  9490  001E86  A0F0               	btfss	240,0,c	;volatile
  9491  001E88  D003               	goto	i2l264
  9492  001E8A  EC88  F015         	call	_EXT_Int0_isr	;wreg free
  9493  001E8E  D003               	goto	i2l267
  9494  001E90                     i2l264:
  9495                           
  9496                           ;HW2.c: 160: else if (INTCONbits.INT0IF)EXT_Int1_isr();
  9497  001E90  B2F2               	btfsc	242,1,c	;volatile
  9498  001E92  EC40  F013         	call	_EXT_Int1_isr	;wreg free
  9499  001E96                     i2l267:
  9500  001E96  925C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9501  001E98  0011               	retfie		f
  9502  001E9A                     __end_of_highIsr:
  9503                           	callstack 0
  9504                           
  9505 ;; *************** function i2___ftsub *****************
  9506 ;; Defined at:
  9507 ;;		line 19 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftsub.c"
  9508 ;; Parameters:    Size  Location     Type
  9509 ;;  f1              3   20[COMRAM] float 
  9510 ;;  f2              3   23[COMRAM] float 
  9511 ;; Auto vars:     Size  Location     Type
  9512 ;;		None
  9513 ;; Return value:  Size  Location     Type
  9514 ;;                  3   20[COMRAM] float 
  9515 ;; Registers used:
  9516 ;;		wreg, status,2, status,0, cstack
  9517 ;; Tracked objects:
  9518 ;;		On entry : 0/0
  9519 ;;		On exit  : 0/0
  9520 ;;		Unchanged: 0/0
  9521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9522 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9525 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9526 ;;Total ram usage:        6 bytes
  9527 ;; Hardware stack levels used:    1
  9528 ;; Hardware stack levels required when called:    2
  9529 ;; This function calls:
  9530 ;;		i2___ftadd
  9531 ;; This function is called by:
  9532 ;;		_highIsr
  9533 ;; This function uses a non-reentrant model
  9534 ;;
  9535                           
  9536                           	psect	text50
  9537  002824                     __ptext50:
  9538                           	callstack 0
  9539  002824                     i2___ftsub:
  9540                           	callstack 20
  9541                           
  9542                           ;incstack = 0
  9543  002824  5018               	movf	i2___ftsub@f2^0,w,c
  9544  002826  1019               	iorwf	(i2___ftsub@f2+1)^0,w,c
  9545  002828  101A               	iorwf	(i2___ftsub@f2+2)^0,w,c
  9546  00282A  B4D8               	btfsc	status,2,c
  9547  00282C  D006               	goto	i2l4623
  9548  00282E  0E00               	movlw	0
  9549  002830  1A18               	xorwf	i2___ftsub@f2^0,f,c
  9550  002832  0E00               	movlw	0
  9551  002834  1A19               	xorwf	(i2___ftsub@f2+1)^0,f,c
  9552  002836  0E80               	movlw	128
  9553  002838  1A1A               	xorwf	(i2___ftsub@f2+2)^0,f,c
  9554  00283A                     i2l4623:
  9555  00283A  C015  F009         	movff	i2___ftsub@f1,i2___ftadd@f1
  9556  00283E  C016  F00A         	movff	i2___ftsub@f1+1,i2___ftadd@f1+1
  9557  002842  C017  F00B         	movff	i2___ftsub@f1+2,i2___ftadd@f1+2
  9558  002846  C018  F00C         	movff	i2___ftsub@f2,i2___ftadd@f2
  9559  00284A  C019  F00D         	movff	i2___ftsub@f2+1,i2___ftadd@f2+1
  9560  00284E  C01A  F00E         	movff	i2___ftsub@f2+2,i2___ftadd@f2+2
  9561  002852  ECC9  F00B         	call	i2___ftadd	;wreg free
  9562  002856  C009  F015         	movff	?i2___ftadd,?i2___ftsub
  9563  00285A  C00A  F016         	movff	?i2___ftadd+1,?i2___ftsub+1
  9564  00285E  C00B  F017         	movff	?i2___ftadd+2,?i2___ftsub+2
  9565  002862  0012               	return		;funcret
  9566  002864                     __end_ofi2___ftsub:
  9567                           	callstack 0
  9568                           
  9569 ;; *************** function i2___ftge *****************
  9570 ;; Defined at:
  9571 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftge.c"
  9572 ;; Parameters:    Size  Location     Type
  9573 ;;  ff1             3   26[COMRAM] float 
  9574 ;;  ff2             3   29[COMRAM] float 
  9575 ;; Auto vars:     Size  Location     Type
  9576 ;;		None
  9577 ;; Return value:  Size  Location     Type
  9578 ;;		None               void
  9579 ;; Registers used:
  9580 ;;		wreg, status,2, status,0
  9581 ;; Tracked objects:
  9582 ;;		On entry : 0/0
  9583 ;;		On exit  : 0/0
  9584 ;;		Unchanged: 0/0
  9585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9586 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9588 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9589 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9590 ;;Total ram usage:        9 bytes
  9591 ;; Hardware stack levels used:    1
  9592 ;; This function calls:
  9593 ;;		Nothing
  9594 ;; This function is called by:
  9595 ;;		_highIsr
  9596 ;; This function uses a non-reentrant model
  9597 ;;
  9598                           
  9599                           	psect	text51
  9600  0021FC                     __ptext51:
  9601                           	callstack 0
  9602  0021FC                     i2___ftge:
  9603                           	callstack 22
  9604                           
  9605                           ;incstack = 0
  9606  0021FC  AE1D               	btfss	(i2___ftge@ff1+2)^0,7,c
  9607  0021FE  D00F               	goto	i2l4605
  9608  002200  0E00               	movlw	0
  9609  002202  6E21               	movwf	??i2___ftge^0,c
  9610  002204  0E00               	movlw	0
  9611  002206  6E22               	movwf	(??i2___ftge+1)^0,c
  9612  002208  0E80               	movlw	128
  9613  00220A  6E23               	movwf	(??i2___ftge+2)^0,c
  9614  00220C  501B               	movf	i2___ftge@ff1^0,w,c
  9615  00220E  5C21               	subwf	??i2___ftge^0,w,c
  9616  002210  6E1B               	movwf	i2___ftge@ff1^0,c
  9617  002212  501C               	movf	(i2___ftge@ff1+1)^0,w,c
  9618  002214  5822               	subwfb	(??i2___ftge+1)^0,w,c
  9619  002216  6E1C               	movwf	(i2___ftge@ff1+1)^0,c
  9620  002218  501D               	movf	(i2___ftge@ff1+2)^0,w,c
  9621  00221A  5823               	subwfb	(??i2___ftge+2)^0,w,c
  9622  00221C  6E1D               	movwf	(i2___ftge@ff1+2)^0,c
  9623  00221E                     i2l4605:
  9624  00221E  AE20               	btfss	(i2___ftge@ff2+2)^0,7,c
  9625  002220  D00F               	goto	i2l4609
  9626  002222  0E00               	movlw	0
  9627  002224  6E21               	movwf	??i2___ftge^0,c
  9628  002226  0E00               	movlw	0
  9629  002228  6E22               	movwf	(??i2___ftge+1)^0,c
  9630  00222A  0E80               	movlw	128
  9631  00222C  6E23               	movwf	(??i2___ftge+2)^0,c
  9632  00222E  501E               	movf	i2___ftge@ff2^0,w,c
  9633  002230  5C21               	subwf	??i2___ftge^0,w,c
  9634  002232  6E1E               	movwf	i2___ftge@ff2^0,c
  9635  002234  501F               	movf	(i2___ftge@ff2+1)^0,w,c
  9636  002236  5822               	subwfb	(??i2___ftge+1)^0,w,c
  9637  002238  6E1F               	movwf	(i2___ftge@ff2+1)^0,c
  9638  00223A  5020               	movf	(i2___ftge@ff2+2)^0,w,c
  9639  00223C  5823               	subwfb	(??i2___ftge+2)^0,w,c
  9640  00223E  6E20               	movwf	(i2___ftge@ff2+2)^0,c
  9641  002240                     i2l4609:
  9642  002240  0E00               	movlw	0
  9643  002242  1A1B               	xorwf	i2___ftge@ff1^0,f,c
  9644  002244  0E00               	movlw	0
  9645  002246  1A1C               	xorwf	(i2___ftge@ff1+1)^0,f,c
  9646  002248  0E80               	movlw	128
  9647  00224A  1A1D               	xorwf	(i2___ftge@ff1+2)^0,f,c
  9648  00224C  0E00               	movlw	0
  9649  00224E  1A1E               	xorwf	i2___ftge@ff2^0,f,c
  9650  002250  0E00               	movlw	0
  9651  002252  1A1F               	xorwf	(i2___ftge@ff2+1)^0,f,c
  9652  002254  0E80               	movlw	128
  9653  002256  1A20               	xorwf	(i2___ftge@ff2+2)^0,f,c
  9654  002258  501E               	movf	i2___ftge@ff2^0,w,c
  9655  00225A  5C1B               	subwf	i2___ftge@ff1^0,w,c
  9656  00225C  501F               	movf	(i2___ftge@ff2+1)^0,w,c
  9657  00225E  581C               	subwfb	(i2___ftge@ff1+1)^0,w,c
  9658  002260  5020               	movf	(i2___ftge@ff2+2)^0,w,c
  9659  002262  581D               	subwfb	(i2___ftge@ff1+2)^0,w,c
  9660  002264  B0D8               	btfsc	status,0,c
  9661  002266  D002               	goto	i2l4615
  9662  002268  90D8               	bcf	status,0,c
  9663  00226A  0012               	return	
  9664  00226C                     i2l4615:
  9665  00226C  80D8               	bsf	status,0,c
  9666  00226E  0012               	return		;funcret
  9667  002270                     __end_ofi2___ftge:
  9668                           	callstack 0
  9669                           
  9670 ;; *************** function _clockNormalMode *****************
  9671 ;; Defined at:
  9672 ;;		line 172 in file "HW2.c"
  9673 ;; Parameters:    Size  Location     Type
  9674 ;;		None
  9675 ;; Auto vars:     Size  Location     Type
  9676 ;;		None
  9677 ;; Return value:  Size  Location     Type
  9678 ;;                  1    wreg      void 
  9679 ;; Registers used:
  9680 ;;		wreg, status,2, status,0, cstack
  9681 ;; Tracked objects:
  9682 ;;		On entry : 0/0
  9683 ;;		On exit  : 0/0
  9684 ;;		Unchanged: 0/0
  9685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9689 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9690 ;;Total ram usage:        0 bytes
  9691 ;; Hardware stack levels used:    1
  9692 ;; Hardware stack levels required when called:    1
  9693 ;; This function calls:
  9694 ;;		i2_reloadTimer0
  9695 ;; This function is called by:
  9696 ;;		_highIsr
  9697 ;; This function uses a non-reentrant model
  9698 ;;
  9699                           
  9700                           	psect	text52
  9701  001FF6                     __ptext52:
  9702                           	callstack 0
  9703  001FF6                     _clockNormalMode:
  9704                           	callstack 21
  9705                           
  9706                           ;HW2.c: 173: INTCONbits.TMR0IF = 0;
  9707                           
  9708                           ;incstack = 0
  9709  001FF6  94F2               	bcf	242,2,c	;volatile
  9710                           
  9711                           ;HW2.c: 174: if(--seconds <= 0) {
  9712  001FF8  0101               	movlb	1	; () banked
  9713  001FFA  07E6               	decf	_seconds& (0+255),f,b
  9714  001FFC  A0D8               	btfss	status,0,c
  9715  001FFE  07E7               	decf	(_seconds+1)& (0+255),f,b
  9716  002000  BFE7               	btfsc	(_seconds+1)& (0+255),7,b
  9717  002002  D005               	goto	i2u478_40
  9718  002004  51E7               	movf	(_seconds+1)& (0+255),w,b
  9719  002006  E139               	bnz	i2l4395
  9720  002008  05E6               	decf	_seconds& (0+255),w,b
  9721  00200A  B0D8               	btfsc	status,0,c
  9722  00200C  D036               	goto	i2l277
  9723  00200E                     i2u478_40:
  9724                           
  9725                           ; BSR set to: 1
  9726                           ;HW2.c: 175: seconds=59;
  9727  00200E  0E00               	movlw	0
  9728  002010  6FE7               	movwf	(_seconds+1)& (0+255),b
  9729  002012  0E3B               	movlw	59
  9730  002014  6FE6               	movwf	_seconds& (0+255),b
  9731                           
  9732                           ; BSR set to: 1
  9733                           ;HW2.c: 176: if(--minutes == -1) {
  9734  002016  07E0               	decf	_minutes& (0+255),f,b
  9735  002018  A0D8               	btfss	status,0,c
  9736  00201A  07E1               	decf	(_minutes+1)& (0+255),f,b
  9737  00201C  29E0               	incf	_minutes& (0+255),w,b
  9738  00201E  E12D               	bnz	i2l4395
  9739  002020  29E1               	incf	(_minutes+1)& (0+255),w,b
  9740  002022  A4D8               	btfss	status,2,c
  9741  002024  D02A               	goto	i2l277
  9742                           
  9743                           ; BSR set to: 1
  9744                           ;HW2.c: 177: minutes = 59;
  9745  002026  0E00               	movlw	0
  9746  002028  6FE1               	movwf	(_minutes+1)& (0+255),b
  9747  00202A  0E3B               	movlw	59
  9748  00202C  6FE0               	movwf	_minutes& (0+255),b
  9749                           
  9750                           ; BSR set to: 1
  9751                           ;HW2.c: 178: if (--hours == -1){ hours = 0;
  9752  00202E  07E4               	decf	_hours& (0+255),f,b
  9753  002030  A0D8               	btfss	status,0,c
  9754  002032  07E5               	decf	(_hours+1)& (0+255),f,b
  9755  002034  29E4               	incf	_hours& (0+255),w,b
  9756  002036  E121               	bnz	i2l4395
  9757  002038  29E5               	incf	(_hours+1)& (0+255),w,b
  9758  00203A  A4D8               	btfss	status,2,c
  9759  00203C  D01E               	goto	i2l277
  9760                           
  9761                           ; BSR set to: 1
  9762  00203E  0E00               	movlw	0
  9763  002040  6FE5               	movwf	(_hours+1)& (0+255),b
  9764  002042  0E00               	movlw	0
  9765  002044  6FE4               	movwf	_hours& (0+255),b
  9766                           
  9767                           ; BSR set to: 1
  9768                           ;HW2.c: 179: if (seconds==59 && minutes==59 &&hours==0){
  9769  002046  0E3B               	movlw	59
  9770  002048  19E6               	xorwf	_seconds& (0+255),w,b
  9771  00204A  11E7               	iorwf	(_seconds+1)& (0+255),w,b
  9772  00204C  A4D8               	btfss	status,2,c
  9773  00204E  D015               	goto	i2l277
  9774                           
  9775                           ; BSR set to: 1
  9776  002050  0E3B               	movlw	59
  9777  002052  19E0               	xorwf	_minutes& (0+255),w,b
  9778  002054  11E1               	iorwf	(_minutes+1)& (0+255),w,b
  9779  002056  A4D8               	btfss	status,2,c
  9780  002058  D010               	goto	i2l277
  9781                           
  9782                           ; BSR set to: 1
  9783  00205A  51E4               	movf	_hours& (0+255),w,b
  9784  00205C  11E5               	iorwf	(_hours+1)& (0+255),w,b
  9785  00205E  A4D8               	btfss	status,2,c
  9786  002060  D00C               	goto	i2l277
  9787                           
  9788                           ; BSR set to: 1
  9789                           ;HW2.c: 180: hours=0;
  9790  002062  0E00               	movlw	0
  9791  002064  6FE5               	movwf	(_hours+1)& (0+255),b
  9792  002066  0E00               	movlw	0
  9793  002068  6FE4               	movwf	_hours& (0+255),b
  9794                           
  9795                           ;HW2.c: 181: seconds=0;
  9796  00206A  0E00               	movlw	0
  9797  00206C  6FE7               	movwf	(_seconds+1)& (0+255),b
  9798  00206E  0E00               	movlw	0
  9799  002070  6FE6               	movwf	_seconds& (0+255),b
  9800                           
  9801                           ;HW2.c: 182: minutes=0;
  9802  002072  0E00               	movlw	0
  9803  002074  6FE1               	movwf	(_minutes+1)& (0+255),b
  9804  002076  0E00               	movlw	0
  9805  002078  6FE0               	movwf	_minutes& (0+255),b
  9806  00207A                     i2l277:
  9807  00207A                     i2l4395:
  9808                           
  9809                           ; BSR set to: 1
  9810                           ;HW2.c: 184: }};HW2.c: 185: };HW2.c: 187: };HW2.c: 188: reloadTimer0();
  9811  00207A  ECB5  F015         	call	i2_reloadTimer0	;wreg free
  9812  00207E  0012               	return		;funcret
  9813  002080                     __end_of_clockNormalMode:
  9814                           	callstack 0
  9815                           
  9816 ;; *************** function i2_reloadTimer0 *****************
  9817 ;; Defined at:
  9818 ;;		line 91 in file "HW2.c"
  9819 ;; Parameters:    Size  Location     Type
  9820 ;;		None
  9821 ;; Auto vars:     Size  Location     Type
  9822 ;;		None
  9823 ;; Return value:  Size  Location     Type
  9824 ;;                  1    wreg      void 
  9825 ;; Registers used:
  9826 ;;		wreg, status,2
  9827 ;; Tracked objects:
  9828 ;;		On entry : 0/0
  9829 ;;		On exit  : 0/0
  9830 ;;		Unchanged: 0/0
  9831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9836 ;;Total ram usage:        0 bytes
  9837 ;; Hardware stack levels used:    1
  9838 ;; This function calls:
  9839 ;;		Nothing
  9840 ;; This function is called by:
  9841 ;;		_highIsr
  9842 ;;		_clockNormalMode
  9843 ;; This function uses a non-reentrant model
  9844 ;;
  9845                           
  9846                           	psect	text53
  9847  002B6A                     __ptext53:
  9848                           	callstack 0
  9849  002B6A                     i2_reloadTimer0:
  9850                           	callstack 22
  9851                           
  9852                           ;HW2.c: 93: TMR3H = (unsigned char) ((3036 >> 8) & 0x00FF);
  9853                           
  9854                           ;incstack = 0
  9855  002B6A  0E0B               	movlw	11
  9856  002B6C  6EB3               	movwf	179,c	;volatile
  9857                           
  9858                           ;HW2.c: 94: TMR3L = (unsigned char)(3036 & 0x00FF );
  9859  002B6E  0EDC               	movlw	220
  9860  002B70  6EB2               	movwf	178,c	;volatile
  9861  002B72  0012               	return		;funcret
  9862  002B74                     __end_ofi2_reloadTimer0:
  9863                           	callstack 0
  9864                           
  9865 ;; *************** function _EXT_Int1_isr *****************
  9866 ;; Defined at:
  9867 ;;		line 121 in file "HW2.c"
  9868 ;; Parameters:    Size  Location     Type
  9869 ;;		None
  9870 ;; Auto vars:     Size  Location     Type
  9871 ;;		None
  9872 ;; Return value:  Size  Location     Type
  9873 ;;                  1    wreg      void 
  9874 ;; Registers used:
  9875 ;;		wreg, status,2, status,0, cstack
  9876 ;; Tracked objects:
  9877 ;;		On entry : 0/0
  9878 ;;		On exit  : 0/0
  9879 ;;		Unchanged: 0/0
  9880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9885 ;;Total ram usage:        0 bytes
  9886 ;; Hardware stack levels used:    1
  9887 ;; Hardware stack levels required when called:    2
  9888 ;; This function calls:
  9889 ;;		i2___ftadd
  9890 ;; This function is called by:
  9891 ;;		_highIsr
  9892 ;; This function uses a non-reentrant model
  9893 ;;
  9894                           
  9895                           	psect	text54
  9896  002680                     __ptext54:
  9897                           	callstack 0
  9898  002680                     _EXT_Int1_isr:
  9899                           	callstack 20
  9900                           
  9901                           ;HW2.c: 123: INTCONbits.INT0IF=0;
  9902                           
  9903                           ;incstack = 0
  9904  002680  92F2               	bcf	242,1,c	;volatile
  9905                           
  9906                           ;HW2.c: 124: if(HS==5)
  9907  002682  0EA0               	movlw	160
  9908  002684  1856               	xorwf	(_HS+1)^0,w,c
  9909  002686  E10C               	bnz	i2l4371
  9910  002688  0E40               	movlw	64
  9911  00268A  1857               	xorwf	(_HS+2)^0,w,c
  9912  00268C  1055               	iorwf	_HS^0,w,c
  9913  00268E  A4D8               	btfss	status,2,c
  9914  002690  D007               	goto	i2l4371
  9915                           
  9916                           ;HW2.c: 125: {;HW2.c: 126: HS=0.0;
  9917  002692  0E00               	movlw	0
  9918  002694  6E55               	movwf	_HS^0,c
  9919  002696  0E00               	movlw	0
  9920  002698  6E56               	movwf	(_HS+1)^0,c
  9921  00269A  0E00               	movlw	0
  9922  00269C  6E57               	movwf	(_HS+2)^0,c
  9923                           
  9924                           ;HW2.c: 127: }
  9925  00269E  0012               	return	
  9926  0026A0                     i2l4371:
  9927                           
  9928                           ;HW2.c: 128: else;HW2.c: 129: {;HW2.c: 130: HS=HS+0.5;
  9929  0026A0  C055  F009         	movff	_HS,i2___ftadd@f1
  9930  0026A4  C056  F00A         	movff	_HS+1,i2___ftadd@f1+1
  9931  0026A8  C057  F00B         	movff	_HS+2,i2___ftadd@f1+2
  9932  0026AC  0E00               	movlw	0
  9933  0026AE  6E0C               	movwf	i2___ftadd@f2^0,c
  9934  0026B0  0E00               	movlw	0
  9935  0026B2  6E0D               	movwf	(i2___ftadd@f2+1)^0,c
  9936  0026B4  0E3F               	movlw	63
  9937  0026B6  6E0E               	movwf	(i2___ftadd@f2+2)^0,c
  9938  0026B8  ECC9  F00B         	call	i2___ftadd	;wreg free
  9939  0026BC  C009  F055         	movff	?i2___ftadd,_HS
  9940  0026C0  C00A  F056         	movff	?i2___ftadd+1,_HS+1
  9941  0026C4  C00B  F057         	movff	?i2___ftadd+2,_HS+2
  9942  0026C8  0012               	return		;funcret
  9943  0026CA                     __end_of_EXT_Int1_isr:
  9944                           	callstack 0
  9945                           
  9946 ;; *************** function i2___ftadd *****************
  9947 ;; Defined at:
  9948 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftadd.c"
  9949 ;; Parameters:    Size  Location     Type
  9950 ;;  f1              3    8[COMRAM] float 
  9951 ;;  f2              3   11[COMRAM] float 
  9952 ;; Auto vars:     Size  Location     Type
  9953 ;;  exp1            1   19[COMRAM] unsigned char 
  9954 ;;  exp2            1   18[COMRAM] unsigned char 
  9955 ;;  sign            1   17[COMRAM] unsigned char 
  9956 ;; Return value:  Size  Location     Type
  9957 ;;                  3    8[COMRAM] float 
  9958 ;; Registers used:
  9959 ;;		wreg, status,2, status,0, cstack
  9960 ;; Tracked objects:
  9961 ;;		On entry : 0/0
  9962 ;;		On exit  : 0/0
  9963 ;;		Unchanged: 0/0
  9964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9965 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9966 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9967 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9968 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9969 ;;Total ram usage:       12 bytes
  9970 ;; Hardware stack levels used:    1
  9971 ;; Hardware stack levels required when called:    1
  9972 ;; This function calls:
  9973 ;;		i2___ftpack
  9974 ;; This function is called by:
  9975 ;;		_EXT_Int1_isr
  9976 ;;		_highIsr
  9977 ;;		i2___ftsub
  9978 ;; This function uses a non-reentrant model
  9979 ;;
  9980                           
  9981                           	psect	text55
  9982  001792                     __ptext55:
  9983                           	callstack 0
  9984  001792                     i2___ftadd:
  9985                           	callstack 20
  9986                           
  9987                           ;incstack = 0
  9988  001792  C00B  F00F         	movff	i2___ftadd@f1+2,??i2___ftadd
  9989  001796  6A10               	clrf	(??i2___ftadd+1)^0,c
  9990  001798  6A11               	clrf	(??i2___ftadd+2)^0,c
  9991  00179A  340A               	rlcf	(i2___ftadd@f1+1)^0,w,c
  9992  00179C  360F               	rlcf	??i2___ftadd^0,f,c
  9993  00179E  E301               	bnc	u453_41
  9994  0017A0  8010               	bsf	(??i2___ftadd+1)^0,0,c
  9995  0017A2                     u453_41:
  9996  0017A2  500F               	movf	??i2___ftadd^0,w,c
  9997  0017A4  6E14               	movwf	i2___ftadd@exp1^0,c
  9998  0017A6  C00E  F00F         	movff	i2___ftadd@f2+2,??i2___ftadd
  9999  0017AA  6A10               	clrf	(??i2___ftadd+1)^0,c
 10000  0017AC  6A11               	clrf	(??i2___ftadd+2)^0,c
 10001  0017AE  340D               	rlcf	(i2___ftadd@f2+1)^0,w,c
 10002  0017B0  360F               	rlcf	??i2___ftadd^0,f,c
 10003  0017B2  E301               	bnc	u454_41
 10004  0017B4  8010               	bsf	(??i2___ftadd+1)^0,0,c
 10005  0017B6                     u454_41:
 10006  0017B6  500F               	movf	??i2___ftadd^0,w,c
 10007  0017B8  6E13               	movwf	i2___ftadd@exp2^0,c
 10008  0017BA  5014               	movf	i2___ftadd@exp1^0,w,c
 10009  0017BC  B4D8               	btfsc	status,2,c
 10010  0017BE  D00A               	goto	i2u457_40
 10011  0017C0  5013               	movf	i2___ftadd@exp2^0,w,c
 10012  0017C2  5C14               	subwf	i2___ftadd@exp1^0,w,c
 10013  0017C4  B0D8               	btfsc	status,0,c
 10014  0017C6  D00D               	goto	i2l4253
 10015  0017C8  5014               	movf	i2___ftadd@exp1^0,w,c
 10016  0017CA  5C13               	subwf	i2___ftadd@exp2^0,w,c
 10017  0017CC  6E0F               	movwf	??i2___ftadd^0,c
 10018  0017CE  0E18               	movlw	24
 10019  0017D0  640F               	cpfsgt	??i2___ftadd^0,c
 10020  0017D2  D007               	goto	i2l4253
 10021  0017D4                     i2u457_40:
 10022  0017D4  C00C  F009         	movff	i2___ftadd@f2,?i2___ftadd
 10023  0017D8  C00D  F00A         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 10024  0017DC  C00E  F00B         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 10025  0017E0  0012               	return	
 10026  0017E2                     i2l4253:
 10027  0017E2  5013               	movf	i2___ftadd@exp2^0,w,c
 10028  0017E4  B4D8               	btfsc	status,2,c
 10029  0017E6  D00A               	goto	i2u460_40
 10030  0017E8  5014               	movf	i2___ftadd@exp1^0,w,c
 10031  0017EA  5C13               	subwf	i2___ftadd@exp2^0,w,c
 10032  0017EC  B0D8               	btfsc	status,0,c
 10033  0017EE  D00D               	goto	i2l4259
 10034  0017F0  5013               	movf	i2___ftadd@exp2^0,w,c
 10035  0017F2  5C14               	subwf	i2___ftadd@exp1^0,w,c
 10036  0017F4  6E0F               	movwf	??i2___ftadd^0,c
 10037  0017F6  0E18               	movlw	24
 10038  0017F8  640F               	cpfsgt	??i2___ftadd^0,c
 10039  0017FA  D007               	goto	i2l4259
 10040  0017FC                     i2u460_40:
 10041  0017FC  C009  F009         	movff	i2___ftadd@f1,?i2___ftadd
 10042  001800  C00A  F00A         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 10043  001804  C00B  F00B         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 10044  001808  0012               	return	
 10045  00180A                     i2l4259:
 10046  00180A  0E06               	movlw	6
 10047  00180C  6E12               	movwf	i2___ftadd@sign^0,c
 10048  00180E  BE0B               	btfsc	(i2___ftadd@f1+2)^0,7,c
 10049  001810  8E12               	bsf	i2___ftadd@sign^0,7,c
 10050  001812  BE0E               	btfsc	(i2___ftadd@f2+2)^0,7,c
 10051  001814  8C12               	bsf	i2___ftadd@sign^0,6,c
 10052  001816  8E0A               	bsf	(i2___ftadd@f1+1)^0,7,c
 10053  001818  0EFF               	movlw	255
 10054  00181A  1609               	andwf	i2___ftadd@f1^0,f,c
 10055  00181C  0EFF               	movlw	255
 10056  00181E  160A               	andwf	(i2___ftadd@f1+1)^0,f,c
 10057  001820  0E00               	movlw	0
 10058  001822  160B               	andwf	(i2___ftadd@f1+2)^0,f,c
 10059  001824  8E0D               	bsf	(i2___ftadd@f2+1)^0,7,c
 10060  001826  0EFF               	movlw	255
 10061  001828  160C               	andwf	i2___ftadd@f2^0,f,c
 10062  00182A  0EFF               	movlw	255
 10063  00182C  160D               	andwf	(i2___ftadd@f2+1)^0,f,c
 10064  00182E  0E00               	movlw	0
 10065  001830  160E               	andwf	(i2___ftadd@f2+2)^0,f,c
 10066  001832  5013               	movf	i2___ftadd@exp2^0,w,c
 10067  001834  5C14               	subwf	i2___ftadd@exp1^0,w,c
 10068  001836  B0D8               	btfsc	status,0,c
 10069  001838  D01B               	goto	i2l4285
 10070  00183A                     i2u463_40:
 10071  00183A  90D8               	bcf	status,0,c
 10072  00183C  360C               	rlcf	i2___ftadd@f2^0,f,c
 10073  00183E  360D               	rlcf	(i2___ftadd@f2+1)^0,f,c
 10074  001840  360E               	rlcf	(i2___ftadd@f2+2)^0,f,c
 10075  001842  0613               	decf	i2___ftadd@exp2^0,f,c
 10076  001844  5014               	movf	i2___ftadd@exp1^0,w,c
 10077  001846  1813               	xorwf	i2___ftadd@exp2^0,w,c
 10078  001848  B4D8               	btfsc	status,2,c
 10079  00184A  D00D               	goto	i2l4283
 10080  00184C  0612               	decf	i2___ftadd@sign^0,f,c
 10081  00184E  C012  F00F         	movff	i2___ftadd@sign,??i2___ftadd
 10082  001852  0E07               	movlw	7
 10083  001854  160F               	andwf	??i2___ftadd^0,f,c
 10084  001856  B4D8               	btfsc	status,2,c
 10085  001858  D006               	goto	i2l4283
 10086  00185A  D7EF               	goto	i2u463_40
 10087  00185C                     i2l4281:
 10088  00185C  90D8               	bcf	status,0,c
 10089  00185E  320B               	rrcf	(i2___ftadd@f1+2)^0,f,c
 10090  001860  320A               	rrcf	(i2___ftadd@f1+1)^0,f,c
 10091  001862  3209               	rrcf	i2___ftadd@f1^0,f,c
 10092  001864  2A14               	incf	i2___ftadd@exp1^0,f,c
 10093  001866                     i2l4283:
 10094  001866  5013               	movf	i2___ftadd@exp2^0,w,c
 10095  001868  1814               	xorwf	i2___ftadd@exp1^0,w,c
 10096  00186A  B4D8               	btfsc	status,2,c
 10097  00186C  D01F               	goto	i2u470_40
 10098  00186E  D7F6               	goto	i2l4281
 10099  001870                     i2l4285:
 10100  001870  5014               	movf	i2___ftadd@exp1^0,w,c
 10101  001872  5C13               	subwf	i2___ftadd@exp2^0,w,c
 10102  001874  B0D8               	btfsc	status,0,c
 10103  001876  D01A               	goto	i2u470_40
 10104  001878                     i2u467_40:
 10105  001878  90D8               	bcf	status,0,c
 10106  00187A  3609               	rlcf	i2___ftadd@f1^0,f,c
 10107  00187C  360A               	rlcf	(i2___ftadd@f1+1)^0,f,c
 10108  00187E  360B               	rlcf	(i2___ftadd@f1+2)^0,f,c
 10109  001880  0614               	decf	i2___ftadd@exp1^0,f,c
 10110  001882  5014               	movf	i2___ftadd@exp1^0,w,c
 10111  001884  1813               	xorwf	i2___ftadd@exp2^0,w,c
 10112  001886  B4D8               	btfsc	status,2,c
 10113  001888  D00D               	goto	i2l4295
 10114  00188A  0612               	decf	i2___ftadd@sign^0,f,c
 10115  00188C  C012  F00F         	movff	i2___ftadd@sign,??i2___ftadd
 10116  001890  0E07               	movlw	7
 10117  001892  160F               	andwf	??i2___ftadd^0,f,c
 10118  001894  B4D8               	btfsc	status,2,c
 10119  001896  D006               	goto	i2l4295
 10120  001898  D7EF               	goto	i2u467_40
 10121  00189A                     i2l4293:
 10122  00189A  90D8               	bcf	status,0,c
 10123  00189C  320E               	rrcf	(i2___ftadd@f2+2)^0,f,c
 10124  00189E  320D               	rrcf	(i2___ftadd@f2+1)^0,f,c
 10125  0018A0  320C               	rrcf	i2___ftadd@f2^0,f,c
 10126  0018A2  2A13               	incf	i2___ftadd@exp2^0,f,c
 10127  0018A4                     i2l4295:
 10128  0018A4  5013               	movf	i2___ftadd@exp2^0,w,c
 10129  0018A6  1814               	xorwf	i2___ftadd@exp1^0,w,c
 10130  0018A8  A4D8               	btfss	status,2,c
 10131  0018AA  D7F7               	goto	i2l4293
 10132  0018AC                     i2u470_40:
 10133  0018AC  AE12               	btfss	i2___ftadd@sign^0,7,c
 10134  0018AE  D00C               	goto	i2l898
 10135  0018B0  0EFF               	movlw	255
 10136  0018B2  1A09               	xorwf	i2___ftadd@f1^0,f,c
 10137  0018B4  0EFF               	movlw	255
 10138  0018B6  1A0A               	xorwf	(i2___ftadd@f1+1)^0,f,c
 10139  0018B8  0EFF               	movlw	255
 10140  0018BA  1A0B               	xorwf	(i2___ftadd@f1+2)^0,f,c
 10141  0018BC  0E01               	movlw	1
 10142  0018BE  2609               	addwf	i2___ftadd@f1^0,f,c
 10143  0018C0  0E00               	movlw	0
 10144  0018C2  220A               	addwfc	(i2___ftadd@f1+1)^0,f,c
 10145  0018C4  0E00               	movlw	0
 10146  0018C6  220B               	addwfc	(i2___ftadd@f1+2)^0,f,c
 10147  0018C8                     i2l898:
 10148  0018C8  AC12               	btfss	i2___ftadd@sign^0,6,c
 10149  0018CA  D00C               	goto	i2l4301
 10150  0018CC  0EFF               	movlw	255
 10151  0018CE  1A0C               	xorwf	i2___ftadd@f2^0,f,c
 10152  0018D0  0EFF               	movlw	255
 10153  0018D2  1A0D               	xorwf	(i2___ftadd@f2+1)^0,f,c
 10154  0018D4  0EFF               	movlw	255
 10155  0018D6  1A0E               	xorwf	(i2___ftadd@f2+2)^0,f,c
 10156  0018D8  0E01               	movlw	1
 10157  0018DA  260C               	addwf	i2___ftadd@f2^0,f,c
 10158  0018DC  0E00               	movlw	0
 10159  0018DE  220D               	addwfc	(i2___ftadd@f2+1)^0,f,c
 10160  0018E0  0E00               	movlw	0
 10161  0018E2  220E               	addwfc	(i2___ftadd@f2+2)^0,f,c
 10162  0018E4                     i2l4301:
 10163  0018E4  0E00               	movlw	0
 10164  0018E6  6E12               	movwf	i2___ftadd@sign^0,c
 10165  0018E8  5009               	movf	i2___ftadd@f1^0,w,c
 10166  0018EA  260C               	addwf	i2___ftadd@f2^0,f,c
 10167  0018EC  500A               	movf	(i2___ftadd@f1+1)^0,w,c
 10168  0018EE  220D               	addwfc	(i2___ftadd@f2+1)^0,f,c
 10169  0018F0  500B               	movf	(i2___ftadd@f1+2)^0,w,c
 10170  0018F2  220E               	addwfc	(i2___ftadd@f2+2)^0,f,c
 10171  0018F4  AE0E               	btfss	(i2___ftadd@f2+2)^0,7,c
 10172  0018F6  D00E               	goto	i2l4311
 10173  0018F8  0EFF               	movlw	255
 10174  0018FA  1A0C               	xorwf	i2___ftadd@f2^0,f,c
 10175  0018FC  0EFF               	movlw	255
 10176  0018FE  1A0D               	xorwf	(i2___ftadd@f2+1)^0,f,c
 10177  001900  0EFF               	movlw	255
 10178  001902  1A0E               	xorwf	(i2___ftadd@f2+2)^0,f,c
 10179  001904  0E01               	movlw	1
 10180  001906  260C               	addwf	i2___ftadd@f2^0,f,c
 10181  001908  0E00               	movlw	0
 10182  00190A  220D               	addwfc	(i2___ftadd@f2+1)^0,f,c
 10183  00190C  0E00               	movlw	0
 10184  00190E  220E               	addwfc	(i2___ftadd@f2+2)^0,f,c
 10185  001910  0E01               	movlw	1
 10186  001912  6E12               	movwf	i2___ftadd@sign^0,c
 10187  001914                     i2l4311:
 10188  001914  C00C  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 10189  001918  C00D  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 10190  00191C  C00E  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 10191  001920  C014  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 10192  001924  C012  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 10193  001928  ECA4  F00F         	call	i2___ftpack	;wreg free
 10194  00192C  C001  F009         	movff	?i2___ftpack,?i2___ftadd
 10195  001930  C002  F00A         	movff	?i2___ftpack+1,?i2___ftadd+1
 10196  001934  C003  F00B         	movff	?i2___ftpack+2,?i2___ftadd+2
 10197  001938  0012               	return		;funcret
 10198  00193A                     __end_ofi2___ftadd:
 10199                           	callstack 0
 10200                           
 10201 ;; *************** function i2___ftpack *****************
 10202 ;; Defined at:
 10203 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\float.c"
 10204 ;; Parameters:    Size  Location     Type
 10205 ;;  arg             3    0[COMRAM] unsigned um
 10206 ;;  exp             1    3[COMRAM] unsigned char 
 10207 ;;  sign            1    4[COMRAM] unsigned char 
 10208 ;; Auto vars:     Size  Location     Type
 10209 ;;		None
 10210 ;; Return value:  Size  Location     Type
 10211 ;;                  3    0[COMRAM] float 
 10212 ;; Registers used:
 10213 ;;		wreg, status,2, status,0
 10214 ;; Tracked objects:
 10215 ;;		On entry : 0/0
 10216 ;;		On exit  : 0/0
 10217 ;;		Unchanged: 0/0
 10218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10219 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10221 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10222 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10223 ;;Total ram usage:        8 bytes
 10224 ;; Hardware stack levels used:    1
 10225 ;; This function calls:
 10226 ;;		Nothing
 10227 ;; This function is called by:
 10228 ;;		i2___ftadd
 10229 ;; This function uses a non-reentrant model
 10230 ;;
 10231                           
 10232                           	psect	text56
 10233  001F48                     __ptext56:
 10234                           	callstack 0
 10235  001F48                     i2___ftpack:
 10236                           	callstack 20
 10237                           
 10238                           ;incstack = 0
 10239  001F48  5004               	movf	i2___ftpack@exp^0,w,c
 10240  001F4A  B4D8               	btfsc	status,2,c
 10241  001F4C  D005               	goto	i2u374_40
 10242  001F4E  5001               	movf	i2___ftpack@arg^0,w,c
 10243  001F50  1002               	iorwf	(i2___ftpack@arg+1)^0,w,c
 10244  001F52  1003               	iorwf	(i2___ftpack@arg+2)^0,w,c
 10245  001F54  A4D8               	btfss	status,2,c
 10246  001F56  D00C               	goto	i2l3765
 10247  001F58                     i2u374_40:
 10248  001F58  0E00               	movlw	0
 10249  001F5A  6E01               	movwf	?i2___ftpack^0,c
 10250  001F5C  0E00               	movlw	0
 10251  001F5E  6E02               	movwf	(?i2___ftpack+1)^0,c
 10252  001F60  0E00               	movlw	0
 10253  001F62  6E03               	movwf	(?i2___ftpack+2)^0,c
 10254  001F64  0012               	return	
 10255  001F66                     i2l3763:
 10256  001F66  2A04               	incf	i2___ftpack@exp^0,f,c
 10257  001F68  90D8               	bcf	status,0,c
 10258  001F6A  3203               	rrcf	(i2___ftpack@arg+2)^0,f,c
 10259  001F6C  3202               	rrcf	(i2___ftpack@arg+1)^0,f,c
 10260  001F6E  3201               	rrcf	i2___ftpack@arg^0,f,c
 10261  001F70                     i2l3765:
 10262  001F70  0E00               	movlw	0
 10263  001F72  1401               	andwf	i2___ftpack@arg^0,w,c
 10264  001F74  6E06               	movwf	??i2___ftpack^0,c
 10265  001F76  0E00               	movlw	0
 10266  001F78  1402               	andwf	(i2___ftpack@arg+1)^0,w,c
 10267  001F7A  6E07               	movwf	(??i2___ftpack+1)^0,c
 10268  001F7C  0EFE               	movlw	254
 10269  001F7E  1403               	andwf	(i2___ftpack@arg+2)^0,w,c
 10270  001F80  6E08               	movwf	(??i2___ftpack+2)^0,c
 10271  001F82  5006               	movf	??i2___ftpack^0,w,c
 10272  001F84  1007               	iorwf	(??i2___ftpack+1)^0,w,c
 10273  001F86  1008               	iorwf	(??i2___ftpack+2)^0,w,c
 10274  001F88  B4D8               	btfsc	status,2,c
 10275  001F8A  D00C               	goto	i2l3771
 10276  001F8C  D7EC               	goto	i2l3763
 10277  001F8E                     i2l3767:
 10278  001F8E  2A04               	incf	i2___ftpack@exp^0,f,c
 10279  001F90  0E01               	movlw	1
 10280  001F92  2601               	addwf	i2___ftpack@arg^0,f,c
 10281  001F94  0E00               	movlw	0
 10282  001F96  2202               	addwfc	(i2___ftpack@arg+1)^0,f,c
 10283  001F98  0E00               	movlw	0
 10284  001F9A  2203               	addwfc	(i2___ftpack@arg+2)^0,f,c
 10285  001F9C  90D8               	bcf	status,0,c
 10286  001F9E  3203               	rrcf	(i2___ftpack@arg+2)^0,f,c
 10287  001FA0  3202               	rrcf	(i2___ftpack@arg+1)^0,f,c
 10288  001FA2  3201               	rrcf	i2___ftpack@arg^0,f,c
 10289  001FA4                     i2l3771:
 10290  001FA4  0E00               	movlw	0
 10291  001FA6  1401               	andwf	i2___ftpack@arg^0,w,c
 10292  001FA8  6E06               	movwf	??i2___ftpack^0,c
 10293  001FAA  0E00               	movlw	0
 10294  001FAC  1402               	andwf	(i2___ftpack@arg+1)^0,w,c
 10295  001FAE  6E07               	movwf	(??i2___ftpack+1)^0,c
 10296  001FB0  0EFF               	movlw	255
 10297  001FB2  1403               	andwf	(i2___ftpack@arg+2)^0,w,c
 10298  001FB4  6E08               	movwf	(??i2___ftpack+2)^0,c
 10299  001FB6  5006               	movf	??i2___ftpack^0,w,c
 10300  001FB8  1007               	iorwf	(??i2___ftpack+1)^0,w,c
 10301  001FBA  1008               	iorwf	(??i2___ftpack+2)^0,w,c
 10302  001FBC  B4D8               	btfsc	status,2,c
 10303  001FBE  D006               	goto	i2l3775
 10304  001FC0  D7E6               	goto	i2l3767
 10305  001FC2                     i2l3773:
 10306  001FC2  0604               	decf	i2___ftpack@exp^0,f,c
 10307  001FC4  90D8               	bcf	status,0,c
 10308  001FC6  3601               	rlcf	i2___ftpack@arg^0,f,c
 10309  001FC8  3602               	rlcf	(i2___ftpack@arg+1)^0,f,c
 10310  001FCA  3603               	rlcf	(i2___ftpack@arg+2)^0,f,c
 10311  001FCC                     i2l3775:
 10312  001FCC  BE02               	btfsc	(i2___ftpack@arg+1)^0,7,c
 10313  001FCE  D003               	goto	i2u378_40
 10314  001FD0  0E02               	movlw	2
 10315  001FD2  6004               	cpfslt	i2___ftpack@exp^0,c
 10316  001FD4  D7F6               	goto	i2l3773
 10317  001FD6                     i2u378_40:
 10318  001FD6  A004               	btfss	i2___ftpack@exp^0,0,c
 10319  001FD8  9E02               	bcf	(i2___ftpack@arg+1)^0,7,c
 10320  001FDA  90D8               	bcf	status,0,c
 10321  001FDC  3204               	rrcf	i2___ftpack@exp^0,f,c
 10322  001FDE  5004               	movf	i2___ftpack@exp^0,w,c
 10323  001FE0  1203               	iorwf	(i2___ftpack@arg+2)^0,f,c
 10324  001FE2  5005               	movf	i2___ftpack@sign^0,w,c
 10325  001FE4  A4D8               	btfss	status,2,c
 10326  001FE6  8E03               	bsf	(i2___ftpack@arg+2)^0,7,c
 10327  001FE8  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 10328  001FEC  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 10329  001FF0  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 10330  001FF4  0012               	return		;funcret
 10331  001FF6                     __end_ofi2___ftpack:
 10332                           	callstack 0
 10333                           
 10334 ;; *************** function _EXT_Int0_isr *****************
 10335 ;; Defined at:
 10336 ;;		line 107 in file "HW2.c"
 10337 ;; Parameters:    Size  Location     Type
 10338 ;;		None
 10339 ;; Auto vars:     Size  Location     Type
 10340 ;;		None
 10341 ;; Return value:  Size  Location     Type
 10342 ;;                  1    wreg      void 
 10343 ;; Registers used:
 10344 ;;		wreg, status,2, status,0
 10345 ;; Tracked objects:
 10346 ;;		On entry : 0/0
 10347 ;;		On exit  : 3F/1
 10348 ;;		Unchanged: 0/0
 10349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10353 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10354 ;;Total ram usage:        0 bytes
 10355 ;; Hardware stack levels used:    1
 10356 ;; This function calls:
 10357 ;;		Nothing
 10358 ;; This function is called by:
 10359 ;;		_highIsr
 10360 ;; This function uses a non-reentrant model
 10361 ;;
 10362                           
 10363                           	psect	text57
 10364  002B10                     __ptext57:
 10365                           	callstack 0
 10366  002B10                     _EXT_Int0_isr:
 10367                           	callstack 22
 10368                           
 10369                           ;HW2.c: 109: INTCON3bits.INT1IF=0;
 10370                           
 10371                           ;incstack = 0
 10372  002B10  90F0               	bcf	240,0,c	;volatile
 10373                           
 10374                           ;HW2.c: 110: if(mode==5)
 10375  002B12  0E05               	movlw	5
 10376  002B14  0101               	movlb	1	; () banked
 10377  002B16  19E2               	xorwf	_mode& (0+255),w,b
 10378  002B18  11E3               	iorwf	(_mode+1)& (0+255),w,b
 10379  002B1A  A4D8               	btfss	status,2,c
 10380  002B1C  D005               	goto	i2l4363
 10381                           
 10382                           ; BSR set to: 1
 10383                           ;HW2.c: 112: {;HW2.c: 113: mode=0;
 10384  002B1E  0E00               	movlw	0
 10385  002B20  6FE3               	movwf	(_mode+1)& (0+255),b
 10386  002B22  0E00               	movlw	0
 10387  002B24  6FE2               	movwf	_mode& (0+255),b
 10388                           
 10389                           ;HW2.c: 114: }
 10390  002B26  0012               	return	
 10391  002B28                     i2l4363:
 10392                           
 10393                           ; BSR set to: 1
 10394                           ;HW2.c: 115: else{;HW2.c: 116: mode++;
 10395  002B28  4BE2               	infsnz	_mode& (0+255),f,b
 10396  002B2A  2BE3               	incf	(_mode+1)& (0+255),f,b
 10397                           
 10398                           ; BSR set to: 1
 10399  002B2C  0012               	return		;funcret
 10400  002B2E                     __end_of_EXT_Int0_isr:
 10401                           	callstack 0
 10402                           
 10403                           	psect	rparam
 10404  0000                     
 10405                           	psect	temp
 10406  00005C                     btemp:
 10407                           	callstack 0
 10408  00005C                     	ds	1
 10409  0000                     int$flags	set	btemp
 10410  0000                     wtemp8	set	btemp+1
 10411  0000                     ttemp5	set	btemp+1
 10412  0000                     ttemp6	set	btemp+4
 10413  0000                     ttemp7	set	btemp+8
 10414                           
 10415                           	psect	idloc
 10416                           
 10417                           ;Config register IDLOC0 @ 0x200000
 10418                           ;	unspecified, using default values
 10419  200000                     	org	2097152
 10420  200000  FF                 	db	255
 10421                           
 10422                           ;Config register IDLOC1 @ 0x200001
 10423                           ;	unspecified, using default values
 10424  200001                     	org	2097153
 10425  200001  FF                 	db	255
 10426                           
 10427                           ;Config register IDLOC2 @ 0x200002
 10428                           ;	unspecified, using default values
 10429  200002                     	org	2097154
 10430  200002  FF                 	db	255
 10431                           
 10432                           ;Config register IDLOC3 @ 0x200003
 10433                           ;	unspecified, using default values
 10434  200003                     	org	2097155
 10435  200003  FF                 	db	255
 10436                           
 10437                           ;Config register IDLOC4 @ 0x200004
 10438                           ;	unspecified, using default values
 10439  200004                     	org	2097156
 10440  200004  FF                 	db	255
 10441                           
 10442                           ;Config register IDLOC5 @ 0x200005
 10443                           ;	unspecified, using default values
 10444  200005                     	org	2097157
 10445  200005  FF                 	db	255
 10446                           
 10447                           ;Config register IDLOC6 @ 0x200006
 10448                           ;	unspecified, using default values
 10449  200006                     	org	2097158
 10450  200006  FF                 	db	255
 10451                           
 10452                           ;Config register IDLOC7 @ 0x200007
 10453                           ;	unspecified, using default values
 10454  200007                     	org	2097159
 10455  200007  FF                 	db	255
 10456                           
 10457                           	psect	config
 10458                           
 10459                           ; Padding undefined space
 10460  300000                     	org	3145728
 10461  300000  FF                 	db	255
 10462                           
 10463                           ;Config register CONFIG1H @ 0x300001
 10464                           ;	Oscillator Selection bits
 10465                           ;	OSC = XT, XT oscillator
 10466                           ;	Fail-Safe Clock Monitor Enable bit
 10467                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
 10468                           ;	Internal/External Oscillator Switchover bit
 10469                           ;	IESO = OFF, Oscillator Switchover mode disabled
 10470  300001                     	org	3145729
 10471  300001  01                 	db	1
 10472                           
 10473                           ;Config register CONFIG2L @ 0x300002
 10474                           ;	Power-up Timer Enable bit
 10475                           ;	PWRT = OFF, PWRT disabled
 10476                           ;	Brown-out Reset Enable bits
 10477                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
 10478                           ;	Brown Out Reset Voltage bits
 10479                           ;	BORV = 3, Minimum setting
 10480  300002                     	org	3145730
 10481  300002  1F                 	db	31
 10482                           
 10483                           ;Config register CONFIG2H @ 0x300003
 10484                           ;	Watchdog Timer Enable bit
 10485                           ;	WDT = ON, WDT enabled
 10486                           ;	Watchdog Timer Postscale Select bits
 10487                           ;	WDTPS = 32768, 1:32768
 10488  300003                     	org	3145731
 10489  300003  1F                 	db	31
 10490                           
 10491                           ; Padding undefined space
 10492  300004                     	org	3145732
 10493  300004  FF                 	db	255
 10494                           
 10495                           ;Config register CONFIG3H @ 0x300005
 10496                           ;	CCP2 MUX bit
 10497                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
 10498                           ;	PORTB A/D Enable bit
 10499                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
 10500                           ;	Low-Power Timer1 Oscillator Enable bit
 10501                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
 10502                           ;	MCLR Pin Enable bit
 10503                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
 10504  300005                     	org	3145733
 10505  300005  83                 	db	131
 10506                           
 10507                           ;Config register CONFIG4L @ 0x300006
 10508                           ;	Stack Full/Underflow Reset Enable bit
 10509                           ;	STVREN = ON, Stack full/underflow will cause Reset
 10510                           ;	Single-Supply ICSP Enable bit
 10511                           ;	LVP = ON, Single-Supply ICSP enabled
 10512                           ;	Extended Instruction Set Enable bit
 10513                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 10514                           ;	Background Debugger Enable bit
 10515                           ;	DEBUG = 0x1, unprogrammed default
 10516  300006                     	org	3145734
 10517  300006  85                 	db	133
 10518                           
 10519                           ; Padding undefined space
 10520  300007                     	org	3145735
 10521  300007  FF                 	db	255
 10522                           
 10523                           ;Config register CONFIG5L @ 0x300008
 10524                           ;	Code Protection bit
 10525                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
 10526                           ;	Code Protection bit
 10527                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
 10528                           ;	Code Protection bit
 10529                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
 10530                           ;	Code Protection bit
 10531                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
 10532  300008                     	org	3145736
 10533  300008  0F                 	db	15
 10534                           
 10535                           ;Config register CONFIG5H @ 0x300009
 10536                           ;	Boot Block Code Protection bit
 10537                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
 10538                           ;	Data EEPROM Code Protection bit
 10539                           ;	CPD = OFF, Data EEPROM not code-protected
 10540  300009                     	org	3145737
 10541  300009  C0                 	db	192
 10542                           
 10543                           ;Config register CONFIG6L @ 0x30000A
 10544                           ;	Write Protection bit
 10545                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
 10546                           ;	Write Protection bit
 10547                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
 10548                           ;	Write Protection bit
 10549                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
 10550                           ;	Write Protection bit
 10551                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
 10552  30000A                     	org	3145738
 10553  30000A  0F                 	db	15
 10554                           
 10555                           ;Config register CONFIG6H @ 0x30000B
 10556                           ;	Configuration Register Write Protection bit
 10557                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
 10558                           ;	Boot Block Write Protection bit
 10559                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
 10560                           ;	Data EEPROM Write Protection bit
 10561                           ;	WRTD = OFF, Data EEPROM not write-protected
 10562  30000B                     	org	3145739
 10563  30000B  E0                 	db	224
 10564                           
 10565                           ;Config register CONFIG7L @ 0x30000C
 10566                           ;	Table Read Protection bit
 10567                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
 10568                           ;	Table Read Protection bit
 10569                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
 10570                           ;	Table Read Protection bit
 10571                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
 10572                           ;	Table Read Protection bit
 10573                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
 10574  30000C                     	org	3145740
 10575  30000C  0F                 	db	15
 10576                           
 10577                           ;Config register CONFIG7H @ 0x30000D
 10578                           ;	Boot Block Table Read Protection bit
 10579                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
 10580  30000D                     	org	3145741
 10581  30000D  40                 	db	64
 10582                           tosu	equ	0xFFF
 10583                           tosh	equ	0xFFE
 10584                           tosl	equ	0xFFD
 10585                           stkptr	equ	0xFFC
 10586                           pclatu	equ	0xFFB
 10587                           pclath	equ	0xFFA
 10588                           pcl	equ	0xFF9
 10589                           tblptru	equ	0xFF8
 10590                           tblptrh	equ	0xFF7
 10591                           tblptrl	equ	0xFF6
 10592                           tablat	equ	0xFF5
 10593                           prodh	equ	0xFF4
 10594                           prodl	equ	0xFF3
 10595                           indf0	equ	0xFEF
 10596                           postinc0	equ	0xFEE
 10597                           postdec0	equ	0xFED
 10598                           preinc0	equ	0xFEC
 10599                           plusw0	equ	0xFEB
 10600                           fsr0h	equ	0xFEA
 10601                           fsr0l	equ	0xFE9
 10602                           wreg	equ	0xFE8
 10603                           indf1	equ	0xFE7
 10604                           postinc1	equ	0xFE6
 10605                           postdec1	equ	0xFE5
 10606                           preinc1	equ	0xFE4
 10607                           plusw1	equ	0xFE3
 10608                           fsr1h	equ	0xFE2
 10609                           fsr1l	equ	0xFE1
 10610                           bsr	equ	0xFE0
 10611                           indf2	equ	0xFDF
 10612                           postinc2	equ	0xFDE
 10613                           postdec2	equ	0xFDD
 10614                           preinc2	equ	0xFDC
 10615                           plusw2	equ	0xFDB
 10616                           fsr2h	equ	0xFDA
 10617                           fsr2l	equ	0xFD9
 10618                           status	equ	0xFD8

Data Sizes:
    Strings     164
    Constant    118
    Data        15
    BSS         60
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     64      91
    BANK0           128     86     126
    BANK1           256    225     233
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_18(CODE[7]), ?_sprintf(BANK0[2]), STR_8(CODE[4]), STR_6(CODE[3]), 
		 -> STR_4(CODE[4]), STR_2(CODE[3]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_17(CODE[10]), STR_16(CODE[11]), STR_15(CODE[14]), STR_14(CODE[22]), 
		 -> STR_13(CODE[12]), STR_12(CODE[15]), STR_11(CODE[16]), STR_10(CODE[19]), 
		 -> STR_9(CODE[17]), STR_7(CODE[7]), STR_5(CODE[7]), STR_3(CODE[7]), 
		 -> STR_1(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 64
		 -> display@LCD(BANK1[64]), display@Buffer(BANK1[32]), display@LCDP(BANK1[64]), display@Buffer2(BANK1[32]), 
		 -> display@Buffer1(BANK1[32]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_puts@s	PTR unsigned char  size(2) Largest target is 64
		 -> display@LCD(BANK1[64]), display@Buffer(BANK1[32]), display@LCDP(BANK1[64]), display@Buffer2(BANK1[32]), 
		 -> display@Buffer1(BANK1[32]), 


Critical Paths under _main in COMRAM

    _main->___ftmul
    _read_adc_voltage->___ftdiv
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _lcd_init->_lcd_send_byte
    _sprintf->___ftmul
    _scale->___ftmul
    ___awdiv->___awmod
    _fround->___ftmul
    ___lbdiv->___lbmod
    ___ftmul->___awdiv
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    _lcd_puts->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _lcd_send_nibble->_delay_cycles
    ___lwtoft->___ftpack

Critical Paths under _highIsr in COMRAM

    _highIsr->i2___ftge
    i2___ftsub->i2___ftadd
    i2___ftge->i2___ftsub
    _EXT_Int1_isr->i2___ftadd
    i2___ftadd->i2___ftpack

Critical Paths under _main in BANK0

    _main->_display
    _display->_sprintf
    _sprintf->___ftge
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftge->___ftsub

Critical Paths under _highIsr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_display

Critical Paths under _highIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _highIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _highIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _highIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _highIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _highIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _highIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _highIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _highIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _highIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _highIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _highIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _highIsr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _highIsr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _highIsr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  101618
                                             84 BANK0      2     2      0
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftsub
                           ___lwtoft
                _decrement10MinClock
                  _decrement10SClock
                     _decrementClock
                 _decrementHourClock
                  _decrementMinClock
                           _delay_ms
                            _display
                _increment10MinClock
                  _increment10SClock
                     _incrementClock
                 _incrementHourClock
                  _incrementMinClock
                    _init_adc_no_lib
                           _lcd_init
                      _lcd_send_byte
                   _read_adc_voltage
                         _setupPorts
 ---------------------------------------------------------------------------------
 (1) _setupPorts                                           0     0      0       0
                       _reloadTimer0
 ---------------------------------------------------------------------------------
 (2) _reloadTimer0                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_adc_voltage                                     9     6      3    9461
                                              0 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___wmul
                _read_adc_raw_no_lib
 ---------------------------------------------------------------------------------
 (2) _read_adc_raw_no_lib                                  7     5      2      65
                                             35 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4179
                                             47 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3836
                                             43 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    1316
                                             45 COMRAM     1     1      0
                           _delay_ms
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (1) _init_adc_no_lib                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _incrementMinClock                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _incrementHourClock                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _incrementClock                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _increment10SClock                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _increment10MinClock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _display                                            228   228      0   62129
                                             82 BANK0      2     2      0
                                              0 BANK1    225   225      0
                         _lcd_gotoxy
                           _lcd_puts
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             45    35     10   56255
                                             38 BANK0     44    34     10
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                                7     4      3   10794
                                              0 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1513
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1705
                                             41 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              11     8      3    8310
                                              0 BANK0     11     8      3
                            ___ftmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (4) ___lbmod                                              4     3      1     502
                                             35 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     511
                                             39 COMRAM     4     3      1
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    6947
                                             49 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     455
                                             35 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     598
                                             35 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1282
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    3625
                                             43 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     767
                                             48 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     618
                                             35 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     641
                                              7 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    6264
                                             23 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5558
                                             11 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     121
                                             35 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1318
                                             29 BANK0      9     3      6
                            ___ftadd (ARG)
                            ___ftsub (ARG)
 ---------------------------------------------------------------------------------
 (2) _lcd_puts                                             2     0      2    3218
                                             49 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             1     1      0    2641
                                             48 COMRAM     1     1      0
                           _delay_ms
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           3     2      1    1463
                                             45 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_send_byte                                        2     1      1     784
                                             43 COMRAM     2     1      1
                       _delay_cycles
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (2) _lcd_send_nibble                                      2     2      0      68
                                             41 COMRAM     2     2      0
                       _delay_cycles
 ---------------------------------------------------------------------------------
 (3) _delay_cycles                                         6     6      0      46
                                             35 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             4     2      2     350
                                             35 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _decrementMinClock                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _decrementHourClock                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _decrementClock                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _decrement10SClock                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _decrement10MinClock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    3554
                                             43 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    3433
                                             35 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _highIsr                                              0     0      0    4274
                       _EXT_Int0_isr
                       _EXT_Int1_isr
                    _clockNormalMode
                          i2___ftadd
                           i2___ftge
                          i2___ftsub
                     i2_reloadTimer0
 ---------------------------------------------------------------------------------
 (9) i2___ftsub                                            6     0      6    1424
                                             20 COMRAM     6     0      6
                          i2___ftadd
 ---------------------------------------------------------------------------------
 (9) i2___ftge                                             9     3      6     240
                                             26 COMRAM     9     3      6
                          i2___ftadd (ARG)
                          i2___ftsub (ARG)
 ---------------------------------------------------------------------------------
 (9) _clockNormalMode                                      0     0      0       0
                     i2_reloadTimer0
 ---------------------------------------------------------------------------------
 (9) i2_reloadTimer0                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EXT_Int1_isr                                         0     0      0    1305
                          i2___ftadd
 ---------------------------------------------------------------------------------
 (10) i2___ftadd                                          12     6      6    1305
                                              8 COMRAM    12     6      6
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___ftpack                                          8     3      5     309
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _EXT_Int0_isr                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awtoft
     ___ftpack
     ___wmul (ARG)
   ___ftadd
     ___ftpack
     _fround (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
       ___lbdiv
         ___lbmod (ARG)
       ___lbmod
   ___ftge
     ___ftadd (ARG)
       ___ftpack
       _fround (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
     ___ftsub (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___lltoft (ARG)
         ___ftpack
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___lbdiv (ARG)
       ___lbmod (ARG)
     ___lbmod (ARG)
   ___ftsub
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
     ___lltoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
   _decrement10MinClock
   _decrement10SClock
   _decrementClock
   _decrementHourClock
   _decrementMinClock
   _delay_ms
   _display
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _lcd_send_nibble
           _delay_cycles
     _lcd_puts
       _lcd_putc
         _delay_ms
         _lcd_gotoxy
           _lcd_send_byte
             _delay_cycles
             _lcd_send_nibble
               _delay_cycles
         _lcd_send_byte
           _delay_cycles
           _lcd_send_nibble
             _delay_cycles
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___ftge
         ___ftadd (ARG)
           ___ftpack
           _fround (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___ftsub (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___lbdiv
                 ___lbmod (ARG)
               ___lbmod
           ___lltoft (ARG)
             ___ftpack
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
   _increment10MinClock
   _increment10SClock
   _incrementClock
   _incrementHourClock
   _incrementMinClock
   _init_adc_no_lib
   _lcd_init
     _delay_ms
     _lcd_send_byte
       _delay_cycles
       _lcd_send_nibble
         _delay_cycles
     _lcd_send_nibble
       _delay_cycles
   _lcd_send_byte
     _delay_cycles
     _lcd_send_nibble
       _delay_cycles
   _read_adc_voltage
     ___awtoft
       ___ftpack
       ___wmul (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___wmul
     _read_adc_raw_no_lib
   _setupPorts
     _reloadTimer0

 _highIsr (ROOT)
   _EXT_Int0_isr
   _EXT_Int1_isr
     i2___ftadd
       i2___ftpack
   _clockNormalMode
     i2_reloadTimer0
   i2___ftadd
     i2___ftpack
   i2___ftge
     i2___ftadd (ARG)
       i2___ftpack
     i2___ftsub (ARG)
       i2___ftadd
         i2___ftpack
   i2___ftsub
     i2___ftadd
       i2___ftpack
   i2_reloadTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E1      E9       7       91.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     56      7E       5       98.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     40      5B       1       72.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C2      34        0.0%
DATA                 0      0     1C2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Thu Apr 07 23:15:28 2022

           ?_read_adc_voltage 0080                i2_reloadTimer0 2B6A            ??_read_adc_voltage 003F  
                          l14 29CC                            l76 28B6                            _HS 0055  
              ?_lcd_send_byte 002C                  ___awdiv@sign 002F                            _ft 004B  
                          _sp 0041           ___wmul@multiplicand 0026                    i2___ftpack 1F48  
                ___ftadd@exp1 0096                  ___ftadd@exp2 0095                  ___ftadd@sign 0094  
                         l304 258C                           l314 2986                           l324 289E  
                         l270 2A56                           l511 0762                           l360 0F28  
                         l361 0FBA                           l292 267E                           l374 10B6  
                         l384 10F2                           l393 1178                           l369 109A  
                         l379 10D4                           l389 1110                           l578 2174  
                         l916 19BA                           l917 19E2                           l909 1CD4  
                         l948 2A7A                           l993 240E                           l898 1720  
                         _RPS 004D                           _lcd 000F83                           _spf 00F6  
                ___awmod@sign 0029     read_adc_voltage@raw_value 0087                           wreg 000FE8  
                 lcd_gotoxy@x 002F                   lcd_gotoxy@y 002E                  ___ftdiv@cntr 0039  
           _decrement10SClock 2534                   display@LCDP 0140                  ___ftdiv@sign 003E  
                        l5001 20E2                          l3171 27E6                          l3165 2A48  
                        l3173 27EA                          l3181 27F8                          l5005 20EC  
                        l5021 22F4                          l3175 27EE                          l3183 2812  
                        l3431 25AA                          l5031 2316                          l3177 27F2  
                        l3433 25B6                          l5105 15A8                          l3505 2B08  
                        l5009 20FA                          l5041 2338                          l5025 2300  
                        l3099 29D2                          l3435 25C2                          l5203 1D8A  
                        l3611 1BE4                          l3515 1966                          l3429 2592  
                        l5221 1DCA                          l5213 1DA2                          l3621 1BFC  
                        l5045 2346                          l5037 232E                          l5029 230E  
                        l5125 0CEC                          l5301 0194                          l4325 2726  
                        l3439 25CE                          l5215 1DAE                          l5207 1D9A  
                        l3623 1C08                          l3615 1BF4                          l3551 19FC  
                        l5055 28EC                          l5071 2910                          l5143 0EA2  
                        l5119 0C5A                          l5303 019E                          l3561 1A14  
                        l5137 0E10                          l5129 0D10                          l5313 01FE  
                        l5305 01A4                          l5227 2484                          l3571 1B4A  
                        l3563 1A20                          l3555 1A0C                          l5067 2908  
                        l5059 28F2                          l5411 0592                          l5331 0276  
                        l5323 022E                          l4339 273E                          l5165 21AA  
                        l5157 27B8                          l3637 2126                          l3741 2400  
                        l3733 23CC                          l5229 2490                          l5085 2A10  
                        l5077 29F8                          l5325 0240                          l5317 0214  
                        l5253 0036                          l5175 21F8                          l3639 2132  
                        l3735 23D8                          l3591 1B98                          l5407 052C  
                        l5343 02D8                          l5319 021E                          l5335 028A  
                        l5255 0048                          l5247 001A                          l5169 21CC  
                        l5185 1D34                          l3649 2166                          l5441 062A  
                        l5433 0608                          l5417 0596                          l5353 0312  
                        l5337 02C4                          l5265 007E                          l5099 14FE  
                        l5611 0B18                          l5515 08D2                          l5507 08B2  
                        l5291 016E                          l5259 004E                          l4901 16FC  
                        l5605 0A92                          l5533 0928                          l5509 08BC  
                        l5429 05F6                          l5381 042E                          l5517 08DC  
                        l5293 0172                          l5285 014A                          l5701 1246  
                        l4831 1EF6                          l4823 1EB8                          l3599 1BC8  
                        l5551 0982                          l5527 0910                          l5463 068C  
                        l5471 071E                          l5447 0640                          l5455 0666  
                        l5279 0100                          l5287 0160                          l5703 125C  
                        l5711 129E                          l5631 1C70                          l4833 1F14  
                        l4825 1EC2                          l3793 2A8A                          l5609 0B14  
                        l5561 09BC                          l5473 0728                          l5449 0650  
                        l5393 04B2                          l5385 046C                          l5377 040A  
                        l5369 03A4                          l5705 1272                          l5713 12CE  
                        l5625 1C48                          l4835 1F1E                          l4827 1EE0  
                        l4907 173C                          l5555 09A2                          l5539 092C  
                        l5707 1288                          l5651 1CAE                          l5803 1008  
                        l3797 2A9C                          l4917 176C                          l4933 1A88  
                        l5573 0A0A                          l5493 0784                          l5485 0766  
                        l5397 04D6                          l4951 1ACA                          l4927 1A60  
                        l5583 0A32                          l5591 0A52                          l5575 0A12  
                        l5567 09DE                          l5479 073E                          l5823 10A4  
                        l4865 1662                          l4961 1AF2                          l5569 09E6  
                        l5497 07D4                          l5673 299C                          l5817 108E  
                        l4891 16C8                          l4859 163A                          l4947 1ABA  
                        l5691 11CE                          l5835 10C0                          l4957 1AE2  
                        l5693 11EC                          l4887 16B4                          l4991 20C2  
                        l4983 20A4                          l5847 10DE                          l5871 111A  
                        l4889 16BE                          l4977 2094                          l5697 1210  
                        l5881 116A                          l4899 16F2                          l5699 1230  
                        l5859 10FC                          l4989 20BA                          l5789 0F7E  
                        l5799 0FD6                          STR_1 FFF1                          STR_2 FFFC  
                        STR_3 FFF1                          STR_4 FFF8                          STR_5 FFEA  
                        STR_6 FFFC                          STR_7 FFEA                          STR_8 FFF8  
                        STR_9 FF84                          u5000 25FC                          u5010 2618  
                        u5020 287A                          _IPR1 000F9F                          _IPR2 000FA2  
                        _PIE1 000F9D                          u3520 1C0E                          u5040 2B3E  
                        _PIE2 000FA0                          u3450 1A26                          u3371 194A  
                        u3540 2136                          u3700 23DC                          u3460 1B38  
                        u3380 1954                          u3391 1976                          u2745 291E  
                        u2746 2920                          u6130 1DB4                          u5500 1F28  
                        u6230 01D2                          u6071 1D18                          u5600 1654  
                        u6080 1D22                          u6400 047E                          u6090 1D52  
                        u5531 15FA                          u5460 1EAA                          u5700 1704  
                        u4900 2438                          u5541 160E                          u6237 01C8  
                        u5630 1692                          u6430 04B2                          u6350 034A  
                        u6190 00DC                          u4910 2458                          u6095 1D4A  
                        u6520 0674                          u4920 2474                          u4840 24EE  
                        _PIR1 000F9E                          u4930 254A                          u5570 162C  
                        u6290 026A                          u4850 250E                          _PIR2 000FA1  
                        u6355 0340                          u4940 256A                          u6460 05CC  
                        u4860 252A                          u7157 2946                          u5741 1A48  
                        u4870 2646                          u5670 16D0                          u5830 20C6  
                        u6550 074C                          u6390 043E                          u7167 2A4A  
                        u6800 0B42                          u6640 0962                          u6560 075C  
                        u4960 276E                          u5761 1A70                          u6297 0260  
                        u5930 28F6                          u4970 2786                          u6811 1C30  
                        u4980 2962                          u6831 1C58                          u6760 0A5A  
                        u5890 231A                          u6770 0A78                          u6790 0B28  
            ?_lcd_send_nibble 0001            ?_decrement10SClock 0001                          _main 0EC6  
                ___ftpack@arg 0024                          _mode 01E2                  ___ftpack@exp 0027  
                        _temp 0044                          fsr1h 000FE2                          fsr2h 000FDA  
                        indf1 000FE7                          indf2 000FDF                          fsr1l 000FE1  
                        fsr2l 000FD9                          btemp 005C                  i2___ftadd@f1 0009  
                i2___ftadd@f2 000C                  i2___ftge@ff1 001B                  i2___ftge@ff2 001E  
                        prodh 000FF4                          prodl 000FF3                          start 000E  
      __end_ofi2_reloadTimer0 2B74                  _sprintf$1845 00B6           ??_decrement10SClock 0024  
                ___ftmul@cntr 003F                  ___param_bank 000000                  ___ftmul@sign 0040  
                i2___ftsub@f1 0015                  i2___ftsub@f2 0018    __end_of_decrementHourClock 2B7C  
                ___fttol@exp1 0095                  ___fttol@lval 0091          __end_of_delay_cycles 29EE  
                       ?_main 0001               __end_of___awdiv 2104               __end_of___lbdiv 2914  
             __end_of___ftadd 1792                         STR_10 FF71                         STR_11 FF95  
                       STR_12 FFA5                         STR_13 FFC2                         STR_14 FF5B  
                       STR_15 FFB4                         STR_16 FFCE                         STR_17 FFD9  
                       STR_18 FFE3               __end_of___awmod 2350               __end_of___lbmod 2A18  
             __end_of___ftdiv 1D06               __end_of___ftneg 2A88               __end_of___lldiv 2186  
             __end_of___ftmul 1B2C                         _T0CON 000FD5               ___awdiv@divisor 002C  
             __end_of___llmod 2420               __end_of___ftsub 27E2               __end_of___fttol 1DDC  
                       i2l255 1E86                         i2l264 1E90                         i2l256 1E82  
                       i2l267 1E96                         i2l277 207A               ___awdiv@counter 002E  
                       i2l898 18C8                         _TMR3H 000FB3                         _TMR3L 000FB2  
                       _PORTC 000F82       read_adc_voltage@channel 0086                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISC 000F94                         _TRISD 000F95  
                       _TRISE 000F96                  ___lltoft@exp 0034               __end_of_highIsr 1E9A  
   __end_of_decrement10SClock 258E               __end_of_display 13F2                 ___awtoft@sign 002F  
             __end_of_dpowers FF5B                         _count 0058                         _scale 0B50  
             __end_of_isdigit 2B10                         _hours 01E4               _init_adc_no_lib 2B48  
                       _tempf 00F9                 ___ftpack@sign 0028                         tablat 000FF5  
            __end_ofi2___ftge 2270                         ttemp5 005D                         ttemp6 0060  
                       ttemp7 0064                         status 000FD8       read_adc_voltage@voltage 0083  
                       wtemp8 005D               __end_of_sprintf 0B50  __size_of_increment10MinClock 004E  
             ___lbdiv@divisor 0028               ___lbdiv@counter 002A            __size_ofi2___ftadd 01A8  
          __size_ofi2___ftsub 0040               ?i2_reloadTimer0 0001               __initialization 2270  
                __end_of_main 119E               ??_lcd_send_byte 002D                _decrementClock 2632  
                 ?i2___ftpack 0001                        ??_main 0041                 ___fttol@sign1 0090  
               __activetblptr 000002          __size_of__tdiv_to_l_ 00FE               _clockNormalMode 1FF6  
                      _ADCON0 000FC2                        _ADCON1 000FC1                        _ADCON2 000FC0  
            ___llmod@dividend 0031                        ?_scale 0080                        _ADRESH 000FC4  
                      _ADRESL 000FC3              ___awdiv@dividend 002A             _decrementMinClock 294E  
            __end_of___awtoft 29C0              __end_of___ftpack 1F48              __end_of___lltoft 24DA  
                      i2l4301 18E4                        i2l4311 1914                        i2l4253 17E2  
                      i2l4281 185C                        i2l4363 2B28                        i2l4283 1866  
                      i2l4259 180A                        i2l4371 26A0                        i2l4293 189A  
                      i2l4285 1870                        i2l4605 221E                        i2l4295 18A4  
                      i2l4615 226C                        i2l4623 283A                        i2l4609 2240  
                      i2l4641 1E40                        i2l3771 1FA4                        i2l3763 1F66  
                      i2l4395 207A                        i2l3773 1FC2                        i2l3765 1F70  
                      i2l4645 1E7C                        i2l3775 1FCC                        i2l3767 1F8E  
                      _INTCON 000FF2              __end_of___lwtoft 2AD0                 display@Buffer 0180  
                      u453_41 17A2                        u454_41 17B6            ?_decrementMinClock 0001  
         _decrement10MinClock 2864              __end_of_delay_ms 2A64                        _Buffer 00D6  
         ??_decrementMinClock 0024              __end_of__powers_ FF0C              __end_of_lcd_init 275A  
            __end_of_lcd_putc 25E4              __end_of_lcd_puts 2AAC                        ___ftge 2186  
      __end_of_decrementClock 2680                        ___wmul 2A18                     ??___awdiv 002E  
                   ??___lbdiv 0029                     ??___ftadd 0091                     ??___awmod 0028  
                   ??___lbmod 0025                     ??___ftdiv 0036                     ??___ftneg 0027  
                   ??___lldiv 002C                     ??___ftmul 0038                     ??___llmod 0039  
                   ??___ftsub 0041                     ??___fttol 008B                        _fround 13F2  
                      clear_0 22C0                        clear_1 22CC              ___awdiv@quotient 0030  
             ___awmod@divisor 0026               ___awmod@counter 0028          ?_decrement10MinClock 0001  
                   ??_highIsr 0024                     ??_display 00D2         ___ftmul@f3_as_product 003C  
     __end_of_init_adc_no_lib 2B54                  __pdataCOMRAM 0051                     ??_isdigit 0024  
           __end_ofi2___ftadd 193A                i2___ftadd@exp1 0014                i2___ftadd@exp2 0013  
           __end_ofi2___ftsub 2864                i2___ftadd@sign 0012                  __mediumconst FEE4  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
  __size_of_decrement10SClock 005A     __end_of_decrementMinClock 2988       __size_of_incrementClock 005A  
                   ??_sprintf 00B0              ___lbdiv@dividend 0029               ___lbmod@divisor 0024  
                  __accesstop 0080       __end_of__initialization 22D2               ___lbmod@counter 0026  
                  ___ftadd@f1 008B                    ___ftadd@f2 008E           __size_ofi2___ftpack 00AE  
                  ___ftge@ff1 009D                    ___ftge@ff2 00A0                 ___rparam_used 000001  
                  ___ftdiv@f1 0030                    ___ftdiv@f2 0033                    ___ftdiv@f3 003A  
                  ___ftneg@f1 0024                    ___awtoft@c 002C                i2___ftpack@arg 0001  
              i2___ftpack@exp 0004                    ___ftmul@f1 0032                    ___ftmul@f2 0035  
                  ___ftsub@f1 0097                    ___ftsub@f2 009A                    ___fttol@f1 0087  
              __pcstackCOMRAM 0001         __size_of_delay_cycles 002E               ?_decrementClock 0001  
                __pidataBANK1 2B7C                    ___lltoft@c 002C                 ?_EXT_Int0_isr 0001  
               ?_EXT_Int1_isr 0001                 __end_of_scale 0EC6         ??_decrement10MinClock 0024  
            ___lbdiv@quotient 002B       __end_of_clockNormalMode 2080                    ___lwtoft@c 002C  
                   ?i2___ftge 001B                    __div_to_l_ 1B2C     __size_of_read_adc_voltage 006A  
           lcd_gotoxy@address 0030               __div_to_l_@exp1 002F               __div_to_l_@cntr 002E  
                     ??_scale 0041               __div_to_l_@quot 002A                  sprintf@width 00CD  
                  __pbssBANK0 00D6                    __pbssBANK1 01E0   __end_of_read_adc_raw_no_lib 28DA  
                _delay_cycles 29C0                 __div_to_l_@f1 0024                 __div_to_l_@f2 0027  
               ?_reloadTimer0 0001   __size_of_incrementHourClock 001A             _increment10SClock 2420  
              lcd_send_byte@n 002C                       ?___ftge 009D                ??_EXT_Int0_isr 0001  
              ??_EXT_Int1_isr 0015                       ?___wmul 0024            ?_increment10SClock 0001  
            lcd_send_nibble@n 002B                       ?_fround 0080                     ?___awtoft 002C  
                   ?___ftpack 0024                     ?___lltoft 002C                    ??i2___ftge 0021  
         _increment10MinClock 25E4                     ?___lwtoft 002C           ??_increment10SClock 0024  
            ?_init_adc_no_lib 0001                       _INTCON2 000FF1                       _INTCON3 000FF0  
              display@Buffer1 01A0                display@Buffer2 01C0            _decrementHourClock 2B74  
                   ?_delay_ms 0024                    _lcd_gotoxy 27E2    __size_of_decrementMinClock 003A  
                   ?_lcd_init 0001                     ?_lcd_putc 0001                     ?_lcd_puts 0032  
         ?_decrementHourClock 0001              ??i2_reloadTimer0 0001          ?_increment10MinClock 0001  
              ??_reloadTimer0 0024     __end_of_increment10SClock 247E             __end_of__npowers_ FF33  
                     __Hparam 0000                    _scale$1844 0083                       __Lparam 0000  
    __size_of_lcd_send_nibble 0022               __size_of___ftge 0076                       ___awdiv 2080  
                     ___lbdiv 28DA                       ___ftadd 15E8                       ___awmod 22E0  
                     ___lbmod 29EE                       ___ftdiv 1C20                       ___ftneg 2A64  
                     ___lldiv 2104               __size_of___wmul 0026                       ___ftmul 1A38  
                     ___llmod 23BA                       ___ftsub 27A0                       ___fttol 1D06  
        ??_decrementHourClock 0024                       __pcinit 2270                  ??i2___ftpack 0006  
                     _clkMode 005A                    ??___awtoft 002F                    ??___ftpack 0029  
             __size_of_fround 01F6                       __ramtop 1000                    ??___lltoft 0030  
                     __ptext0 0EC6                       __ptext1 26CA                       __ptext2 2B60  
                     __ptext3 2350                       __ptext4 28A0                       __ptext5 1C20  
                     __ptext6 2988                       __ptext7 2712                       __ptext8 2B48  
                     __ptext9 275A                       _highIsr 0008              ?_clockNormalMode 0001  
                  ??___lwtoft 002F                       _display 119E                     _T0CONbits 000FD5  
                 ?__div_to_l_ 0024                       _dpowers FF33                       _initial 0047  
                     _isdigit 2AF2              ___awmod@dividend 0024                       _minutes 01E0  
                     _seconds 01E6                _incrementClock 24DA                    ??_delay_ms 0026  
                     _stpMode 0049                       _sprintf 0012                    ??_lcd_init 002E  
              __pintcode_body 1DDC                    ??_lcd_putc 0031                    ??_lcd_puts 0034  
        end_of_initialization 22D2         ??_increment10MinClock 0024                 __Lmediumconst FEE4  
                     int_func 1DDC          lcd_send_byte@cm_data 002D            __end_ofi2___ftpack 1FF6  
             ___lldiv@divisor 0028               ___lldiv@counter 0030             _incrementMinClock 275A  
                     postdec1 000FE5                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE            ?_incrementMinClock 0001                __tdiv_to_l_@f1 0024  
              __tdiv_to_l_@f2 0027         __end_of_lcd_send_byte 294E                 ??__tdiv_to_l_ 002A  
                   _PORTBbits 000F81                     _PORTCbits 000F82                     _PORTEbits 000F84  
                  _setupPorts 26CA        __end_of_incrementClock 2534           ??_incrementMinClock 0024  
            ___lbmod@dividend 0025              _read_adc_voltage 2350                     _TRISCbits 000F94  
                 ?_lcd_gotoxy 002E                     i2___ftadd 1792          __end_of_EXT_Int0_isr 2B2E  
        __end_of_EXT_Int1_isr 26CA               _LCD_INIT_STRING 0051                     i2___ftsub 2824  
                   _RPS_count 004F                   ___lbmod@rem 0027                   ___ftdiv@exp 003D  
                  display@LCD 0100              ??_decrementClock 0024    __size_of_increment10SClock 005E  
   __end_of_incrementMinClock 27A0               i2___ftpack@sign 0005           __size_of__div_to_l_ 00F4  
                 ___ftmul@exp 003B                __end_of___ftge 21FC                __end_of___wmul 2A3E  
               __pidataCOMRAM 2B54                 delay_cycles@n 0027                 delay_cycles@x 0028  
           ??_lcd_send_nibble 002A                __end_of_fround 15E8               ?_incrementClock 0001  
        __end_of_reloadTimer0 2B6A           start_initialization 2270             __size_ofi2___ftge 0074  
         __end_of__tdiv_to_l_ 1A38                    ?i2___ftadd 0009                    ?i2___ftsub 0015  
             ___llmod@divisor 0035               ___llmod@counter 0039   __end_of_decrement10MinClock 28A0  
                    ??___ftge 00A3           __size_of_lcd_gotoxy 0042                      ??___wmul 0028  
                 __pdataBANK1 01E4  read_adc_raw_no_lib@raw_value 0029                      ??_fround 0083  
               sprintf@tmpval 00BE                   ?_setupPorts 0001                    fround@prec 008A  
           __size_of___awtoft 0038             __size_of___ftpack 00AE             __size_of___lltoft 005C  
                 __pbssCOMRAM 0041             __size_of___lwtoft 0024                 __pcstackBANK0 0080  
               __pcstackBANK1 0100                  _isdigit$1593 0025             __size_of_delay_ms 0026  
           __size_of_lcd_init 0048                   sprintf@flag 00C8                   sprintf@eexp 00C6  
           __size_of_lcd_putc 0056             __size_of_lcd_puts 0024                   sprintf@fval 00CA  
                 sprintf@prec 00CF    __end_of_incrementHourClock 2B48    __size_of_incrementMinClock 0046  
                   __pintcode 0008  __size_of_read_adc_raw_no_lib 003A                 __pmediumconst FEE4  
                   _flageBuzz 00FC                      ?___awdiv 002A                      ?___lbdiv 0028  
                    ?___ftadd 008B                      ?___awmod 0024                      ?___lbmod 0024  
                    ?___ftdiv 0030                      ?___ftneg 0024                      ?___lldiv 0024  
                    ?___ftmul 0032                      ?___llmod 0031                      ?___ftsub 0097  
                   __npowers_ FF0C                      ?___fttol 0087                   __tdiv_to_l_ 193A  
                    ?_highIsr 0001                      ?_display 0001                  ??__div_to_l_ 002A  
       __size_of_EXT_Int0_isr 001E                      ?_isdigit 0001         __size_of_EXT_Int1_isr 004A  
                 ??i2___ftadd 000F                      ?_sprintf 00A6                __size_of_scale 0376  
                 ??i2___ftsub 001B      __size_of_init_adc_no_lib 000C                ___wmul@product 0028  
                   delay_ms@i 0026                     delay_ms@n 0024           __size_of_setupPorts 0048  
          __end_of__div_to_l_ 1C20                      i2u515_40 1DFA                      i2u460_40 17FC  
    __end_of_read_adc_voltage 23BA                      i2u374_40 1F58                      i2u470_40 18AC  
                    i2u463_40 183A                      i2u457_40 17D4                      i2u378_40 1FD6  
                    i2u467_40 1878                      i2u478_40 200E                      _RCONbits 000FD0  
  read_adc_raw_no_lib@channel 0028                  _EXT_Int0_isr 2B10                  _EXT_Int1_isr 2680  
       __size_of_reloadTimer0 000A   __size_of_decrementHourClock 0008                    _ADCON0bits 000FC2  
           ___wmul@multiplier 0024                      i2___ftge 21FC                     lcd_init@i 002E  
                   main@count 00D4                     lcd_putc@c 0031                     lcd_puts@s 0032  
                ??_lcd_gotoxy 002F   __end_of_increment10MinClock 2632      __size_of_clockNormalMode 008A  
                 _INTCON2bits 000FF1                   _INTCON3bits 000FF0                     copy_data0 2284  
                   copy_data1 22A4               _lcd_send_nibble 2AD0                  _reloadTimer0 2B60  
                    __Hrparam 0000                      __Lrparam 0000       __size_ofi2_reloadTimer0 000A  
          __end_of_lcd_gotoxy 2824              ??_incrementClock 0024              __size_of___awdiv 0084  
            __size_of___lbdiv 003A              __size_of___ftadd 01AA              __size_of___awmod 0070  
            __size_of___lbmod 002A              __size_of___ftdiv 00E6              __size_of___ftneg 0024  
            __size_of___lldiv 0082              __size_of___ftmul 00F4              __size_of___llmod 0066  
            __size_of___ftsub 0042              __size_of___fttol 00D6                      ___awtoft 2988  
                    ___ftpack 1E9A                   _fround$1842 0087                   _fround$1843 0084  
                    ___lltoft 247E                      ___lwtoft 2AAC              __size_of_highIsr 1E92  
            __size_of_display 0254                    sprintf@len 00BC                    sprintf@val 00C2  
            __size_of_isdigit 001E                      _delay_ms 2A3E                      __ptext10 2B2E  
                    __ptext11 24DA                      __ptext20 13F2                      __ptext12 2420  
                    __ptext21 29EE                      __ptext13 25E4                      __ptext30 1D06  
                    __ptext22 28DA                      __ptext14 119E                      __ptext31 27A0  
                    __ptext23 1A38                      __ptext15 0012                      __ptext40 29C0  
                    __ptext32 15E8                      __ptext24 193A                      __ptext16 0B50  
                    __ptext41 2A3E                      __ptext33 2A64                      __ptext25 1B2C  
                    __ptext17 22E0                      __ptext50 2824                      __ptext42 294E  
                    __ptext34 2186                      __ptext26 2A18                      __ptext18 2080  
                    __ptext51 21FC                      __ptext43 2B74                      __ptext35 2A88  
                    __ptext27 247E                      __ptext19 2AF2                      __ptext52 1FF6  
                    __ptext44 2632                      __ptext36 258E                      __ptext28 23BA  
                    __ptext53 2B6A                      __ptext45 2534                      __ptext37 27E2  
                    __ptext29 2104                      __ptext54 2680                      __ptext46 2864  
                    __ptext38 2914                      __ptext55 1792                      __ptext47 2AAC  
                    __ptext39 2AD0                      __ptext56 1F48                      __ptext48 1E9A  
                    __ptext57 2B10                      __powers_ FEE5                      _lcd_init 2712  
                    _lcd_putc 258E                      _lcd_puts 2A88              __size_of_sprintf 0B3E  
      __size_of_lcd_send_byte 003A                 ?_delay_cycles 0001                 __size_of_main 02D8  
           ??_init_adc_no_lib 0024                      int$flags 005C                  ??_setupPorts 0024  
                  _INTCONbits 000FF2                      isdigit@c 0026           _read_adc_raw_no_lib 28A0  
                    scale@scl 0086                      intlevel2 0000                     sprintf@ap 00BB  
                   sprintf@cp 00B9       __end_of_lcd_send_nibble 2AF2              __tdiv_to_l_@exp1 0032  
            __tdiv_to_l_@cntr 0031                     sprintf@sp 00A6                ??_delay_cycles 0024  
            __tdiv_to_l_@quot 002D              ___lldiv@dividend 0024             ??_clockNormalMode 0001  
          __end_of_setupPorts 2712          ?_read_adc_raw_no_lib 0024       __size_of_decrementClock 004E  
          _incrementHourClock 2B2E                 _lcd_send_byte 2914                  ?__tdiv_to_l_ 0024  
__size_of_decrement10MinClock 003C                      sprintf@c 00D1                      sprintf@f 00A8  
            ___lldiv@quotient 002C           ?_incrementHourClock 0001          ??_incrementHourClock 0024  
       ??_read_adc_raw_no_lib 0026  
